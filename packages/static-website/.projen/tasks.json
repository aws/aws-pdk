{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files"
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API docs from .jsii manifest",
      "steps": [
        {
          "exec": "mkdir -p docs/api/typescript && jsii-docgen -r -o docs/api/typescript/index.md"
        },
        {
          "exec": "mkdir -p docs/api/python && jsii-docgen -l python -r -o docs/api/python/index.md"
        },
        {
          "exec": "mkdir -p docs/api/java && jsii-docgen -l java -r -o docs/api/java/index.md"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx ${CI:-'--fix'} --no-error-on-unmatched-pattern src test",
          "receiveArgs": true
        }
      ]
    },
    "eslint-staged": {
      "name": "eslint-staged",
      "description": "Run eslint against the staged files only",
      "steps": [
        {
          "exec": "eslint --fix --no-error-on-unmatched-pattern $(git diff --name-only --relative --staged HEAD . | grep -E '.(ts|tsx)$' | grep -v 'samples/*' | xargs)"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "jest": {
      "name": "jest",
      "steps": [
        {
          "exec": "jest --passWithNoTests ${CI:-'--updateSnapshot'} ${NX_WORKSPACE_ROOT:+'--runInBand'}",
          "receiveArgs": true
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "pnpm exec license-checker --summary --production --onlyAllow 'MIT;Apache-2.0;Unlicense;BSD;BSD-2-Clause;BSD-3-Clause;ISC;'"
        },
        {
          "spawn": "resolve-symlinks"
        },
        {
          "spawn": "package-all"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:java"
        },
        {
          "spawn": "package:python"
        }
      ]
    },
    "package:java": {
      "name": "package:java",
      "description": "Create java language bindings",
      "steps": [
        {
          "exec": "[ -d ~/.m2/repository ] && [ ! -d \"../../node_modules/.cache/.m2/repository\" ] && mkdir -p ../../node_modules/.cache/.m2 && ln -s ~/.m2/repository ../../node_modules/.cache/.m2/repository || true"
        },
        {
          "exec": "jsii-pacmak -v --target java --maven-local-repository=../../node_modules/.cache/.m2/repository --pack-command='pnpm pack'"
        },
        {
          "exec": "zip -FSr ../java.zip .",
          "cwd": "dist/java"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js --pack-command='pnpm pack'"
        },
        {
          "exec": "zip -FSr ../js.zip .",
          "cwd": "dist/js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python --pack-command='pnpm pack'"
        },
        {
          "exec": "zip -FSr ../python.zip .",
          "cwd": "dist/python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "exec": "rm -f tsconfig.json"
        },
        {
          "spawn": "docgen"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "exec": "rm -f tsconfig.json"
        }
      ]
    },
    "release:create": {
      "name": "release:create",
      "steps": [
        {
          "exec": "pnpm exec nx run @aws-prototyping-sdk/static-website:\"release:github\""
        }
      ],
      "condition": "[ \"${CI:-false}\" = \"true\" ] && [ -f \"dist/.release.env\" ]"
    },
    "release:init": {
      "name": "release:init",
      "description": "Initialize the package for release by ensuring initial tag",
      "steps": [
        {
          "exec": "git tag -f @aws-prototyping-sdk/static-website-0.0.0 last-release^{}"
        }
      ],
      "condition": "[ -z \"$(git tag -l '@aws-prototyping-sdk/static-website-0.*')\" ]"
    },
    "release:prepare": {
      "name": "release:prepare",
      "steps": [
        {
          "exec": "rm -rf dist && mkdir dist"
        },
        {
          "spawn": "release:init"
        }
      ]
    },
    "release:publish": {
      "name": "release:publish",
      "description": "Publish artifacts",
      "steps": [
        {
          "exec": "pnpm --package=publib@latest dlx publib-npm"
        },
        {
          "exec": "pnpm --package=publib@latest dlx publib-maven"
        },
        {
          "exec": "pnpm --package=publib@latest dlx publib-pypi"
        }
      ],
      "condition": "[ \"${CI:-false}\" = \"true\" ] && [ -f \"dist/.release.env\" ]"
    },
    "resolve-symlinks": {
      "name": "resolve-symlinks",
      "steps": [
        {
          "exec": "find . -type l -exec bash -c 'P=$(readlink -f \"$1\") && rm -rf $1 && cp -r $P $1' bash {} \\;"
        }
      ],
      "condition": "[ \"${CI:-false}\" = \"true\" ] && [ \"${RELEASE:-false}\" = \"true\" ]"
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "jest"
        },
        {
          "spawn": "eslint"
        }
      ],
      "condition": "[ \"${SKIP_TEST:-false}\" != \"true\" ]"
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
