// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Python Async Infrastructure Code Generation Script Unit Tests Generates Functions for handlers.yaml 1`] = `
"from aws_cdk import Duration
from aws_cdk.aws_lambda import (
    Function, Runtime, Tracing, Code
)
from aws_pdk.type_safe_api import SnapStartFunction
from os import path
from pathlib import Path



class JavaOneFunction(SnapStartFunction):
    """
    Lambda function construct which points to the java implementation of JavaOne
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.JAVA_17,
            handler="test.test-java-handlers.handlers.JavaOneHandler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../java-handlers/dist/java/test/com.aws.pdk.test.handlers/1.0.0/com.aws.pdk.test.handlers-1.0.0.jar",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class JavaTwoFunction(SnapStartFunction):
    """
    Lambda function construct which points to the java implementation of JavaTwo
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.JAVA_17,
            handler="test.test-java-handlers.handlers.JavaTwoHandler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../java-handlers/dist/java/test/com.aws.pdk.test.handlers/1.0.0/com.aws.pdk.test.handlers-1.0.0.jar",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class PythonOneFunction(Function):
    """
    Lambda function construct which points to the python implementation of PythonOne
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.PYTHON_3_11,
            handler="test_python_handlers.python_one.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../python-handlers/dist/lambda",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class PythonTwoFunction(Function):
    """
    Lambda function construct which points to the python implementation of PythonTwo
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.PYTHON_3_11,
            handler="test_python_handlers.python_two.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../python-handlers/dist/lambda",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class TypescriptOneFunction(Function):
    """
    Lambda function construct which points to the typescript implementation of TypescriptOne
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.NODEJS_18_X,
            handler="index.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../typescript-handlers/dist/lambda",
                "typescript-one",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class TypescriptTwoFunction(Function):
    """
    Lambda function construct which points to the typescript implementation of TypescriptTwo
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.NODEJS_18_X,
            handler="index.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../typescript-handlers/dist/lambda",
                "typescript-two",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )"
`;

exports[`Python Async Infrastructure Code Generation Script Unit Tests Generates Functions for inline-body.yaml 1`] = `
"from aws_cdk import Duration
from aws_cdk.aws_lambda import (
    Function, Runtime, Tracing, Code
)
from aws_pdk.type_safe_api import SnapStartFunction
from os import path
from pathlib import Path



class JavaFunction(SnapStartFunction):
    """
    Lambda function construct which points to the java implementation of Java
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.JAVA_17,
            handler="test.test-java-handlers.handlers.JavaHandler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../java-handlers/dist/java/test/com.aws.pdk.test.handlers/1.0.0/com.aws.pdk.test.handlers-1.0.0.jar",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class PythonFunction(Function):
    """
    Lambda function construct which points to the python implementation of Python
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.PYTHON_3_11,
            handler="test_python_handlers.python.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../python-handlers/dist/lambda",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class TypeScriptFunction(Function):
    """
    Lambda function construct which points to the typescript implementation of TypeScript
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.NODEJS_18_X,
            handler="index.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../typescript-handlers/dist/lambda",
                "type-script",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )"
`;

exports[`Python Async Infrastructure Code Generation Script Unit Tests Generates With single.yaml 1`] = `
"from dataclasses import fields
from aws_pdk.type_safe_api import TypeSafeRestApi, TypeSafeApiIntegration
from test_client.api.operation_config import OperationLookup, OperationConfig
from os import path
from pathlib import Path

SPEC_PATH = path.join(str(Path(__file__).absolute().parent), "../../spec.yaml")

class Api(TypeSafeRestApi):
    """
    Type-safe construct for the API Gateway resources defined by your model.
    This construct is generated and should not be modified.
    """
    def __init__(self, scope, id, integrations: OperationConfig[TypeSafeApiIntegration], **kwargs):
        super().__init__(scope, id,
            **kwargs,
            integrations={ field.name: getattr(integrations, field.name) for field in fields(integrations) },
            spec_path=SPEC_PATH,
            operation_lookup=OperationLookup,
        )
"
`;

exports[`Python Async Infrastructure Code Generation Script Unit Tests Generates With single.yaml 2`] = `"#"`;

exports[`Python Async Infrastructure Code Generation Script Unit Tests Generates With single.yaml 3`] = `undefined`;
