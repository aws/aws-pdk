// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Infrastructure Code Generation Script Unit Tests Generates With single.yaml 1`] = `
"import { TypeSafeRestApi, TypeSafeRestApiProps, TypeSafeApiIntegration } from "@aws-prototyping-sdk/type-safe-api";
import { Construct } from "constructs";
import { OperationLookup, OperationConfig } from "test-client";
import * as path from "path";

export type ApiIntegrations = OperationConfig<TypeSafeApiIntegration>;

export interface ApiProps extends Omit<TypeSafeRestApiProps, "specPath" | "operationLookup" | "integrations"> {
  readonly integrations: ApiIntegrations;
}

/**
 * Type-safe construct for the API Gateway resources defined by your model.
 * This construct is generated and should not be modified.
 */
export class Api extends TypeSafeRestApi {
  constructor(scope: Construct, id: string, props: ApiProps) {
    super(scope, id, {
      ...props,
      integrations: props.integrations as any,
      specPath: path.resolve(__dirname, "../../../../../resources/specs/single.yaml"),
      operationLookup: OperationLookup as any,
    });
  }
}
"
`;

exports[`Typescript Infrastructure Code Generation Script Unit Tests Generates With single.yaml 2`] = `
"import {
  ApiError,
  ApiErrorToJSON,
  MapResponse,
  MapResponseToJSON,
  MapResponseMapPropertyValue,
  MapResponseMapPropertyValueToJSON,
  TestRequest,
  TestRequestToJSON,
  TestResponse,
  TestResponseToJSON,
  TestResponseMessagesInner,
  TestResponseMessagesInnerToJSON,
} from "test-client";
import { Integrations, MockIntegration } from "@aws-prototyping-sdk/type-safe-api";
import * as fs from "fs";
import * as path from "path";

/**
 * Type-safe mock integrations for API operations
 */
export class MockIntegrations {
  /**
   * Mock integration to return a 200 response from the anyRequestResponse operation
   */
  public static anyRequestResponse200(body: string): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body,
    });
  }

  /**
   * Mock integration to return a 204 response from the empty operation
   */
  public static empty204(): MockIntegration {
    return Integrations.mock({
      statusCode: 204,
    });
  }

  /**
   * Mock integration to return a 200 response from the mapResponse operation
   * Call this with no arguments to use a generated mock response
   */
  public static mapResponse200(body?: MapResponse): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body: body === undefined
        ? fs.readFileSync(path.join(__dirname, "..", "mocks", \`get\${"/map-response".replace(/\\//g, "-")}-200.json\`), "utf-8")
        : JSON.stringify(MapResponseToJSON(body)),
    });
  }

  /**
   * Mock integration to return a 200 response from the mediaTypes operation
   */
  public static mediaTypes200(body: string): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body,
    });
  }

  /**
   * Mock integration to return a 200 response from the multipleContentTypes operation
   */
  public static multipleContentTypes200(body: string): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body,
    });
  }

  /**
   * Mock integration to return a 200 response from the operationOne operation
   * Call this with no arguments to use a generated mock response
   */
  public static operationOne200(body?: TestResponse): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body: body === undefined
        ? fs.readFileSync(path.join(__dirname, "..", "mocks", \`post\${"/path/{pathParam}".replace(/\\//g, "-")}-200.json\`), "utf-8")
        : JSON.stringify(TestResponseToJSON(body)),
    });
  }

  /**
   * Mock integration to return a 400 response from the operationOne operation
   * Call this with no arguments to use a generated mock response
   */
  public static operationOne400(body?: ApiError): MockIntegration {
    return Integrations.mock({
      statusCode: 400,
      body: body === undefined
        ? fs.readFileSync(path.join(__dirname, "..", "mocks", \`post\${"/path/{pathParam}".replace(/\\//g, "-")}-400.json\`), "utf-8")
        : JSON.stringify(ApiErrorToJSON(body)),
    });
  }

  /**
   * Mock integration to return a 200 response from the withoutOperationIdDelete operation
   * Call this with no arguments to use a generated mock response
   */
  public static withoutOperationIdDelete200(body?: TestResponse): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body: body === undefined
        ? fs.readFileSync(path.join(__dirname, "..", "mocks", \`_delete\${"/without-operation-id".replace(/\\//g, "-")}-200.json\`), "utf-8")
        : JSON.stringify(TestResponseToJSON(body)),
    });
  }


  /**
   * Mock all operations for which generated JSON data can be returned.
   * The first available response is used for each operation. In most cases this is the successful 200 response.
   */
  public static mockAll() {
    return {
      mapResponse: {
        integration: MockIntegrations.mapResponse200(),
      },
      operationOne: {
        integration: MockIntegrations.operationOne200(),
      },
      withoutOperationIdDelete: {
        integration: MockIntegrations.withoutOperationIdDelete200(),
      },
    };
  }
}
"
`;

exports[`Typescript Infrastructure Code Generation Script Unit Tests Generates With single.yaml 3`] = `
"export * from "./api";
export * from "./mock-integrations";
"
`;
