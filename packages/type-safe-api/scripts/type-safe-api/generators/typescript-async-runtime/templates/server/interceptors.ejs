###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors",
  "name": "try-catch",
  "ext": ".ts",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###import {
  PayloadlessChainedRequestInput,
} from '..';

/**
 * Create an interceptor which catches any unhandled exceptions
 */
export const buildTryCatchInterceptor = () => async (
  request: PayloadlessChainedRequestInput,
): Promise<void> => {
  try {
    return await request.chain.next(request);
  } catch (e: any) {
    // Log the error if the logger is present
    if (request.interceptorContext.logger && request.interceptorContext.logger.error) {
      request.interceptorContext.logger.error('Interceptor caught exception', e as Error);
    } else {
      console.error('Interceptor caught exception', e);
    }
  }
};

/**
 * Interceptor for catching unhandled exceptions
 */
export const tryCatchInterceptor = buildTryCatchInterceptor();
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors/powertools",
  "name": "logger",
  "ext": ".ts",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###import { Logger } from '@aws-lambda-powertools/logger';
import { PayloadlessChainedRequestInput, ChainedRequestInput } from '../..';

const logger = new Logger();

export class LoggingInterceptor {
  /**
   * Interceptor which adds an aws lambda powertools logger to the interceptor context,
   * and adds the lambda context
   * @see https://docs.powertools.aws.dev/lambda/typescript/latest/core/logger/
   */
  public static intercept = async (
    request: PayloadlessChainedRequestInput,
  ): Promise<void> => {
    logger.addContext(request.context);
    logger.appendKeys({ operationId: request.interceptorContext.operationId });
    request.interceptorContext.logger = logger;
    const response = await request.chain.next(request);
    logger.removeKeys(['operationId']);
    return response;
  };

  /**
   * Retrieve the logger from the interceptor context
   */
  public static getLogger = (request: PayloadlessChainedRequestInput | ChainedRequestInput<any>): Logger => {
    if (!request.interceptorContext.logger) {
      throw new Error('No logger found, did you configure the LoggingInterceptor?');
    }
    return request.interceptorContext.logger;
  };
}
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors/powertools",
  "name": "tracer",
  "ext": ".ts",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###import { Tracer } from '@aws-lambda-powertools/tracer';
import { PayloadlessChainedRequestInput, ChainedRequestInput } from '../..';

const tracer = new Tracer();

/**
 * Create an interceptor which adds an aws lambda powertools tracer to the interceptor context,
 * creating the appropriate segment for the handler execution and annotating with recommended
 * details.
 * @see https://docs.powertools.aws.dev/lambda/typescript/latest/core/tracer/#lambda-handler
 */
export const buildTracingInterceptor = () => async (
  request: PayloadlessChainedRequestInput,
): Promise<void> => {
  const handler = request.interceptorContext.operationId ?? process.env._HANDLER ?? 'index.handler';
  const segment = tracer.getSegment();
  let subsegment;
  if (segment) {
    subsegment = segment.addNewSubsegment(handler);
    tracer.setSegment(subsegment);
  }

  tracer.annotateColdStart();
  tracer.addServiceNameAnnotation();

  if (request.interceptorContext.logger) {
    tracer.provider.setLogger(request.interceptorContext.logger);
  }

  request.interceptorContext.tracer = tracer;

  try {
    return await request.chain.next(request);
  } catch (e) {
    tracer.addErrorAsMetadata(e as Error);
    throw e;
  } finally {
    if (segment && subsegment) {
      subsegment.close();
      tracer.setSegment(segment);
    }
  }
};

export class TracingInterceptor {
  /**
   * Interceptor which adds an aws lambda powertools tracer to the interceptor context,
   * creating the appropriate segment for the handler execution and annotating with recommended
   * details.
   */
  public static intercept = buildTracingInterceptor();

  /**
   * Get the tracer from the interceptor context
   */
  public static getTracer = (
    request: PayloadlessChainedRequestInput | ChainedRequestInput<any>,
  ): Tracer => {
    if (!request.interceptorContext.tracer) {
      throw new Error('No tracer found, did you configure the TracingInterceptor?');
    }
    return request.interceptorContext.tracer;
  };
}
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors/powertools",
  "name": "metrics",
  "ext": ".ts",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###import { Metrics } from '@aws-lambda-powertools/metrics';
import { PayloadlessChainedRequestInput, ChainedRequestInput } from '../..';

const metrics = new Metrics();

export class MetricsInterceptor {
  /**
   * Interceptor which adds an instance of aws lambda powertools metrics to the interceptor context,
   * and ensures metrics are flushed prior to finishing the lambda execution
   * @see https://docs.powertools.aws.dev/lambda/typescript/latest/core/metrics/
   */
  public static intercept = async (
    request: PayloadlessChainedRequestInput,
  ): Promise<void> => {
    metrics.addDimension("operationId", request.interceptorContext.operationId);
    request.interceptorContext.metrics = metrics;
    try {
      return await request.chain.next(request);
    } finally {
      // Flush metrics
      metrics.publishStoredMetrics();
    }
  };

  /**
   * Retrieve the metrics logger from the request
   */
  public static getMetrics = (
    request: PayloadlessChainedRequestInput | ChainedRequestInput<any>,
  ): Metrics => {
    if (!request.interceptorContext.metrics) {
      throw new Error('No metrics logger found, did you configure the MetricsInterceptor?');
    }
    return request.interceptorContext.metrics;
  };
}
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors",
  "name": "index",
  "ext": ".ts",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###import { LoggingInterceptor } from './powertools/logger';
import { MetricsInterceptor } from './powertools/metrics';
import { TracingInterceptor } from './powertools/tracer';
import { tryCatchInterceptor } from './try-catch';

export * from './try-catch';
export * from './powertools/tracer';
export * from './powertools/metrics';
export * from './powertools/logger';

/**
 * All default interceptors, for logging, tracing, metrics, and error handling
 */
export const INTERCEPTORS = [
  LoggingInterceptor.intercept,
  tryCatchInterceptor,
  TracingInterceptor.intercept,
  MetricsInterceptor.intercept,
] as const;
