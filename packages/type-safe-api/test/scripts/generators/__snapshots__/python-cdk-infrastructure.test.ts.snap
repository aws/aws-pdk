// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Python Infrastructure Code Generation Script Unit Tests Generates Functions 1`] = `
"from aws_cdk import Duration
from aws_cdk.aws_lambda import (
    Function, Runtime, Tracing, Code
)
from os import path
from pathlib import Path



class JavaOneFunction(Function):
    """
    Lambda function construct which points to the java implementation of JavaOne
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.JAVA_17,
            handler="test.test-java-handlers.handlers.JavaOneHandler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../java-handlers/dist/java/test/com.aws.pdk.test.handlers/1.0.0/com.aws.pdk.test.handlers-1.0.0.jar",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class JavaTwoFunction(Function):
    """
    Lambda function construct which points to the java implementation of JavaTwo
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.JAVA_17,
            handler="test.test-java-handlers.handlers.JavaTwoHandler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../java-handlers/dist/java/test/com.aws.pdk.test.handlers/1.0.0/com.aws.pdk.test.handlers-1.0.0.jar",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class PythonOneFunction(Function):
    """
    Lambda function construct which points to the python implementation of PythonOne
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.PYTHON_3_11,
            handler="test_python_handlers.python_one.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../python-handlers/dist/lambda",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class PythonTwoFunction(Function):
    """
    Lambda function construct which points to the python implementation of PythonTwo
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.PYTHON_3_11,
            handler="test_python_handlers.python_two.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../python-handlers/dist/lambda",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class TypescriptOneFunction(Function):
    """
    Lambda function construct which points to the typescript implementation of TypescriptOne
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.NODEJS_18_X,
            handler="index.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../typescript-handlers/dist/lambda",
                "typescript-one",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )

class TypescriptTwoFunction(Function):
    """
    Lambda function construct which points to the typescript implementation of TypescriptTwo
    """
    def __init__(self, scope, id, **kwargs):
        super().__init__(scope, id,
            runtime=Runtime.NODEJS_18_X,
            handler="index.handler",
            code=Code.from_asset(path.join(str(Path(__file__).absolute().parent), "..",
                "../typescript-handlers/dist/lambda",
                "typescript-two",
            )),
            tracing=Tracing.ACTIVE,
            timeout=Duration.seconds(30),
            **kwargs,
        )"
`;

exports[`Python Infrastructure Code Generation Script Unit Tests Generates With Mocks Disabled 1`] = `
"import json
from aws.pdk.type_safe_api import Integrations, MockIntegration, TypeSafeApiIntegration
from test_client.models import *
from test_client.api.operation_config import OperationConfig
from os import path
from pathlib import Path

MOCK_DATA_PATH = path.join(str(Path(__file__).absolute().parent), "..", "mocks")

class MockIntegrations:
    """
    Type-safe mock integrations for API operations
    """
    
    
    # No mock integrations have been generated, since mock data generation is disabled.
    pass
    
"
`;

exports[`Python Infrastructure Code Generation Script Unit Tests Generates With single.yaml 1`] = `
"from dataclasses import fields
from aws.pdk.type_safe_api import TypeSafeRestApi, TypeSafeApiIntegration
from test_client.api.operation_config import OperationLookup, OperationConfig
from os import path
from pathlib import Path

SPEC_PATH = path.join(str(Path(__file__).absolute().parent), "../../spec.yaml")

class Api(TypeSafeRestApi):
    """
    Type-safe construct for the API Gateway resources defined by your model.
    This construct is generated and should not be modified.
    """
    def __init__(self, scope, id, integrations: OperationConfig[TypeSafeApiIntegration], **kwargs):
        super().__init__(scope, id,
            **kwargs,
            integrations={ field.name: getattr(integrations, field.name) for field in fields(integrations) },
            spec_path=SPEC_PATH,
            operation_lookup=OperationLookup,
        )
"
`;

exports[`Python Infrastructure Code Generation Script Unit Tests Generates With single.yaml 2`] = `"#"`;

exports[`Python Infrastructure Code Generation Script Unit Tests Generates With single.yaml 3`] = `
"import json
from aws.pdk.type_safe_api import Integrations, MockIntegration, TypeSafeApiIntegration
from test_client.models import *
from test_client.api.operation_config import OperationConfig
from os import path
from pathlib import Path

MOCK_DATA_PATH = path.join(str(Path(__file__).absolute().parent), "..", "mocks")

class MockIntegrations:
    """
    Type-safe mock integrations for API operations
    """
    
    @staticmethod
    def any_request_response_200(body: str) -> MockIntegration:
        """
        Mock integration to return a 200 response from the any_request_response operation
        """
        return Integrations.mock(
            status_code=200,
            body=body,
        )

    @staticmethod
    def empty_204() -> MockIntegration:
        """
        Mock integration to return a 204 response from the empty operation
        """
        return Integrations.mock(
            status_code=204,
        )

    @staticmethod
    def map_response_200(body: MapResponse = None) -> MockIntegration:
        """
        Mock integration to return a 200 response from the map_response operation
        Call this with no arguments to use a generated mock response
        """
        response_body = None
        if body is None:
            with open(path.join(MOCK_DATA_PATH, "GET{}-200.json".format("/map-response".replace("/", "-")).lower()), "r") as f:
                response_body = f.read()
        else:
            response_body = body.to_json()
        return Integrations.mock(
            status_code=200,
            body=response_body,
        )

    @staticmethod
    def media_types_200(body: str) -> MockIntegration:
        """
        Mock integration to return a 200 response from the media_types operation
        """
        return Integrations.mock(
            status_code=200,
            body=body,
        )

    @staticmethod
    def multiple_content_types_200(body: str) -> MockIntegration:
        """
        Mock integration to return a 200 response from the multiple_content_types operation
        """
        return Integrations.mock(
            status_code=200,
            body=body,
        )

    @staticmethod
    def operation_one_200(body: TestResponse = None) -> MockIntegration:
        """
        Mock integration to return a 200 response from the operation_one operation
        Call this with no arguments to use a generated mock response
        """
        response_body = None
        if body is None:
            with open(path.join(MOCK_DATA_PATH, "POST{}-200.json".format("/path/{pathParam}".replace("/", "-")).lower()), "r") as f:
                response_body = f.read()
        else:
            response_body = body.to_json()
        return Integrations.mock(
            status_code=200,
            body=response_body,
        )

    @staticmethod
    def operation_one_400(body: ApiError = None) -> MockIntegration:
        """
        Mock integration to return a 400 response from the operation_one operation
        Call this with no arguments to use a generated mock response
        """
        response_body = None
        if body is None:
            with open(path.join(MOCK_DATA_PATH, "POST{}-400.json".format("/path/{pathParam}".replace("/", "-")).lower()), "r") as f:
                response_body = f.read()
        else:
            response_body = body.to_json()
        return Integrations.mock(
            status_code=400,
            body=response_body,
        )

    @staticmethod
    def without_operation_id_delete_200(body: TestResponse = None) -> MockIntegration:
        """
        Mock integration to return a 200 response from the without_operation_id_delete operation
        Call this with no arguments to use a generated mock response
        """
        response_body = None
        if body is None:
            with open(path.join(MOCK_DATA_PATH, "DELETE{}-200.json".format("/without-operation-id".replace("/", "-")).lower()), "r") as f:
                response_body = f.read()
        else:
            response_body = body.to_json()
        return Integrations.mock(
            status_code=200,
            body=response_body,
        )

    @staticmethod
    def mock_all(**kwargs) -> OperationConfig[TypeSafeApiIntegration]:
        """
        Mock all operations for which generated JSON data can be returned.
        The first available response is used for each operation. In most cases this is the successful 200 response.
        Pass any additional or overridden integrations as kwargs, for example:

        MockIntegrations.mock_all(
            say_hello=TypeSafeApiIntegration(
                integration=Integrations.lambda_(...)
            )
        )
        """
        return OperationConfig(**{
            **{
                "map_response": TypeSafeApiIntegration(
                    integration=MockIntegrations.map_response_200(),
                ),
                "operation_one": TypeSafeApiIntegration(
                    integration=MockIntegrations.operation_one_200(),
                ),
                "without_operation_id_delete": TypeSafeApiIntegration(
                    integration=MockIntegrations.without_operation_id_delete_200(),
                ),
            },
            **kwargs
        })
    
    
"
`;
