package {{#apiInfo}}{{#apis.0}}{{vendorExtensions.x-infrastructure-package}}{{/apis.0}}{{/apiInfo}};

import {{#apiInfo}}{{#apis.0}}{{vendorExtensions.x-runtime-package}}{{/apis.0}}{{/apiInfo}}.JSON;
import {{#apiInfo}}{{#apis.0}}{{vendorExtensions.x-runtime-package}}{{/apis.0}}{{/apiInfo}}.api.operation_config.OperationConfig;
import {{#apiInfo}}{{#apis.0}}{{vendorExtensions.x-runtime-package}}{{/apis.0}}{{/apiInfo}}.model.*;
import software.aws.awspdk.type_safe_api.Integrations;
import software.aws.awspdk.type_safe_api.MockIntegration;
import software.aws.awspdk.type_safe_api.MockIntegrationResponse;
import software.aws.awspdk.type_safe_api.TypeSafeApiIntegration;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Paths;
import java.util.stream.Collectors;


/**
 * Type-safe mock integrations for API operations
 */
public class MockIntegrations {
    static {
        // Instantiate json instance so that any .toJson() methods can be used
        new JSON();
    }

    /**
     * Read a mock data file for the given operation
     */
    private static String readMockDataFile(final String method, final String path, final int statusCode) {
        try {
            try (InputStream stream = MockIntegrations.class.getClassLoader()
                    .getResourceAsStream(Paths.get("mocks", method + path.replaceAll("/", "-") + String.format("-%d.json", statusCode)).toString())) {
                try (InputStreamReader inputStreamReader = new InputStreamReader(stream)) {
                    return new BufferedReader(inputStreamReader).lines().collect(Collectors.joining(System.lineSeparator()));
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    {{#apiInfo}}{{#apis.0}}{{#vendorExtensions.x-enable-mock-integrations}}
    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    {{#operation}}
    {{#responses}}
    /**
     * Mock integration to return a {{code}} response from the {{nickname}} operation
     */
    public static MockIntegration {{nickname}}{{code}}({{#dataType}}final {{#isPrimitiveType}}String{{/isPrimitiveType}}{{^isPrimitiveType}}{{.}}{{/isPrimitiveType}} body{{/dataType}}) {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode({{code}})
                {{#dataType}}
                {{#isPrimitiveType}}
                .body(body)
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                .body(body.toJson())
                {{/isPrimitiveType}}
                {{/dataType}}
                .build());
    }
    {{#dataType}}
    {{^isPrimitiveType}}

    /**
     * Mock integration to return a {{code}} response from the {{nickname}} operation, with generated mock data
     */
    public static MockIntegration {{nickname}}{{code}}() {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode({{code}})
                .body(MockIntegrations.readMockDataFile("{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}", "{{path}}", {{code}}))
                .build());
    }
    {{/isPrimitiveType}}
    {{/dataType}}

    {{/responses}}
    {{/operation}}
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}

    /**
     * Mock all operations for which generated JSON data can be returned.
     * The first available response is used for each operation. In most cases this is the successful 200 response.
     * @return a builder which you can use to override integrations for operations before calling .build()
     */
    public static OperationConfig.OperationConfigBuilder<TypeSafeApiIntegration> mockAll() {
        return OperationConfig.<TypeSafeApiIntegration>builder()
                {{#apiInfo}}
                {{#apis}}
                {{#operations}}
                {{#operation}}
                {{#responses.0}}
                {{#dataType}}
                {{^isPrimitiveType}}
                .{{nickname}}(TypeSafeApiIntegration.builder()
                        .integration(MockIntegrations.{{nickname}}{{code}}())
                        .build())
                {{/isPrimitiveType}}
                {{/dataType}}
                {{/responses.0}}
                {{/operation}}
                {{/operations}}
                {{/apis}}
                {{/apiInfo}}
                ;
    }
    {{/vendorExtensions.x-enable-mock-integrations}}{{/apis.0}}{{/apiInfo}}
    {{#apiInfo}}{{#apis.0}}{{^vendorExtensions.x-enable-mock-integrations}}
    // No mock integrations have been generated, since mock data generation is disabled.
    {{/vendorExtensions.x-enable-mock-integrations}}{{/apis.0}}{{/apiInfo}}
}
