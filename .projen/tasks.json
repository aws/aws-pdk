{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=build --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=eslint --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "eslint-staged": {
      "name": "eslint-staged",
      "description": "Run eslint against the workspace staged files only; excluding ./packages/ files.",
      "steps": [
        {
          "exec": "eslint --fix --no-error-on-unmatched-pattern $(git diff --name-only --relative --staged HEAD . | grep -E '.(ts|tsx)$' | grep -v -E '^packages/' | xargs)"
        }
      ]
    },
    "git-secrets-scan": {
      "name": "git-secrets-scan",
      "steps": [
        {
          "exec": "./scripts/git-secrets-scan.sh"
        }
      ]
    },
    "graph": {
      "name": "graph",
      "description": "Generate dependency graph for monorepo",
      "steps": [
        {
          "exec": "pnpm exec nx graph",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=package --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=post-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=pre-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "prepare": {
      "name": "prepare",
      "steps": [
        {
          "exec": "husky install"
        },
        {
          "spawn": "workspace:bin:link"
        }
      ]
    },
    "run-many": {
      "name": "run-many",
      "description": "Run task against multiple workspace projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many",
          "receiveArgs": true
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=test --output-style=stream --nx-bail",
          "receiveArgs": true
        },
        {
          "spawn": "git-secrets-scan"
        }
      ]
    },
    "upgrade-deps": {
      "name": "upgrade-deps",
      "steps": [
        {
          "exec": "pnpm exec npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor"
        },
        {
          "exec": "pnpm exec syncpack fix-mismatches"
        },
        {
          "exec": "rm pnpm-lock.yaml"
        },
        {
          "exec": "pnpm i"
        },
        {
          "exec": "pnpm exec projen"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "workspace:bin:link": {
      "name": "workspace:bin:link",
      "steps": [
        {
          "exec": "ln -s $PWD/packages/monorepo/scripts/monorepo/nx-dir-hasher.js $(pnpm bin)/monorepo.nx-dir-hasher &>/dev/null; exit 0;"
        },
        {
          "exec": "ln -s $PWD/packages/monorepo/scripts/monorepo/pnpm/link-bundled-transitive-deps.js $(pnpm bin)/monorepo.pnpm-link-bundled-transitive-deps &>/dev/null; exit 0;"
        },
        {
          "exec": "ln -s $PWD/packages/type-safe-api/scripts/type-safe-api/custom/clean-openapi-generated-code/clean-openapi-generated-code $(pnpm bin)/type-safe-api.clean-openapi-generated-code &>/dev/null; exit 0;"
        },
        {
          "exec": "ln -s $PWD/packages/type-safe-api/scripts/type-safe-api/custom/gradle-wrapper/copy-gradle-wrapper $(pnpm bin)/type-safe-api.copy-gradle-wrapper &>/dev/null; exit 0;"
        },
        {
          "exec": "ln -s $PWD/packages/type-safe-api/scripts/type-safe-api/generators/generate $(pnpm bin)/type-safe-api.generate &>/dev/null; exit 0;"
        },
        {
          "exec": "ln -s $PWD/packages/type-safe-api/scripts/type-safe-api/custom/docs/html-redoc $(pnpm bin)/type-safe-api.generate-html-redoc-docs &>/dev/null; exit 0;"
        },
        {
          "exec": "ln -s $PWD/packages/type-safe-api/scripts/type-safe-api/custom/mock-data/generate-mock-data $(pnpm bin)/type-safe-api.generate-mock-data &>/dev/null; exit 0;"
        },
        {
          "exec": "ln -s $PWD/packages/type-safe-api/scripts/type-safe-api/parser/parse-openapi-spec $(pnpm bin)/type-safe-api.parse-openapi-spec &>/dev/null; exit 0;"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"pnpm exec projen\"."
}
