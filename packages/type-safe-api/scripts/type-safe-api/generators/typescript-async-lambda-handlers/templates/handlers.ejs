<%_ if (vendorExtensions['x-connect-handler'] && vendorExtensions['x-connect-handler'].language === 'typescript') { _%>
{{#startsWith vendorExtensions.x-connect-handler.language 'typescript'}}
###TSAPI_WRITE_FILE###
{
  "id": "$connect",
  "dir": "<%= metadata.srcDir || 'src' %>",
  "name": "$connect",
  "ext": ".ts",
  "overwrite": false
}
###/TSAPI_WRITE_FILE###import {
  $connectHandler,
  $ConnectChainedLambdaHandlerFunction,
  INTERCEPTORS,
  LoggingInterceptor,
  $PendingConnection,
} from "<%= metadata.runtimePackageName %>";

/**
 * Type-safe handler for the $connect event, invoked when a new client connects to the websocket
 */
export const $connect: $ConnectChainedLambdaHandlerFunction = async (request) => {
  LoggingInterceptor.getLogger(request).info("Start $connect");

  // `connectionId` is the ID of the new connection
  // `sdk` is used to send messages to connected clients
  // Note that you cannot send messages to the new connection until after this function returns
  const { connectionId, sdk } = request;

  // TODO: Implement

  // Use the below to allow or deny the incoming connection (when the lambda returns).
  // The connection is allowed by default.
  $PendingConnection.of(request).allow();
};

/**
 * Entry point for the AWS Lambda handler for the $connect event.
 * The $connectHandler method wraps the type-safe handler and manages marshalling inputs
 */
export const handler = $connectHandler(...INTERCEPTORS, $connect);

<%_ } _%>
<%_ if (vendorExtensions['x-disconnect-handler'] && vendorExtensions['x-disconnect-handler'].language === 'typescript') { _%>
###TSAPI_WRITE_FILE###
{
  "id": "$disconnect",
  "dir": "<%= metadata.srcDir || 'src' %>",
  "name": "$disconnect",
  "ext": ".ts",
  "overwrite": false
}
###/TSAPI_WRITE_FILE###import {
  $disconnectHandler,
  $DisconnectChainedLambdaHandlerFunction,
  INTERCEPTORS,
  LoggingInterceptor,
} from "<%= metadata.runtimePackageName %>";

/**
 * Type-safe handler for the $disconnect event, invoked when a client disconnects from the websocket
 */
export const $disconnect: $DisconnectChainedLambdaHandlerFunction = async (request) => {
  LoggingInterceptor.getLogger(request).info("Start $disconnect");

  // `connectionId` is the ID of the connection which has ended
  // `sdk` is used to send messages to connected clients
  const { connectionId, sdk } = request;

  // TODO: Implement
};

/**
 * Entry point for the AWS Lambda handler for the $disconnect event.
 * The $disconnectHandler method wraps the type-safe handler and manages marshalling inputs
 */
export const handler = $disconnectHandler(...INTERCEPTORS, $disconnect);

<%_ } _%>
<%_ allOperations.filter(op => op.vendorExtensions['x-handler'] && op.vendorExtensions['x-handler'].language === 'typescript').forEach((operation) => { _%>
###TSAPI_WRITE_FILE###
{
  "id": "<%- operation.name %>",
  "dir": "<%= metadata.srcDir || 'src' %>",
  "name": "<%- operation.operationIdKebabCase %>",
  "ext": ".ts",
  "overwrite": false
}
###/TSAPI_WRITE_FILE###import {
  <%- operation.name %>Handler,
  <%- operation.operationIdPascalCase %>ChainedHandlerFunction,
  INTERCEPTORS,
  LoggingInterceptor,
} from "<%= metadata.runtimePackageName %>";

/**
 * Type-safe handler for the <%- operation.operationIdPascalCase %> operation
 */
export const <%- operation.name %>: <%- operation.operationIdPascalCase %>ChainedHandlerFunction = async (request) => {
  LoggingInterceptor.getLogger(request).info("Start <%- operation.operationIdPascalCase %> Operation");

  // `input` contains the request input
  // `connectionId` is the ID of the connection which sent this request to the server.
  // `sdk` is used to send messages to connected clients
  const { input, connectionId, sdk } = request;

  // TODO: Implement <%- operation.operationIdPascalCase %> Operation.
};

/**
 * Entry point for the AWS Lambda handler for the <%- operation.operationIdPascalCase %> operation.
 * The <%- operation.name %>Handler method wraps the type-safe handler and manages marshalling inputs
 */
export const handler = <%- operation.name %>Handler(...INTERCEPTORS, <%- operation.name %>);

<%_ }); _%>