// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Async Handlers Code Generation Script Unit Tests Generates With handlers.yaml 1`] = `
"import {
  typescriptOneHandler,
  TypescriptOneChainedHandlerFunction,
  INTERCEPTORS,
  LoggingInterceptor,
} from "test-client";

/**
 * Type-safe handler for the TypescriptOne operation
 */
export const typescriptOne: TypescriptOneChainedHandlerFunction = async (request) => {
  LoggingInterceptor.getLogger(request).info("Start TypescriptOne Operation");

  // \`input\` contains the request input
  // \`connectionId\` is the ID of the connection which sent this request to the server.
  // \`sdk\` is used to send messages to connected clients
  const { input, connectionId, sdk } = request;

  // TODO: Implement TypescriptOne Operation.
};

/**
 * Entry point for the AWS Lambda handler for the TypescriptOne operation.
 * The typescriptOneHandler method wraps the type-safe handler and manages marshalling inputs
 */
export const handler = typescriptOneHandler(...INTERCEPTORS, typescriptOne);

"
`;

exports[`Typescript Async Handlers Code Generation Script Unit Tests Generates With handlers.yaml 2`] = `
"import {
  typescriptTwoHandler,
  TypescriptTwoChainedHandlerFunction,
  INTERCEPTORS,
  LoggingInterceptor,
} from "test-client";

/**
 * Type-safe handler for the TypescriptTwo operation
 */
export const typescriptTwo: TypescriptTwoChainedHandlerFunction = async (request) => {
  LoggingInterceptor.getLogger(request).info("Start TypescriptTwo Operation");

  // \`input\` contains the request input
  // \`connectionId\` is the ID of the connection which sent this request to the server.
  // \`sdk\` is used to send messages to connected clients
  const { input, connectionId, sdk } = request;

  // TODO: Implement TypescriptTwo Operation.
};

/**
 * Entry point for the AWS Lambda handler for the TypescriptTwo operation.
 * The typescriptTwoHandler method wraps the type-safe handler and manages marshalling inputs
 */
export const handler = typescriptTwoHandler(...INTERCEPTORS, typescriptTwo);"
`;

exports[`Typescript Async Handlers Code Generation Script Unit Tests Generates With handlers.yaml 3`] = `
"import {
  TypescriptOneChainedRequestInput,
} from "test-client";
import {
  typescriptOne
} from "../src/typescript-one";

// Common request arguments
const requestArguments = {
  chain: undefined as never,
  connectionId: 'test',
  sdk: {} as any,
  event: {} as any,
  context: {} as any,
  interceptorContext: {
    logger: {
      info: jest.fn(),
    },
  },
} satisfies Omit<TypescriptOneChainedRequestInput, 'input'>;

describe('TypescriptOne', () => {

  it('should not throw', async () => {
    // TODO: Update the test as appropriate when you implement your handler
    await typescriptOne({
      ...requestArguments,
      // TODO: remove the "as any" below and fill in test values for the input
      input: {} as any,
    });
  });

});

"
`;

exports[`Typescript Async Handlers Code Generation Script Unit Tests Generates With handlers.yaml 4`] = `
"import {
  TypescriptTwoChainedRequestInput,
} from "test-client";
import {
  typescriptTwo
} from "../src/typescript-two";

// Common request arguments
const requestArguments = {
  chain: undefined as never,
  connectionId: 'test',
  sdk: {} as any,
  event: {} as any,
  context: {} as any,
  interceptorContext: {
    logger: {
      info: jest.fn(),
    },
  },
} satisfies Omit<TypescriptTwoChainedRequestInput, 'input'>;

describe('TypescriptTwo', () => {

  it('should not throw', async () => {
    // TODO: Update the test as appropriate when you implement your handler
    await typescriptTwo({
      ...requestArguments,
      // TODO: remove the "as any" below and fill in test values for the input
      input: {} as any,
    });
  });

});"
`;
