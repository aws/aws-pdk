/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
import * as path from "path";
import { Language, Library } from "../../languages";

/**
 * Enum for generator directories for non-runtime generators
 */
export enum OtherGenerators {
  DOCS = "docs",
  TYPESCRIPT_CDK_INFRASTRUCTURE = "typescript-cdk-infrastructure",
  PYTHON_CDK_INFRASTRUCTURE = "python-cdk-infrastructure",
  JAVA_CDK_INFRASTRUCTURE = "java-cdk-infrastructure",
}

/**
 * Generator directory for openapi generation containing templates, config etc.
 */
export type GeneratorDirectory = Language | Library | OtherGenerators;

/**
 * Types of normalizers supported by openapi-generator
 * @see https://openapi-generator.tech/docs/customization/#openapi-normalizer
 */
export type OpenApiNormalizer = "KEEP_ONLY_FIRST_TAG_IN_OPERATION";

/**
 * Options for generating code or docs using OpenAPI Generator CLI
 */
export interface GenerationOptions {
  /**
   * The OpenAPI generator to use to generate the code/docs
   */
  readonly generator: string;
  /**
   * The directory to use for OpenAPI generation
   */
  readonly generatorDirectory: GeneratorDirectory;
  /**
   * The path of the OpenAPI spec to generate code from
   */
  readonly specPath: string;
  /**
   * The directory in which the generated code should be output
   */
  readonly outputPath: string;
  /**
   * Additional properties to pass to the generate cli
   */
  readonly additionalProperties?: {
    [key: string]: string;
  };
  /**
   * Supply the relative path from the code project root to the source code directory in which custom generated files
   * (eg. operation config) should be placed.
   */
  readonly srcDir?: string;
  /**
   * Normalizers to apply to the spec prior to generation, if any
   * @see https://openapi-generator.tech/docs/customization/#openapi-normalizer
   */
  readonly normalizers?: Partial<Record<OpenApiNormalizer, boolean>>;
  /**
   * Vendor extensions to add for code generation, allowing custom properties to be passed to the generator templates
   * Keys should begin with "x-"
   */
  readonly extraVendorExtensions?: Record<string, string>;
  /**
   * Generate alias as model.
   * Defines whether "primitive types" defined at the model/schema level will be wrapped in a model (ie maps/lists)
   * @see https://openapi-generator.tech/docs/globals/
   * @default true
   */
  readonly generateAliasAsModel?: boolean;
}

const serializeProperties = (properties: { [key: string]: string }) =>
  Object.entries(properties)
    .map(([key, value]) => `${key}=${value}`)
    .join(",");

export interface CommandDetails {
  readonly command: string;
  readonly workingDir: string;
}

/**
 * Generate code or docs by invoking the root generate script
 */
export const buildInvokeOpenApiGeneratorCommand = (
  options: GenerationOptions
): CommandDetails => {
  const srcDir = options.srcDir ?? "src";
  const additionalProperties = options.additionalProperties
    ? ` --additional-properties "${serializeProperties(
        options.additionalProperties
      )}"`
    : "";

  const normalizers = options.normalizers
    ? ` --openapi-normalizer "${serializeProperties(
        Object.fromEntries(
          Object.entries(options.normalizers).map(([k, v]) => [k, `${v}`])
        )
      )}"`
    : "";

  const extensions = options.extraVendorExtensions
    ? ` --extra-vendor-extensions '${JSON.stringify(
        options.extraVendorExtensions
      )}'`
    : "";

  const generateAliasAsModel =
    options.generateAliasAsModel ?? true ? " --generate-alias-as-model" : "";

  const workingDir = path.resolve(
    __dirname,
    "..",
    "..",
    "..",
    "..",
    "scripts",
    "generators"
  );
  const specPath = path.relative(
    workingDir,
    path.join(options.outputPath, options.specPath)
  );
  const outputPath = path.relative(workingDir, options.outputPath);

  return {
    command: `./generate --generator ${options.generator} --spec-path ${specPath} --output-path ${outputPath} --generator-dir ${options.generatorDirectory} --src-dir ${srcDir}${additionalProperties}${normalizers}${extensions}${generateAliasAsModel}`,
    workingDir,
  };
};

/**
 * Builds a command to clean up files which were previously generated by openapi generator
 */
export const buildCleanOpenApiGeneratedCodeCommand = (
  outdir: string
): CommandDetails => {
  const workingDir = path.resolve(
    __dirname,
    "..",
    "..",
    "..",
    "..",
    "scripts",
    "custom",
    "clean-openapi-generated-code"
  );
  const codePath = path.relative(workingDir, outdir);

  return {
    command: `./clean-openapi-generated-code --code-path ${codePath}`,
    workingDir,
  };
};

/**
 * Options for generating documentation via a custom generator script
 */
export interface CustomDocsGenerationOptions {
  /**
   * Name of the generator script which exists in scripts/custom/docs
   */
  readonly generator: string;
  /**
   * The path of the OpenAPI spec to generate docs for
   */
  readonly specPath: string;
  /**
   * The directory in which the generated code should be output
   */
  readonly outputPath: string;
}

/**
 * Invoke a custom documentation generator script
 */
export const buildInvokeCustomDocsGeneratorCommand = (
  options: CustomDocsGenerationOptions
): CommandDetails => {
  const workingDir = path.resolve(
    __dirname,
    "..",
    "..",
    "..",
    "..",
    "scripts",
    "custom",
    "docs"
  );
  const specPath = path.relative(
    workingDir,
    path.join(options.outputPath, options.specPath)
  );
  const outputPath = path.relative(workingDir, options.outputPath);

  return {
    command: `./${options.generator} --spec-path ${specPath} --output-path ${outputPath}`,
    workingDir,
  };
};
