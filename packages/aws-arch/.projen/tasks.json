{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "clean": {
      "name": "clean",
      "steps": [
        {
          "exec": "rm -rf assets src/generated"
        }
      ]
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files"
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API docs from .jsii manifest",
      "steps": [
        {
          "exec": "mkdir -p docs/api/typescript && jsii-docgen -r=false -o docs/api/typescript/index.md && sed -i'' -e 's/@aws\\//@aws\\/pdk\\//g' docs/api/typescript/index.md"
        },
        {
          "exec": "mkdir -p docs/api/python && jsii-docgen -l python -r=false -o docs/api/python/index.md && sed -i'' -e 's/aws.pdk/aws.pdk.aws_arch/g' docs/api/python/index.md"
        },
        {
          "exec": "mkdir -p docs/api/java && jsii-docgen -l java -r=false -o docs/api/java/index.md && sed -i'' -e 's/software.aws.pdk/software.aws.pdk.aws_arch/g' docs/api/java/index.md"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx ${CI:-'--fix'} --no-error-on-unmatched-pattern src test",
          "receiveArgs": true
        }
      ]
    },
    "eslint-staged": {
      "name": "eslint-staged",
      "description": "Run eslint against the staged files only",
      "steps": [
        {
          "exec": "eslint --fix --no-error-on-unmatched-pattern $(git diff --name-only --relative --staged HEAD . | grep -E '.(ts|tsx)$' | grep -v 'samples/*' | xargs)"
        }
      ]
    },
    "fetch-pricing-manifest": {
      "name": "fetch-pricing-manifest",
      "steps": [
        {
          "exec": "ts-node ./scripts/aws-arch/fetch-pricing-manifest.ts"
        }
      ]
    },
    "generate": {
      "name": "generate",
      "steps": [
        {
          "spawn": "clean"
        },
        {
          "spawn": "generate:assets"
        },
        {
          "spawn": "generate:cfnspec-types"
        },
        {
          "spawn": "generate:drawio-spec"
        },
        {
          "spawn": "generate:pricing-manifest"
        },
        {
          "spawn": "generate:mappings"
        }
      ]
    },
    "generate:assets": {
      "name": "generate:assets",
      "steps": [
        {
          "exec": "ts-node ./scripts/aws-arch/generate-assets.ts"
        }
      ]
    },
    "generate:cfnspec-types": {
      "name": "generate:cfnspec-types",
      "steps": [
        {
          "exec": "ts-node ./scripts/aws-arch/generate-cfnspec-types.ts"
        }
      ]
    },
    "generate:drawio-spec": {
      "name": "generate:drawio-spec",
      "steps": [
        {
          "exec": "ts-node ./scripts/aws-arch/generate-drawio-spec.ts"
        }
      ]
    },
    "generate:mappings": {
      "name": "generate:mappings",
      "steps": [
        {
          "exec": "ts-node ./scripts/aws-arch/generate-mappings.ts"
        }
      ]
    },
    "generate:pricing-manifest": {
      "name": "generate:pricing-manifest",
      "steps": [
        {
          "exec": "ts-node ./scripts/aws-arch/generate-pricing-manifest.ts"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "jest": {
      "name": "jest",
      "steps": [
        {
          "exec": "jest --passWithNoTests ${CI:-'--updateSnapshot'} ${NX_WORKSPACE_ROOT:+'--runInBand'}",
          "receiveArgs": true
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "spawn": "eslint"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages"
    },
    "package:java": {
      "name": "package:java",
      "description": "Create java language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target java --pack-command='pnpm pack'"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python --pack-command='pnpm pack'"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "exec": "rm -f tsconfig.json"
        },
        {
          "spawn": "docgen"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "exec": "rm -f tsconfig.json"
        },
        {
          "exec": "pnpm nx run generate"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "jest"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")",
    "JSII_SUPPRESS_UPGRADE_PROMPT": "true"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"pnpm exec projen\"."
}
