// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Java Infra Generation Script Unit Tests Generates 1`] = `
Object {
  "infra/src/main/java/test/test-infra/infra/Api.java": "package test.test-infra.infra;

import com.fasterxml.jackson.databind.ObjectMapper;
import software.aws.awsprototypingsdk.typesafeapi.MethodAndPath;
import software.aws.awsprototypingsdk.typesafeapi.TypeSafeRestApi;
import software.aws.awsprototypingsdk.typesafeapi.TypeSafeRestApiProps;
import software.constructs.Construct;
import test.test-client.runtime.api.OperationLookup;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Type-safe construct for the API Gateway resources defined by your model.
 * This construct is generated and should not be modified.
 */
public class Api extends TypeSafeRestApi {
    private static class SpecDetails {
        static String specPath;

        static {
            try {
                // The parsed spec is included as a packaged resource
                URL specUrl = SpecDetails.class.getClassLoader().getResource(\\".api.json\\");

                // We'll write the parsed spec to a temporary file outside of the jar to ensure CDK can package it as an asset
                Path parsedSpecPath = Files.createTempFile(\\"type-safe-api\\", \\".json\\");
                specPath = parsedSpecPath.toString();

                ObjectMapper json = new ObjectMapper();
                Object spec = json.readValue(specUrl, Object.class);
                json.writeValue(parsedSpecPath.toFile(), spec);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public Api(Construct scope, String id, ApiProps props) {
        super(scope, id, TypeSafeRestApiProps.builder()
                .defaultAuthorizer(props.getDefaultAuthorizer())
                .corsOptions(props.getCorsOptions())
                .operationLookup(OperationLookup.getOperationLookup()
                        .entrySet()
                        .stream()
                        .collect(Collectors.toMap(Map.Entry::getKey, e -> MethodAndPath.builder()
                                .method(e.getValue().get(\\"method\\"))
                                .path(e.getValue().get(\\"path\\"))
                                .build())))
                .specPath(SpecDetails.specPath)
                .integrations(props.getIntegrations().asMap())
                // Rest API Base Props
                .cloudWatchRole(props.getCloudWatchRole())
                .deploy(props.getDeploy())
                .deployOptions(props.getDeployOptions())
                .description(props.getDescription())
                .disableExecuteApiEndpoint(props.getDisableExecuteApiEndpoint())
                .domainName(props.getDomainName())
                .endpointExportName(props.getEndpointExportName())
                .endpointTypes(props.getEndpointTypes())
                .failOnWarnings(props.getFailOnWarnings())
                .parameters(props.getParameters())
                .policy(props.getPolicy())
                .restApiName(props.getRestApiName())
                .retainDeployments(props.getRetainDeployments())
                .build());
    }
}
",
  "infra/src/main/java/test/test-infra/infra/ApiProps.java": "package test.test-infra.infra;

import software.amazon.awscdk.services.apigateway.CorsOptions;
import software.amazon.awscdk.services.apigateway.StageOptions;
import software.amazon.awscdk.services.apigateway.RestApiBaseProps;
import software.amazon.awscdk.services.apigateway.DomainNameOptions;
import software.amazon.awscdk.services.apigateway.EndpointType;
import software.amazon.awscdk.services.iam.PolicyDocument;
import software.aws.awsprototypingsdk.typesafeapi.Authorizer;
import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiIntegration;

import test.test-client.runtime.api.OperationConfig;

import java.util.List;
import java.util.Map;

/**
 * Properties for the Api construct
 */
@lombok.Builder @lombok.Getter
public class ApiProps implements RestApiBaseProps {
    public OperationConfig<TypeSafeApiIntegration> integrations;
    public Authorizer defaultAuthorizer;
    public CorsOptions corsOptions;

    // Rest API Props
    public Boolean cloudWatchRole;
    public Boolean deploy;
    public StageOptions deployOptions;
    public String description;
    public Boolean disableExecuteApiEndpoint;
    public DomainNameOptions domainName;
    public String endpointExportName;
    public List<EndpointType> endpointTypes;
    public Boolean failOnWarnings;
    public Map<String, String> parameters;
    public PolicyDocument policy;
    public String restApiName;
    public Boolean retainDeployments;
}
",
  "infra/src/main/resources/.api.json": "openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  /path/{pathParam}:
    post:
      operationId: operationOne
      parameters:
        - in: query
          name: param1
          schema:
            type: string
          required: true
        - in: query
          name: param2
          schema:
            type: array
            items:
              type: string
          required: true
        - in: query
          name: param3
          schema:
            type: number
          required: true
        - in: query
          name: param4
          schema:
            type: string
          required: false
        - in: path
          name: pathParam
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRequest'
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TestResponse'
        '400':
          description: Error response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApiError'
  /without-operation-id:
    delete:
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TestResponse'
  /empty-response:
    put:
      operationId: empty
      responses:
        204:
          description: No response body!
  /any-request-response:
    put:
      operationId: anyRequestResponse
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        200:
          description: Any response
          content:
            'application/json':
              schema: {}
  /different-media-type:
    post:
      operationId: mediaTypes
      requestBody:
        required: true
        content:
          application/pdf:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Success
          content:
            application/x-mpegurl:
              schema:
                type: string
components:
  schemas:
    ApiError:
      type: object
      properties:
        errorMessage:
          type: string
      required:
        - errorMessage
    TestRequest:
      type: object
      properties:
        myInput:
          type: number
    TestResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              id:
                type: integer
            required:
              - id
      required:
        - messages
",
}
`;
