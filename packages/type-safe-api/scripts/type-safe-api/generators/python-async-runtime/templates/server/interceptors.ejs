###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors",
  "name": "try_catch",
  "ext": ".py",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###from <%- metadata.moduleName %>.api.operation_config import ApiResponse, ChainedApiRequest
from <%- metadata.moduleName %>.response import Response


def try_catch_interceptor(request: ChainedApiRequest) -> ApiResponse:
    """
    Interceptor for catching unhandled exceptions and returning a 500 error.
    Uncaught exceptions which are ApiResponses will be returned, such that deeply nested code may return error
    responses, eg: `throw Response.not_found(...)`
    """
    try:
        return request.chain.next(request)
    except ApiResponse as response:
        # If the error is a response, return it as the response
        return response
    except Exception as e:
        if request.interceptor_context.get("logger") is not None:
            request.interceptor_context.get("logger").exception("Interceptor caught exception")
        else:
            print("Interceptor caught exception")
            print(e)

        return Response.internal_failure({ "message": "Internal Error" })
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors",
  "name": "response_headers",
  "ext": ".py",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###from <%- metadata.moduleName %>.api.operation_config import ApiResponse, ChainedApiRequest
from typing import Dict

CORS_HEADERS = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "*",
}

def build_response_headers_interceptor(headers: Dict[str, str]):
    """
    Build an interceptor for adding headers to the response.
    """
    def response_headers_interceptor(request: ChainedApiRequest) -> ApiResponse:
        result = request.chain.next(request)
        result.headers = { **headers, **(result.headers or {}) }
        return result

    # Any error responses returned during request validation will include the headers
    response_headers_interceptor.__type_safe_api_response_headers = headers

    return response_headers_interceptor

# Cors interceptor allows all origins and headers. Use build_response_headers_interceptors to customise
cors_interceptor = build_response_headers_interceptor(CORS_HEADERS)

###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors/powertools",
  "name": "logger",
  "ext": ".py",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###from aws_lambda_powertools import Logger
from aws_lambda_powertools.logging.logger import _is_cold_start
from <%- metadata.moduleName %>.api.operation_config import ApiResponse, ChainedApiRequest

logger = Logger()

class LoggingInterceptor:

    def intercept(self, request: ChainedApiRequest) -> ApiResponse:
        """
        An interceptor for adding an aws powertools logger to the interceptor context
        See: https://docs.powertools.aws.dev/lambda/python/latest/core/logger/
        """
        request.interceptor_context["logger"] = logger

        # Add the operation id, lambda context and cold start
        logger.append_keys(
            operationId=request.interceptor_context["operationId"],
            **request.context.__dict__,
            cold_start=_is_cold_start()
        )
        response = request.chain.next(request)
        logger.remove_keys(["operationId"])

        return response

    @staticmethod
    def get_logger(request: ChainedApiRequest) -> Logger:
        if request.interceptor_context.get("logger") is None:
            raise Exception("No logger found. Did you configure the LoggingInterceptor?")
        return request.interceptor_context["logger"]
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors/powertools",
  "name": "tracer",
  "ext": ".py",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###from aws_lambda_powertools import Tracer
from <%- metadata.moduleName %>.api.operation_config import ApiResponse, ChainedApiRequest

tracer = Tracer()
is_cold_start = True

class TracingInterceptor:
    def __init__(self, add_response_as_metadata: bool = False):
        self._add_response_as_metadata = add_response_as_metadata

    def intercept(self, request: ChainedApiRequest) -> ApiResponse:
        """
        An interceptor for adding an aws powertools tracer to the interceptor context
        See: https://docs.powertools.aws.dev/lambda/python/latest/core/tracer/
        """
        request.interceptor_context["tracer"] = tracer

        operation_id = request.interceptor_context["operationId"]

        with tracer.provider.in_subsegment(name=f"## {operation_id}") as subsegment:
            try:
                result = request.chain.next(request)
                tracer._add_response_as_metadata(
                    method_name=operation_id,
                    data=result,
                    subsegment=subsegment,
                    capture_response=self._add_response_as_metadata
                )
                return result
            except Exception as e:
                tracer._add_full_exception_as_metadata(
                    method_name=operation_id,
                    error=e,
                    subsegment=subsegment,
                    capture_error=True
                )
                raise
            finally:
                global is_cold_start
                subsegment.put_annotation(key="ColdStart", value=is_cold_start)
                is_cold_start = False

    @staticmethod
    def get_tracer(request: ChainedApiRequest) -> Tracer:
        """
        Retrieve the metrics logger from the request
        """
        if request.interceptor_context.get("tracer") is None:
            raise Exception("No tracer found. Did you configure the TracingInterceptor?")
        return request.interceptor_context["tracer"]
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors/powertools",
  "name": "metrics",
  "ext": ".py",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###from aws_lambda_powertools import Metrics
from <%- metadata.moduleName %>.api.operation_config import ApiResponse, ChainedApiRequest

metrics = Metrics()

class MetricsInterceptor:

    def intercept(self, request: ChainedApiRequest) -> ApiResponse:
        """
        An interceptor for adding an aws powertools metrics instance to the interceptor context
        See: https://docs.powertools.aws.dev/lambda/python/latest/core/metrics/
        """
        operation_id = request.interceptor_context["operationId"]

        # Set the namespace if not set via environment variables
        if metrics.namespace is None:
            metrics.namespace = operation_id

        request.interceptor_context["metrics"] = metrics

        try:
            metrics.add_dimension(name="operationId", value=operation_id)
            return request.chain.next(request)
        finally:
            metrics.flush_metrics()

    @staticmethod
    def get_metrics(request: ChainedApiRequest) -> Metrics:
        """
        Retrieve the metrics logger from the request
        """
        if request.interceptor_context.get("metrics") is None:
            raise Exception("No metrics found. Did you configure the MetricsInterceptor?")
        return request.interceptor_context["metrics"]
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/interceptors",
  "name": "__init__",
  "ext": ".py",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###from <%- metadata.moduleName %>.interceptors.response_headers import cors_interceptor
from <%- metadata.moduleName %>.interceptors.try_catch import try_catch_interceptor
from <%- metadata.moduleName %>.interceptors.powertools.logger import LoggingInterceptor
from <%- metadata.moduleName %>.interceptors.powertools.tracer import TracingInterceptor
from <%- metadata.moduleName %>.interceptors.powertools.metrics import MetricsInterceptor

# All default interceptors, for logging, tracing, metrics, cors headers and error handling
INTERCEPTORS = [
    cors_interceptor,
    LoggingInterceptor().intercept,
    try_catch_interceptor,
    TracingInterceptor().intercept,
    MetricsInterceptor().intercept,
]
