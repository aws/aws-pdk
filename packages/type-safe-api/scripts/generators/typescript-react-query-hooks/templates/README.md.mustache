# TypeScript React Query Hooks

This project contains [react-query](https://tanstack.com/query/latest) hooks for interacting with your API.

## Usage

First, make sure you create an instance of the API client (making sure to set the base URL and fetch instance). For example:

```ts
export const use{{#apiInfo}}{{#apis.0}}{{classname}}{{/apis.0}}{{/apiInfo}}Client = () => useMemo(() => new {{#apiInfo}}{{#apis.0}}{{classname}}{{/apis.0}}{{/apiInfo}}(new Configuration({
    basePath: 'https://example123.execute-api.ap-southeast-2.amazonaws.com/prod',
    fetchApi: window.fetch.bind(window),
})), []);
```

Note that if you are using the [Cloudscape React Website](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/cloudscape-react-ts-website) with [AWS NorthStar](https://aws.github.io/aws-northstar/) and IAM (Sigv4) Auth for your API, you can use NorthStar's [`useSigv4Client()` hook](https://aws.github.io/aws-northstar/?path=/story/components-cognitoauth-sigv4client-docs--page) to create
an instance of `fetch` which will sign requests with the logged in user's credentials. For example:

```ts
export const use{{#apiInfo}}{{#apis.0}}{{classname}}{{/apis.0}}{{/apiInfo}}Client = () => {
    const client = useSigv4Client();
    return useMemo(() => client ? new {{#apiInfo}}{{#apis.0}}{{classname}}{{/apis.0}}{{/apiInfo}}(new Configuration({
        basePath: 'https://example123.execute-api.ap-southeast-2.amazonaws.com/prod',
        fetchApi: client,
    })) : undefined, [client]);
};
```

Next, instantiate the client provider above where you would like to use the hooks in your component hierarchy (such as above your router). For example:

```tsx
const api = use{{#apiInfo}}{{#apis.0}}{{classname}}{{/apis.0}}{{/apiInfo}}Client();

return (
    <{{#apiInfo}}{{#apis.0}}{{classname}}{{/apis.0}}{{/apiInfo}}ClientProvider apiClient={api}>
        { /* Components within the provider may make use of the hooks */ }
    </{{#apiInfo}}{{#apis.0}}{{classname}}{{/apis.0}}{{/apiInfo}}ClientProvider>
);
```

Finally, you can import and use your generated hooks. For example:

```tsx
export const MyComponent: FC<MyComponentProps> = () => {
    const sayHello = useSayHello({ name: 'World' });

    return (
        sayHello.isLoading ? (
            <p>Loading...</p>
        ) : (
            sayHello.isError ? (
                <p>Error!</p>
            ) : (
                <h1>{sayHello.data.message}</h1>
            )
        )
    );
};
```

## Custom Error Type

If you use middleware in your client for error handling and throw different errors, you can override the error type
when you use a hook, for example:

```ts
const sayHello = useSayHello<MyCustomError>({ name: 'World' });
```
