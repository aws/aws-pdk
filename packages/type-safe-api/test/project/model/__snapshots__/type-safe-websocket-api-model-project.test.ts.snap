// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type Safe Api Model Project Unit Tests OpenAPI 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "AWS_PDK_VERSION": "0.0.0",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Note that since this defines an asynchronous API, this is not strictly an OpenAPI specification, rather the same syntax can be used if you are familiar with OpenAPI.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://aws.github.io/aws-pdk/developer_guides/type-safe-api/index.html)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. The path will be used as the "route" for the asynchronous operation. The method _must_ be \`post\`. \`parameters\` are not supported, and likewise responses are not supported

\`\`\`yaml
paths:
  /SendNotification:
    post:
      x-async:
        direction: server_to_client
      x-handler:
        language: typescript
      operationId: sendNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendNotificationRequest'
      responses: {}
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    SendNotificationRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sendNotification.yaml
    |_ schemas/
        |_ index.yaml
        |_ sendNotificationRequest.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/SendNotification:
  post:
    $ref: './sendNotification.yaml'
\`\`\`

\`paths/sendNotification.yaml\`:

\`\`\`yaml
operationId: sendNotification
requestBody:
  content:
    application/json:
      schema:
        $ref: '../schemas/sendNotificationRequest.yaml'
responses: {}
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
SendNotificationRequest:
  $ref: './sendNotificationRequest.yaml'
\`\`\`

\`schemas/sendNotificationRequest.yaml\`:

\`\`\`yaml
type: object
properties:
  someParameter:
    type: string
  anotherParameter:
    type: double
required:
  - someParameter
\`\`\`
",
  "src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /SubscribeToNotifications:
    post:
      operationId: subscribeToNotifications
      x-async:
        direction: client_to_server
        collection: notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeToNotificationsRequestContent'
      responses:
        200:
          description: Successful response
  /SendNotification:
    post:
      operationId: sendNotification
      x-async:
        direction: server_to_client
        collection: notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendNotificationRequestContent'
      responses:
        200:
          description: Successful response
components:
  schemas:
    SubscribeToNotificationsRequestContent:
      type: object
      properties:
        topic:
          type: string
      required:
        - topic
    SendNotificationRequestContent:
      type: object
      properties:
        topic:
          type: string
        title:
          type: string
        message:
          type: string
      required:
        - topic
        - title
        - message
",
}
`;

exports[`Type Safe Api Model Project Unit Tests OpenAPI With Handlers 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "AWS_PDK_VERSION": "0.0.0",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Note that since this defines an asynchronous API, this is not strictly an OpenAPI specification, rather the same syntax can be used if you are familiar with OpenAPI.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://aws.github.io/aws-pdk/developer_guides/type-safe-api/index.html)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. The path will be used as the "route" for the asynchronous operation. The method _must_ be \`post\`. \`parameters\` are not supported, and likewise responses are not supported

\`\`\`yaml
paths:
  /SendNotification:
    post:
      x-async:
        direction: server_to_client
      x-handler:
        language: typescript
      operationId: sendNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendNotificationRequest'
      responses: {}
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    SendNotificationRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sendNotification.yaml
    |_ schemas/
        |_ index.yaml
        |_ sendNotificationRequest.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/SendNotification:
  post:
    $ref: './sendNotification.yaml'
\`\`\`

\`paths/sendNotification.yaml\`:

\`\`\`yaml
operationId: sendNotification
requestBody:
  content:
    application/json:
      schema:
        $ref: '../schemas/sendNotificationRequest.yaml'
responses: {}
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
SendNotificationRequest:
  $ref: './sendNotificationRequest.yaml'
\`\`\`

\`schemas/sendNotificationRequest.yaml\`:

\`\`\`yaml
type: object
properties:
  someParameter:
    type: string
  anotherParameter:
    type: double
required:
  - someParameter
\`\`\`
",
  "src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /SubscribeToNotifications:
    post:
      operationId: subscribeToNotifications
      x-handler:
        language: java
      x-async:
        direction: client_to_server
        collection: notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeToNotificationsRequestContent'
      responses:
        200:
          description: Successful response
  /SendNotification:
    post:
      operationId: sendNotification
      x-handler:
        language: java
      x-async:
        direction: server_to_client
        collection: notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendNotificationRequestContent'
      responses:
        200:
          description: Successful response
components:
  schemas:
    SubscribeToNotificationsRequestContent:
      type: object
      properties:
        topic:
          type: string
      required:
        - topic
    SendNotificationRequestContent:
      type: object
      properties:
        topic:
          type: string
        title:
          type: string
        message:
          type: string
      required:
        - topic
        - title
        - message
",
}
`;

exports[`Type Safe Api Model Project Unit Tests Smithy 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
!/generated/main/smithy/aws-pdk/async.smithy
.smithy-async
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/async.smithy",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "AWS_PDK_VERSION": "0.0.0",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.copy-async-smithy-transformer",
          },
          {
            "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.parse-openapi-spec --spec-path build/smithyprojections/smithy-async-model/openapi/openapi/MyService.openapi.json --output-path .api.json --smithy-json-path build/smithyprojections/smithy-async-model/openapi/model/model.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://aws.github.io/aws-pdk/developer_guides/type-safe-api/index.html)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@async\` trait, which defines the \`direction\` of an operation (either \`server_to_client\`, \`client_to_server\` or \`bidirectional\`). Each operation must have an \`input\`, and \`output\` and \`errors\` are not supported. You can define the \`input\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@async(direction: "server_to_client")
operation SendNotification {
    input := {
        @required
        message: String

        /// This parameter is optional
        anotherParameter: Foo
    }
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@websocketJson
service MyApi {
    version: "1.0"
    operations: [
        SendNotification // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeWebSocketApiProject\` \`model.options.smithy.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
    implementation files(".smithy-async/aws-pdk-smithy-async-transformer.jar")
}
",
  "generated/main/smithy/aws-pdk/async.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [

    {
        id: "MissingAsyncTrait"
        name: "EmitEachSelector"
        message: "Operation is missing @async trait"
        configuration: {
            selector: """
                operation :not([trait|com.test#async])
            """
        }
    }

    {
        id: "MissingWebSocketProtocolTrait"
        name: "EmitEachSelector"
        message: "Service is missing @websocketJson trait"
        configuration: {
            selector: """
                service :not([trait|com.test#websocketJson])
            """
        }
    }

    {
        id: "OperationMayNotHaveOutput"
        name: "EmitEachSelector"
        message: "Async operations must have no output"
        configuration: {
            selector: """
                operation -[output]->
            """
        }
    }

    {
        id: "OperationMustHaveInput"
        name: "EmitEachSelector"
        message: "Async operations must define an input"
        configuration: {
            selector: """
                operation :not(-[input]->)
            """
        }
    }

    {
        id: "HandlerTraitNotPermittedForServerToClient"
        name: "EmitEachSelector"
        message: "The @handler trait cannot be applied to an @async operation with direction server_to_client"
        configuration: {
            selector: """
              operation
              [@trait|com.test#async: @{direction} = server_to_client]
              [trait|com.test#handler]
            """
        }
    }

    
    {
      id: "SupportedLanguage_connectHandler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#connectHandler
          selector: """
              :not([@trait|com.test#connectHandler: @{language} = typescript, java, python])
          """
          messageTemplate: """
              @{trait|com.test#connectHandler|language} is not supported by type-safe-api.
              Supported languages are "typescript", "java" and "python".
          """
      }
    }
    {
      id: "TraitNotPermitted_connectHandler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#connectHandler
          selector: """
              *
          """
          messageTemplate: """
              @@connectHandler trait cannot be used unless handler project languages have been configured.
              You can add handler projects by configuring TypeSafeApiProject in your .projenrc
          """
      }
  }
    
    {
      id: "SupportedLanguage_disconnectHandler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#disconnectHandler
          selector: """
              :not([@trait|com.test#disconnectHandler: @{language} = typescript, java, python])
          """
          messageTemplate: """
              @{trait|com.test#disconnectHandler|language} is not supported by type-safe-api.
              Supported languages are "typescript", "java" and "python".
          """
      }
    }
    {
      id: "TraitNotPermitted_disconnectHandler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#disconnectHandler
          selector: """
              *
          """
          messageTemplate: """
              @@disconnectHandler trait cannot be used unless handler project languages have been configured.
              You can add handler projects by configuring TypeSafeApiProject in your .projenrc
          """
      }
  }
]

namespace com.test

/// Add this trait to an asynchronous service
@trait(selector: "service")
structure websocketJson {}

enum AsyncDirection {
    CLIENT_TO_SERVER = "client_to_server"
    SERVER_TO_CLIENT = "server_to_client"
    BIDIRECTIONAL = "bidirectional"
}

/// Add this trait to all asynchronous operations
@trait(selector: "operation")
structure async {
    /// The direction this operation will be used in, used to inform the generated client and server sdks.
    @required
    direction: AsyncDirection
}

@trait(selector: "service")
structure connectHandler {
  @required
  language: String
}

@trait(selector: "service")
structure disconnectHandler {
  @required
  language: String
}

",
  "generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    
    {
      id: "SupportedLanguage_handler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#handler
          selector: """
              :not([@trait|com.test#handler: @{language} = typescript, java, python])
          """
          messageTemplate: """
              @{trait|com.test#handler|language} is not supported by type-safe-api.
              Supported languages are "typescript", "java" and "python".
          """
      }
    }
    {
      id: "TraitNotPermitted_handler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#handler
          selector: """
              *
          """
          messageTemplate: """
              @@handler trait cannot be used unless handler project languages have been configured.
              You can add handler projects by configuring TypeSafeApiProject in your .projenrc
          """
      }
  }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-async-model'
",
  "smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
            "useIntegerType": true,
          },
        },
        "transforms": [
          {
            "args": {},
            "name": "aws-pdk-async-transformer",
          },
        ],
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "src/main/smithy/main.smithy": "$version: "2"
namespace com.test

/// A sample smithy websocket api
@websocketJson
service MyService {
    version: "1.0"
    operations: [
      SubscribeToNotifications
      SendNotification
    ]
}",
  "src/main/smithy/operations/send-notification.smithy": "$version: "2"
namespace com.test


@async(direction: "server_to_client")
operation SendNotification {
    input := {
        @required
        topic: String

        @required
        title: String

        @required
        message: String
    }
}
",
  "src/main/smithy/operations/subscribe-to-notifications.smithy": "$version: "2"
namespace com.test


@async(direction: "client_to_server")
operation SubscribeToNotifications {
    input := {
        @required
        topic: String
    }
}
",
}
`;

exports[`Type Safe Api Model Project Unit Tests Smithy With Handlers 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
!/generated/main/smithy/aws-pdk/async.smithy
.smithy-async
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/async.smithy",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "AWS_PDK_VERSION": "0.0.0",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.copy-async-smithy-transformer",
          },
          {
            "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws/pdk@$AWS_PDK_VERSION type-safe-api.parse-openapi-spec --spec-path build/smithyprojections/smithy-async-handlers/openapi/openapi/MyService.openapi.json --output-path .api.json --smithy-json-path build/smithyprojections/smithy-async-handlers/openapi/model/model.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://aws.github.io/aws-pdk/developer_guides/type-safe-api/index.html)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@async\` trait, which defines the \`direction\` of an operation (either \`server_to_client\`, \`client_to_server\` or \`bidirectional\`). Each operation must have an \`input\`, and \`output\` and \`errors\` are not supported. You can define the \`input\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@async(direction: "server_to_client")
operation SendNotification {
    input := {
        @required
        message: String

        /// This parameter is optional
        anotherParameter: Foo
    }
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@websocketJson
service MyApi {
    version: "1.0"
    operations: [
        SendNotification // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeWebSocketApiProject\` \`model.options.smithy.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
    implementation files(".smithy-async/aws-pdk-smithy-async-transformer.jar")
}
",
  "generated/main/smithy/aws-pdk/async.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [

    {
        id: "MissingAsyncTrait"
        name: "EmitEachSelector"
        message: "Operation is missing @async trait"
        configuration: {
            selector: """
                operation :not([trait|com.test#async])
            """
        }
    }

    {
        id: "MissingWebSocketProtocolTrait"
        name: "EmitEachSelector"
        message: "Service is missing @websocketJson trait"
        configuration: {
            selector: """
                service :not([trait|com.test#websocketJson])
            """
        }
    }

    {
        id: "OperationMayNotHaveOutput"
        name: "EmitEachSelector"
        message: "Async operations must have no output"
        configuration: {
            selector: """
                operation -[output]->
            """
        }
    }

    {
        id: "OperationMustHaveInput"
        name: "EmitEachSelector"
        message: "Async operations must define an input"
        configuration: {
            selector: """
                operation :not(-[input]->)
            """
        }
    }

    {
        id: "HandlerTraitNotPermittedForServerToClient"
        name: "EmitEachSelector"
        message: "The @handler trait cannot be applied to an @async operation with direction server_to_client"
        configuration: {
            selector: """
              operation
              [@trait|com.test#async: @{direction} = server_to_client]
              [trait|com.test#handler]
            """
        }
    }

    
    {
      id: "SupportedLanguage_connectHandler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#connectHandler
          selector: """
              :not([@trait|com.test#connectHandler: @{language} = typescript, java, python])
          """
          messageTemplate: """
              @{trait|com.test#connectHandler|language} is not supported by type-safe-api.
              Supported languages are "typescript", "java" and "python".
          """
      }
    }
    
    {
      id: "ConfiguredHandlerProject_connectHandler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#connectHandler
          selector: """
              [@trait|com.test#connectHandler: @{language} = typescript, java, python]
              :not([@trait|com.test#connectHandler: @{language} = python, typescript])
          """
          messageTemplate: """
              @@handler language @{trait|com.test#connectHandler|language} cannot be referenced unless a handler project is configured for this language.
              Configured handler project languages are: python, typescript.
              You can add this language by configuring TypeSafeApiProject in your .projenrc
          """
      }
    }
    
    {
      id: "SupportedLanguage_disconnectHandler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#disconnectHandler
          selector: """
              :not([@trait|com.test#disconnectHandler: @{language} = typescript, java, python])
          """
          messageTemplate: """
              @{trait|com.test#disconnectHandler|language} is not supported by type-safe-api.
              Supported languages are "typescript", "java" and "python".
          """
      }
    }
    
    {
      id: "ConfiguredHandlerProject_disconnectHandler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#disconnectHandler
          selector: """
              [@trait|com.test#disconnectHandler: @{language} = typescript, java, python]
              :not([@trait|com.test#disconnectHandler: @{language} = python, typescript])
          """
          messageTemplate: """
              @@handler language @{trait|com.test#disconnectHandler|language} cannot be referenced unless a handler project is configured for this language.
              Configured handler project languages are: python, typescript.
              You can add this language by configuring TypeSafeApiProject in your .projenrc
          """
      }
    }
]

namespace com.test

/// Add this trait to an asynchronous service
@trait(selector: "service")
structure websocketJson {}

enum AsyncDirection {
    CLIENT_TO_SERVER = "client_to_server"
    SERVER_TO_CLIENT = "server_to_client"
    BIDIRECTIONAL = "bidirectional"
}

/// Add this trait to all asynchronous operations
@trait(selector: "operation")
structure async {
    /// The direction this operation will be used in, used to inform the generated client and server sdks.
    @required
    direction: AsyncDirection
}

@trait(selector: "service")
structure connectHandler {
  @required
  language: String
}

@trait(selector: "service")
structure disconnectHandler {
  @required
  language: String
}

",
  "generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    
    {
      id: "SupportedLanguage_handler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#handler
          selector: """
              :not([@trait|com.test#handler: @{language} = typescript, java, python])
          """
          messageTemplate: """
              @{trait|com.test#handler|language} is not supported by type-safe-api.
              Supported languages are "typescript", "java" and "python".
          """
      }
    }
    
    {
      id: "ConfiguredHandlerProject_handler"
      name: "EmitEachSelector"
      configuration: {
          bindToTrait: com.test#handler
          selector: """
              [@trait|com.test#handler: @{language} = typescript, java, python]
              :not([@trait|com.test#handler: @{language} = python, typescript])
          """
          messageTemplate: """
              @@handler language @{trait|com.test#handler|language} cannot be referenced unless a handler project is configured for this language.
              Configured handler project languages are: python, typescript.
              You can add this language by configuring TypeSafeApiProject in your .projenrc
          """
      }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have configured handler projects for python, typescript
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-async-handlers'
",
  "smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
            "useIntegerType": true,
          },
        },
        "transforms": [
          {
            "args": {},
            "name": "aws-pdk-async-transformer",
          },
        ],
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "src/main/smithy/main.smithy": "$version: "2"
namespace com.test

/// A sample smithy websocket api
@websocketJson
@connectHandler(language: "python")
@disconnectHandler(language: "python")
service MyService {
    version: "1.0"
    operations: [
      SubscribeToNotifications
      SendNotification
    ]
}",
  "src/main/smithy/operations/send-notification.smithy": "$version: "2"
namespace com.test


@async(direction: "server_to_client")
operation SendNotification {
    input := {
        @required
        topic: String

        @required
        title: String

        @required
        message: String
    }
}
",
  "src/main/smithy/operations/subscribe-to-notifications.smithy": "$version: "2"
namespace com.test


@handler(language: "python")
@async(direction: "client_to_server")
operation SubscribeToNotifications {
    input := {
        @required
        topic: String
    }
}
",
}
`;
