// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Java Infrastructure Code Generation Script Unit Tests Generates With single.yaml 1`] = `
"package test.test-infra.infra;

import com.fasterxml.jackson.databind.ObjectMapper;
import software.aws.awsprototypingsdk.typesafeapi.OperationDetails;
import software.aws.awsprototypingsdk.typesafeapi.TypeSafeRestApi;
import software.aws.awsprototypingsdk.typesafeapi.TypeSafeRestApiProps;
import software.constructs.Construct;
import test.test-client.runtime.api.OperationLookup;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Type-safe construct for the API Gateway resources defined by your model.
 * This construct is generated and should not be modified.
 */
public class Api extends TypeSafeRestApi {
    private static class SpecDetails {
        static String specPath;

        static {
            try {
                // The parsed spec is included as a packaged resource
                URL specUrl = SpecDetails.class.getClassLoader().getResource(".api.json");

                // We'll write the parsed spec to a temporary file outside of the jar to ensure CDK can package it as an asset
                Path parsedSpecPath = Files.createTempFile("type-safe-api", ".json");
                specPath = parsedSpecPath.toString();

                ObjectMapper json = new ObjectMapper();
                Object spec = json.readValue(specUrl, Object.class);
                json.writeValue(parsedSpecPath.toFile(), spec);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public Api(Construct scope, String id, ApiProps props) {
        super(scope, id, TypeSafeRestApiProps.builder()
                .defaultAuthorizer(props.getDefaultAuthorizer())
                .corsOptions(props.getCorsOptions())
                .apiKeyOptions(props.getApiKeyOptions())
                .operationLookup(OperationLookup.getOperationLookup()
                        .entrySet()
                        .stream()
                        .collect(Collectors.toMap(Map.Entry::getKey, e -> OperationDetails.builder()
                                .method(e.getValue().getMethod())
                                .path(e.getValue().getPath())
                                .contentTypes(e.getValue().getContentTypes())
                                .build())))
                .specPath(SpecDetails.specPath)
                .integrations(props.getIntegrations().asMap())
                // Rest API Base Props
                .cloudWatchRole(props.getCloudWatchRole())
                .deploy(props.getDeploy())
                .deployOptions(props.getDeployOptions())
                .description(props.getDescription())
                .disableExecuteApiEndpoint(props.getDisableExecuteApiEndpoint())
                .domainName(props.getDomainName())
                .endpointExportName(props.getEndpointExportName())
                .endpointTypes(props.getEndpointTypes())
                .failOnWarnings(props.getFailOnWarnings())
                .parameters(props.getParameters())
                .policy(props.getPolicy())
                .restApiName(props.getRestApiName())
                .retainDeployments(props.getRetainDeployments())
                .build());
    }
}
"
`;

exports[`Java Infrastructure Code Generation Script Unit Tests Generates With single.yaml 2`] = `
"package test.test-infra.infra;

import software.amazon.awscdk.services.apigateway.CorsOptions;
import software.amazon.awscdk.services.apigateway.StageOptions;
import software.amazon.awscdk.services.apigateway.RestApiBaseProps;
import software.amazon.awscdk.services.apigateway.DomainNameOptions;
import software.amazon.awscdk.services.apigateway.EndpointType;
import software.amazon.awscdk.services.iam.PolicyDocument;
import software.aws.awsprototypingsdk.typesafeapi.ApiKeyOptions;
import software.aws.awsprototypingsdk.typesafeapi.Authorizer;
import software.aws.awsprototypingsdk.typesafeapi.TypeSafeApiIntegration;

import test.test-client.runtime.api.OperationConfig;

import java.util.List;
import java.util.Map;

/**
 * Properties for the Api construct
 */
@lombok.Builder @lombok.Getter
public class ApiProps implements RestApiBaseProps {
    public OperationConfig<TypeSafeApiIntegration> integrations;
    public Authorizer defaultAuthorizer;
    public CorsOptions corsOptions;
    public ApiKeyOptions apiKeyOptions;

    // Rest API Props
    public Boolean cloudWatchRole;
    public Boolean deploy;
    public StageOptions deployOptions;
    public String description;
    public Boolean disableExecuteApiEndpoint;
    public DomainNameOptions domainName;
    public String endpointExportName;
    public List<EndpointType> endpointTypes;
    public Boolean failOnWarnings;
    public Map<String, String> parameters;
    public PolicyDocument policy;
    public String restApiName;
    public Boolean retainDeployments;
}
"
`;

exports[`Java Infrastructure Code Generation Script Unit Tests Generates With single.yaml 3`] = `
"package test.test-infra.infra;

import test.test-client.runtime.JSON;
import test.test-client.runtime.model.*;
import software.aws.awsprototypingsdk.typesafeapi.Integrations;
import software.aws.awsprototypingsdk.typesafeapi.MockIntegration;
import software.aws.awsprototypingsdk.typesafeapi.MockIntegrationResponse;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Paths;
import java.util.stream.Collectors;


/**
 * Type-safe mock integrations for API operations
 */
public class MockIntegrations {
    static {
        // Instantiate json instance so that any .toJson() methods can be used
        new JSON();
    }

    /**
     * Read a mock data file for the given operation
     */
    private static String readMockDataFile(final String method, final String path, final int statusCode) {
        try {
            try (InputStream stream = MockIntegrations.class.getClassLoader()
                    .getResourceAsStream(Paths.get("mocks", method + path.replaceAll("/", "-") + String.format("-%d.json", statusCode)).toString())) {
                try (InputStreamReader inputStreamReader = new InputStreamReader(stream)) {
                    return new BufferedReader(inputStreamReader).lines().collect(Collectors.joining(System.lineSeparator()));
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Mock integration to return a 200 response from the anyRequestResponse operation
     */
    public static MockIntegration anyRequestResponse200(final String body) {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(200)
                .body(body)
                .build());
    }

    /**
     * Mock integration to return a 204 response from the empty operation
     */
    public static MockIntegration empty204() {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(204)
                .build());
    }

    /**
     * Mock integration to return a 200 response from the mapResponse operation
     */
    public static MockIntegration mapResponse200(final MapResponse200Response body) {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(200)
                .body(body.toJson())
                .build());
    }

    /**
     * Mock integration to return a 200 response from the mapResponse operation, with generated mock data
     */
    public static MockIntegration mapResponse200() {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(200)
                .body(MockIntegrations.readMockDataFile("get", "/map-response", 200))
                .build());
    }

    /**
     * Mock integration to return a 200 response from the mediaTypes operation
     */
    public static MockIntegration mediaTypes200(final String body) {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(200)
                .body(body)
                .build());
    }

    /**
     * Mock integration to return a 200 response from the multipleContentTypes operation
     */
    public static MockIntegration multipleContentTypes200(final String body) {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(200)
                .body(body)
                .build());
    }

    /**
     * Mock integration to return a 200 response from the operationOne operation
     */
    public static MockIntegration operationOne200(final TestResponse body) {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(200)
                .body(body.toJson())
                .build());
    }

    /**
     * Mock integration to return a 200 response from the operationOne operation, with generated mock data
     */
    public static MockIntegration operationOne200() {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(200)
                .body(MockIntegrations.readMockDataFile("post", "/path/{pathParam}", 200))
                .build());
    }

    /**
     * Mock integration to return a 400 response from the operationOne operation
     */
    public static MockIntegration operationOne400(final ApiError body) {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(400)
                .body(body.toJson())
                .build());
    }

    /**
     * Mock integration to return a 400 response from the operationOne operation, with generated mock data
     */
    public static MockIntegration operationOne400() {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(400)
                .body(MockIntegrations.readMockDataFile("post", "/path/{pathParam}", 400))
                .build());
    }

    /**
     * Mock integration to return a 200 response from the withoutOperationIdDelete operation
     */
    public static MockIntegration withoutOperationIdDelete200(final TestResponse body) {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(200)
                .body(body.toJson())
                .build());
    }

    /**
     * Mock integration to return a 200 response from the withoutOperationIdDelete operation, with generated mock data
     */
    public static MockIntegration withoutOperationIdDelete200() {
        return Integrations.mock(MockIntegrationResponse.builder()
                .statusCode(200)
                .body(MockIntegrations.readMockDataFile("delete", "/without-operation-id", 200))
                .build());
    }

}
"
`;
