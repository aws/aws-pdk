// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Async Client Code Generation Script Unit Tests Generates With single.yaml 1`] = `
{
  ".tsapi-manifest": "src/client/client.ts
src/index.ts
src/models/index.ts
src/models/model-utils.ts
src/models/ApiError.ts
src/models/MapRequest.ts
src/models/MapRequestMapPropertyValue.ts
src/models/TestRequest.ts
src/models/TestResponse.ts
src/models/TestResponseMessagesInner.ts",
  "src/client/client.ts": "// Import models
import {
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    MapRequest,
    MapRequestFromJSON,
    MapRequestToJSON,
    MapRequestMapPropertyValue,
    MapRequestMapPropertyValueFromJSON,
    MapRequestMapPropertyValueToJSON,
    TestRequest,
    TestRequestFromJSON,
    TestRequestToJSON,
    TestResponse,
    TestResponseFromJSON,
    TestResponseToJSON,
    TestResponseMessagesInner,
    TestResponseMessagesInnerFromJSON,
    TestResponseMessagesInnerToJSON,
} from "../models";
import { AwsCredentialIdentity, AwsCredentialIdentityProvider } from '@aws-sdk/types';
import { HttpRequest } from "@aws-sdk/protocol-http";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { Sha256 } from "@aws-crypto/sha256-js";
import { v4 as uuid } from "uuid";

import WebSocket from "isomorphic-ws";

export interface IamAuthenticationStrategy {
  readonly region: string;
  readonly credentials: AwsCredentialIdentity | AwsCredentialIdentityProvider;
}

export interface NoneAuthenticationStrategy {}

export interface CustomAuthenticationStrategyInput {
  readonly url: string;
}

export interface CustomAuthenticationStrategyOutput {
  readonly url: string;
}

export interface CustomAuthenticationStrategy {
  readonly apply: (input: CustomAuthenticationStrategyInput) => Promise<CustomAuthenticationStrategyOutput>;
}

export type AuthenticationStrategy = { iam: IamAuthenticationStrategy } | { none: NoneAuthenticationStrategy } | { custom: CustomAuthenticationStrategy };

/**
 * Options for the client
 */
export interface DefaultApiWebSocketClientOptions {
  /**
   * Websocket url to connect to (wss://xxxx)
   */
  readonly url: string;

  /**
   * Strategy to authenticate with the API
   * @default AuthenticationStrategy.NONE
   */
  readonly authentication?: AuthenticationStrategy;

  /**
   * Maximum number of times to attempt to reconnect if connecting fails.
   * @default 3
   */
  readonly maxRetries?: number;

  /**
   * After this amount of time has elapsed, reset the number of retries.
   * Ensures that stale connections closed by the browser (or node) are reconnected.
   * @default 10000
   */
  readonly resetRetriesAfterMilliseconds?: number;
}

enum SocketStatus {
  CONNECTED = "CONNECTED",
  DISCONNECTED = "DISCONNECTED",
  CONNECTING = "CONNECTING",
}

interface QueuedMessage {
  readonly message: string;
  readonly resolve: () => void;
  readonly reject: () => void;
}

interface MessageListener {
  readonly id: string;
  readonly listener: (payload: any) => void;
}

interface ReconnectListener {
  readonly id: string;
  readonly listener: () => void;
}

interface AllMessagesListener {
  readonly id: string;
  readonly listener: (route: string, payload?: any) => void;
}

export interface WebSocketError {
  readonly message: string;
}

interface ErrorListener {
  readonly id: string;
  readonly listener: (error: WebSocketError) => void;
}

/**
 * Client for sending messages from clients to the server
 */
export class DefaultApiWebSocketClient {
  /**
   * Create a new WebSocket connection to the server
   */
  public static connect = async (options: DefaultApiWebSocketClientOptions) => {
    const client = new DefaultApiWebSocketClient(options);
    await client.$connect();
    return client;
  };

  private readonly options: DefaultApiWebSocketClientOptions;

  private socket: WebSocket | undefined;
  private status: SocketStatus = SocketStatus.CONNECTING;
  private readonly messageQueue: QueuedMessage[] = [];
  private listeners: { [route: string]: MessageListener[] } = {};
  private allMessageListeners: AllMessagesListener[] = [];
  private reconnectListeners: ReconnectListener[] = [];
  private errorListeners: ErrorListener[] = [];
  private connectionAttempt: number = 0;
  private lastConnected: number = Date.now();

  private constructor(options: DefaultApiWebSocketClientOptions) {
    this.options = options;
  }

  private _signConnectionUrl = async (iam: IamAuthenticationStrategy) => {
    const url = new URL(this.options.url);

    const request = new HttpRequest({
      hostname: url.hostname,
      method: "GET",
      path: url.pathname,
      protocol: url.protocol,
      headers: {
        host: url.hostname,
      },
      query: Object.fromEntries((url.searchParams ?? {}) as any),
    });

    const sigv4 = new SignatureV4({
      credentials: iam.credentials,
      service: "execute-api",
      region: iam.region,
      sha256: Sha256,
    });

    const signedRequest = await sigv4.presign(request);

    Object.keys(signedRequest.query ?? {}).forEach((param) => {
      const value = (signedRequest.query ?? {})[param];
      if (value) {
        url.searchParams.set(param, value as any);
      }
    });

    return url.toString();
  };

  private _sleep = async (ms: number) => {
    return new Promise((resolve) => setTimeout(resolve, ms));
  };

  private _onClose = async (_event: WebSocket.CloseEvent)  => {
    this.socket.onclose = null;
    this.socket.onmessage = null;
    this.socket.onerror = null;

    // After 10 seconds (or configured time), reset the number of retries so stale connections are always refreshed
    if ((Date.now() - this.lastConnected) > (this.options.resetRetriesAfterMilliseconds ?? 10000)) {
      this.connectionAttempt = 0;
    }

    if (this.connectionAttempt >= (this.options.maxRetries ?? 3)) {
      this._onDisconnect();
      const message = "Connection failed after maximum number of retries";
      this.errorListeners.forEach(({ listener }) => listener({ message }));
      throw new Error(message);
    }

    this.connectionAttempt++;

    await this._sleep(2 ** this.connectionAttempt * 10);

    await this._connect();

    this.reconnectListeners.forEach(({ listener }) => listener());
  };

  private _listen = (route: string, listener: (payload: any) => void): () => void => {
    if (!this.listeners[route]) {
      this.listeners[route] = [];
    }

    const listenerId = uuid();
    this.listeners[route].push({
      id: listenerId,
      listener,
    });

    return () => {
      this.listeners[route] = this.listeners[route].filter(({ id }) => id !== listenerId);
    };
  };

  private _onMessage = async (event: WebSocket.MessageEvent) => {
    if (typeof event.data !== "string" || !event.data) {
      return;
    }

    try {
      const data = JSON.parse(event.data);

      if ('message' in data && typeof data.message === "string") {
        this.errorListeners.forEach(({ listener }) => listener({ message: data.message }));
      } else if ('route' in data) {
        (this.listeners[data.route] ?? []).forEach(({ listener }) => listener(data.payload));
        this.allMessageListeners.forEach(({ listener }) => listener(data.route, data.payload));
      } else {
        this.errorListeners.forEach(({ listener }) => listener({ message: \`Unexpected data received \${event.data}\` }));
      }
    } catch (e: any) {
      this.errorListeners.forEach(({ listener }) => listener({ message: \`Failed to parse received data \${event.data}\` }));
    }
  };

  private _onError = async (error: WebSocket.ErrorEvent) => {
    this.errorListeners.forEach(({ listener }) => listener({ message: error.message }));
  };

  private _sendOrQueueMessage = (route: string, payload?: any): Promise<void> => {
    const message = JSON.stringify({ route, payload });
    if (this.status === SocketStatus.CONNECTED) {
      this._send(message);
      return Promise.resolve();
    } else if (this.status === SocketStatus.DISCONNECTED) {
      return Promise.reject(new Error("The socket is not connected. Please call $connect before sending messages"));
    }
    // Status is CONNECTING, queue the message
    return new Promise((resolve, reject) => {
      this.messageQueue.push({ message, resolve, reject });
    });
  };

  private _flushMessageQueue = () => {
    while (this.messageQueue.length > 0) {
      const { message, resolve } = this.messageQueue.shift();
      this._send(message);
      resolve();
    }
  };

  private _rejectMessageQueue = () => {
    while (this.messageQueue.length > 0) {
      const { reject } = this.messageQueue.shift();
      reject();
    }
  };

  private _send = (message: string) => {
    this.socket.send(message);
  };

  private _connect = async (): Promise<void> => {
    this.status = SocketStatus.CONNECTING;
    let url = this.options.url;
    if (this.options.authentication && 'iam' in this.options.authentication && this.options.authentication.iam) {
      url = await this._signConnectionUrl(this.options.authentication.iam);
    } else if (this.options.authentication && 'custom' in this.options.authentication && this.options.authentication.custom) {
      url = (await this.options.authentication.custom.apply({ url })).url;
    }

    // Create the socket and wait for it to open (or immediately close)
    this.socket = new WebSocket(url);
    await (() => {
      return new Promise<void>((resolve, reject) => {
        this.socket.onopen = () => {
          resolve();
        };
        this.socket.onclose = (event) => {
          // WebSocket closed immediately
          reject(event);
        };
      });
    })();
    this.socket.onmessage = this._onMessage;
    this.socket.onerror = this._onError;
    this.socket.onclose = this._onClose;
    this._flushMessageQueue();
    this.status = SocketStatus.CONNECTED;
    this.lastConnected = Date.now();
  };

  /**
   * Establish a connection to the server
   */
  public $connect = async (): Promise<void> => {
    this.connectionAttempt = 0;
    await this._connect();
  };

  private _onDisconnect = () => {
    this.status = SocketStatus.DISCONNECTED;
    this._rejectMessageQueue();
  };

  /**
   * Disconnect from the server. You must explicitly call $connect to re-establish the connection
   */
  public $disconnect = async () => {
    if (this.socket) {
      this._onDisconnect();
      await (() => new Promise(resolve => {
        this.socket.onclose = resolve;
        this.socket.close();
      }))();
      this.socket.onclose = null;
      this.socket.onmessage = null;
      this.socket.onerror = null;
    }
  };

  /**
   * Register a callback to be called whenever an error occurs.
   * @returns a function which will remove the listener when called.
   */
  public $onError = (listener: (err: WebSocketError) => void) => {
    const listenerId = uuid();
    this.errorListeners.push({
      id: listenerId,
      listener,
    });
    return () => {
      this.errorListeners = this.errorListeners.filter(({ id }) => id !== listenerId);
    };
  };

  /**
   * Register a callback to be called whenever any message is received.
   * Not recommended for use as this is not type-safe, prefer the "onXXXX" methods to listen to specific routes.
   */
  public $onAnyMessage = (listener: (route: string, payload?: any) => void) => {
    const listenerId = uuid();
    this.allMessageListeners.push({
      id: listenerId,
      listener,
    });
    return () => {
      this.allMessageListeners = this.allMessageListeners.filter(({ id }) => id !== listenerId);
    };
  };

  /**
   * Call the given function immediately, as well as registering it to be invoked whenever the
   * websocket reconnects, for example due to a connection timeout.
   * @returns a function which will deregister the listener from further calls on reconnect
   */
  public $withReconnect = (listener: () => void): () => void => {
    const listenerId = uuid();
    this.reconnectListeners.push({
      id: listenerId,
      listener,
    });
    listener();
    return () => {
      this.reconnectListeners = this.reconnectListeners.filter(({ id }) => id !== listenerId);
    };
  };

  /**
   * Send a "AnyRequest" message to the server
   */
  public anyRequest = async (input: string): Promise<void> => {
    await this._sendOrQueueMessage("AnyRequest", input);
  };

  /**
   * Register a listener to be called whenever a "AnyRequest" message is received from the server
   * @returns a function which will remove the listener when called.
   */
  public onAnyRequest = (callback: (input: string) => void): () => void => {
    return this._listen("AnyRequest", callback);
  };

  /**
   * Send a "Bidirectional" message to the server
   */
  public bidirectional = async (input: TestRequest): Promise<void> => {
    await this._sendOrQueueMessage("Bidirectional", input);
  };

  /**
   * Register a listener to be called whenever a "Bidirectional" message is received from the server
   * @returns a function which will remove the listener when called.
   */
  public onBidirectional = (callback: (input: TestRequest) => void): () => void => {
    return this._listen("Bidirectional", callback);
  };

  /**
   * Send a "ClientToServer" message to the server
   */
  public clientToServer = async (input: TestRequest): Promise<void> => {
    await this._sendOrQueueMessage("ClientToServer", input);
  };


  /**
   * Send a "Empty" message to the server
   */
  public empty = async (): Promise<void> => {
    await this._sendOrQueueMessage("Empty");
  };

  /**
   * Register a listener to be called whenever a "Empty" message is received from the server
   * @returns a function which will remove the listener when called.
   */
  public onEmpty = (callback: () => void): () => void => {
    return this._listen("Empty", callback);
  };

  /**
   * Send a "MapRequest" message to the server
   */
  public mapRequest = async (input: MapRequest): Promise<void> => {
    await this._sendOrQueueMessage("MapRequest", input);
  };

  /**
   * Register a listener to be called whenever a "MapRequest" message is received from the server
   * @returns a function which will remove the listener when called.
   */
  public onMapRequest = (callback: (input: MapRequest) => void): () => void => {
    return this._listen("MapRequest", callback);
  };

  /**
   * Send a "MediaTypes" message to the server
   */
  public mediaTypes = async (input: string): Promise<void> => {
    await this._sendOrQueueMessage("MediaTypes", input);
  };

  /**
   * Register a listener to be called whenever a "MediaTypes" message is received from the server
   * @returns a function which will remove the listener when called.
   */
  public onMediaTypes = (callback: (input: string) => void): () => void => {
    return this._listen("MediaTypes", callback);
  };

  /**
   * Send a "MultipleContentTypes" message to the server
   */
  public multipleContentTypes = async (input: TestRequest): Promise<void> => {
    await this._sendOrQueueMessage("MultipleContentTypes", input);
  };

  /**
   * Register a listener to be called whenever a "MultipleContentTypes" message is received from the server
   * @returns a function which will remove the listener when called.
   */
  public onMultipleContentTypes = (callback: (input: TestRequest) => void): () => void => {
    return this._listen("MultipleContentTypes", callback);
  };


  /**
   * Register a listener to be called whenever a "ServerToClient" message is received from the server
   * @returns a function which will remove the listener when called.
   */
  public onServerToClient = (callback: (input: TestRequest) => void): () => void => {
    return this._listen("ServerToClient", callback);
  };

  /**
   * Send a "WithoutOperationIdPost" message to the server
   */
  public withoutOperationIdPost = async (input: TestRequest): Promise<void> => {
    await this._sendOrQueueMessage("WithoutOperationIdPost", input);
  };

  /**
   * Register a listener to be called whenever a "WithoutOperationIdPost" message is received from the server
   * @returns a function which will remove the listener when called.
   */
  public onWithoutOperationIdPost = (callback: (input: TestRequest) => void): () => void => {
    return this._listen("WithoutOperationIdPost", callback);
  };

}
",
  "src/index.ts": "/* tslint:disable */
/* eslint-disable */
export * from './models';
export * from './client/client';
",
  "src/models/ApiError.ts": "/* tslint:disable */
/* eslint-disable */
/**
 * Example API
 * 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated.
 * Do not edit the class manually.
 */
import { exists, mapValues } from './model-utils';

/**
 * 
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    errorMessage: string;
}


/**
 * Check if a given object implements the ApiError interface.
 */
export function instanceOfApiError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "errorMessage" in value;

    return isInstance;
}

export function ApiErrorFromJSON(json: any): ApiError {
    return ApiErrorFromJSONTyped(json, false);
}

export function ApiErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'errorMessage': json['errorMessage'],
    };
}

export function ApiErrorToJSON(value?: ApiError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'errorMessage': value.errorMessage,
    };
}

",
  "src/models/MapRequest.ts": "/* tslint:disable */
/* eslint-disable */
/**
 * Example API
 * 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated.
 * Do not edit the class manually.
 */
import { exists, mapValues } from './model-utils';
import type { MapRequestMapPropertyValue } from './MapRequestMapPropertyValue';
import {
    MapRequestMapPropertyValueFromJSON,
    MapRequestMapPropertyValueFromJSONTyped,
    MapRequestMapPropertyValueToJSON,
} from './MapRequestMapPropertyValue';

/**
 * 
 * @export
 * @interface MapRequest
 */
export interface MapRequest {
    /**
     * 
     * @type {{ [key: string]: MapRequestMapPropertyValue; }}
     * @memberof MapRequest
     */
    mapProperty: { [key: string]: MapRequestMapPropertyValue; };
}


/**
 * Check if a given object implements the MapRequest interface.
 */
export function instanceOfMapRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "mapProperty" in value;

    return isInstance;
}

export function MapRequestFromJSON(json: any): MapRequest {
    return MapRequestFromJSONTyped(json, false);
}

export function MapRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MapRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'mapProperty': (mapValues(json['mapProperty'], MapRequestMapPropertyValueFromJSON)),
    };
}

export function MapRequestToJSON(value?: MapRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'mapProperty': (mapValues(value.mapProperty, MapRequestMapPropertyValueToJSON)),
    };
}

",
  "src/models/MapRequestMapPropertyValue.ts": "/* tslint:disable */
/* eslint-disable */
/**
 * Example API
 * 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated.
 * Do not edit the class manually.
 */
import { exists, mapValues } from './model-utils';

/**
 * 
 * @export
 * @interface MapRequestMapPropertyValue
 */
export interface MapRequestMapPropertyValue {
    /**
     * 
     * @type {string}
     * @memberof MapRequestMapPropertyValue
     */
    a: string;
    /**
     * 
     * @type {string}
     * @memberof MapRequestMapPropertyValue
     */
    b?: string;
}


/**
 * Check if a given object implements the MapRequestMapPropertyValue interface.
 */
export function instanceOfMapRequestMapPropertyValue(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "a" in value;

    return isInstance;
}

export function MapRequestMapPropertyValueFromJSON(json: any): MapRequestMapPropertyValue {
    return MapRequestMapPropertyValueFromJSONTyped(json, false);
}

export function MapRequestMapPropertyValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): MapRequestMapPropertyValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'a': json['a'],
        'b': !exists(json, 'b') ? undefined : json['b'],
    };
}

export function MapRequestMapPropertyValueToJSON(value?: MapRequestMapPropertyValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'a': value.a,
        'b': value.b,
    };
}

",
  "src/models/TestRequest.ts": "/* tslint:disable */
/* eslint-disable */
/**
 * Example API
 * 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated.
 * Do not edit the class manually.
 */
import { exists, mapValues } from './model-utils';

/**
 * This is a test request
 * @export
 * @interface TestRequest
 */
export interface TestRequest {
    /**
     * 
     * @type {number}
     * @memberof TestRequest
     */
    myInput?: number;
}


/**
 * Check if a given object implements the TestRequest interface.
 */
export function instanceOfTestRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TestRequestFromJSON(json: any): TestRequest {
    return TestRequestFromJSONTyped(json, false);
}

export function TestRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'myInput': !exists(json, 'myInput') ? undefined : json['myInput'],
    };
}

export function TestRequestToJSON(value?: TestRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'myInput': value.myInput,
    };
}

",
  "src/models/TestResponse.ts": "/* tslint:disable */
/* eslint-disable */
/**
 * Example API
 * 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated.
 * Do not edit the class manually.
 */
import { exists, mapValues } from './model-utils';
import type { TestResponseMessagesInner } from './TestResponseMessagesInner';
import {
    TestResponseMessagesInnerFromJSON,
    TestResponseMessagesInnerFromJSONTyped,
    TestResponseMessagesInnerToJSON,
} from './TestResponseMessagesInner';

/**
 * This is a test response
 * @export
 * @interface TestResponse
 */
export interface TestResponse {
    /**
     * 
     * @type {Array<TestResponseMessagesInner>}
     * @memberof TestResponse
     */
    messages: Array<TestResponseMessagesInner>;
}


/**
 * Check if a given object implements the TestResponse interface.
 */
export function instanceOfTestResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "messages" in value;

    return isInstance;
}

export function TestResponseFromJSON(json: any): TestResponse {
    return TestResponseFromJSONTyped(json, false);
}

export function TestResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'messages': ((json['messages'] as Array<any>).map(TestResponseMessagesInnerFromJSON)),
    };
}

export function TestResponseToJSON(value?: TestResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'messages': ((value.messages as Array<any>).map(TestResponseMessagesInnerToJSON)),
    };
}

",
  "src/models/TestResponseMessagesInner.ts": "/* tslint:disable */
/* eslint-disable */
/**
 * Example API
 * 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated.
 * Do not edit the class manually.
 */
import { exists, mapValues } from './model-utils';

/**
 * 
 * @export
 * @interface TestResponseMessagesInner
 */
export interface TestResponseMessagesInner {
    /**
     * This is a message
     * @type {string}
     * @memberof TestResponseMessagesInner
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof TestResponseMessagesInner
     */
    id: number;
}


/**
 * Check if a given object implements the TestResponseMessagesInner interface.
 */
export function instanceOfTestResponseMessagesInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function TestResponseMessagesInnerFromJSON(json: any): TestResponseMessagesInner {
    return TestResponseMessagesInnerFromJSONTyped(json, false);
}

export function TestResponseMessagesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestResponseMessagesInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'message': !exists(json, 'message') ? undefined : json['message'],
        'id': json['id'],
    };
}

export function TestResponseMessagesInnerToJSON(value?: TestResponseMessagesInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'message': value.message,
        'id': value.id,
    };
}

",
  "src/models/index.ts": "/* tslint:disable */
/* eslint-disable */
export * from './ApiError';
export * from './MapRequest';
export * from './MapRequestMapPropertyValue';
export * from './TestRequest';
export * from './TestResponse';
export * from './TestResponseMessagesInner';
",
  "src/models/model-utils.ts": "/* tslint:disable */
/* eslint-disable */

export function mapValues(data: any, fn: (item: any) => any) {
  return Object.keys(data).reduce(
    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),
    {}
  );
}

export function exists(json: any, key: string) {
  const value = json[key];
  return value !== null && value !== undefined;
}
",
}
`;
