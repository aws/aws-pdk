/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
import * as fs from "fs";
import * as path from "path";
import { exec } from "projen/lib/util";
import { ClientLanguage } from "../../languages";

/**
 * Enum for generator directories for non-client generators
 */
export enum NonClientGeneratorDirectory {
  DOCS = "docs",
}

/**
 * Generator directory for openapi generation containing templates, config etc.
 */
export type GeneratorDirectory = ClientLanguage | NonClientGeneratorDirectory;

/**
 * Options for generating client code or docs using OpenAPI Generator CLI
 */
export interface GenerationOptions {
  /**
   * The OpenAPI generator to use to generate the code/docs
   */
  readonly generator: string;
  /**
   * The directory to use for OpenAPI generation
   */
  readonly generatorDirectory: GeneratorDirectory;
  /**
   * The path of the OpenAPI spec to generate the client for
   */
  readonly specPath: string;
  /**
   * The directory in which the generated code should be output
   */
  readonly outputPath: string;
  /**
   * Additional properties to pass to the generate cli
   */
  readonly additionalProperties?: {
    [key: string]: string;
  };
}

const serializeProperties = (properties: { [key: string]: string }) =>
  Object.entries(properties)
    .map(([key, value]) => `${key}=${value}`)
    .join(",");

/**
 * Clean up any files that have already been generated by the openapi generator
 * @param generatedOutputPath output path for the generator
 */
const cleanPreviouslyGeneratedFiles = (generatedOutputPath: string) => {
  // OpenAPI generator writes a manifest called FILES which lists the files it generated.
  const openApiGeneratedFilesManifestPath = path.join(
    generatedOutputPath,
    ".openapi-generator",
    "FILES"
  );

  // If the manifest exists, delete the files it lists
  if (fs.existsSync(openApiGeneratedFilesManifestPath)) {
    const previouslyGeneratedFiles = new Set(
      fs
        .readFileSync(openApiGeneratedFilesManifestPath, { encoding: "utf-8" })
        .split("\n")
        .filter((x) => x)
    );
    previouslyGeneratedFiles.forEach((previouslyGeneratedFile) => {
      fs.unlinkSync(path.join(generatedOutputPath, previouslyGeneratedFile));
    });
  }
};

/**
 * Generate client code or docs by invoking the root generate script
 */
export const invokeOpenApiGenerator = (options: GenerationOptions) => {
  // Prior to generating, clean up any previously generated files so that we don't have stale generated code from
  // previous executions.
  cleanPreviouslyGeneratedFiles(options.outputPath);

  const additionalProperties = options.additionalProperties
    ? ` --additional-properties "${serializeProperties(
        options.additionalProperties
      )}"`
    : "";
  exec(
    `./generate --generator ${options.generator} --spec-path ${options.specPath} --output-path ${options.outputPath} --generator-dir ${options.generatorDirectory}${additionalProperties}`,
    {
      cwd: path.resolve(
        __dirname,
        "..",
        "..",
        "..",
        "..",
        "scripts",
        "generators"
      ),
    }
  );
};
