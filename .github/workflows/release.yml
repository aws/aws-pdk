name: release
# Ensure each release is completed before next is performed
concurrency: release_mainline
on:
  push:
    branches:
      - mainline
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      # NX
      NX_BRANCH: mainline
      NX_RUN_GROUP: ${{ github.run_id }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
      # GITHUB
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_REF: ${{ github.ref }}
      # NPM
      NPM_DIST_TAG: latest
      NPM_REGISTRY: registry.npmjs.org
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      # MAVEN
      MAVEN_ENDPOINT: https://aws.oss.sonatype.org
      MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
      MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: ${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}
      MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
      MAVEN_STAGING_PROFILE_ID: ${{ secrets.MAVEN_STAGING_PROFILE_ID }}
      # PYPI
      TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: "mainline"
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: PDK Init
        uses: ./.github/actions/pdk-init
      - name: Build
        run: NX_CLOUD_NO_TIMEOUTS=true pnpm build
      - name: Release
        run: pnpm release
      - name: Check for mutations
        run: git diff --ignore-space-at-eol --exit-code
      - name: Tag last-release
        shell: bash
        run: |
          git tag -f last-release
          git push origin last-release --force
      - name: Print release tags
        run: git tag --list --contains `git rev-parse HEAD`
      - name: Upload docs artifact
        uses: actions/upload-artifact@v2
        with:
          name: docs-artifact
          # Only include the docs dist, which is the root of gh-pages branch
          path: public/docs/dist
  release_docs:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      # GITHUB
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY: ${{ github.repository }}
    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          fetch-depth: 0
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: docs-artifact
      - name: Configure Git
        run: |-
          git config user.name "AWS PDK Automation"
          git config user.email "aws-pdk+automation@amazon.com"
      - name: Prepare Commit
        run: |-
          touch .nojekyll
          git add .
          git diff --cached --exit-code >/dev/null || (git commit -am 'docs: publish from ${{ github.sha }}')
      - name: Push
        run: git push origin gh-pages:gh-pages
