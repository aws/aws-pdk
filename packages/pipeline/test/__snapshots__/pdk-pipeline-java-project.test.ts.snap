// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PDK Pipeline Java Unit Tests Defaults 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/cdk.json linguist-generated
/pom.xml linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v4.5.0
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/cdk.json
/cdk.out/
.cdk.staging/
",
  ".projen/deps.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "dependencies": Array [
      Object {
        "metadata": Object {
          "configuration": Object {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      Object {
        "metadata": Object {
          "configuration": Object {
            "rules": Array [
              Object {
                "requireMavenVersion": Array [
                  Object {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": Array [
            Object {
              "goals": Array [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      Object {
        "metadata": Object {
          "configuration": Object {
            "archive": Object {
              "index": true,
              "manifest": Object {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      Object {
        "metadata": Object {
          "configuration": Object {
            "additionalJOptions": Object {
              "additionalJOption": Array [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": Array [
            Object {
              "goals": Array [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      Object {
        "metadata": Object {
          "executions": Array [
            Object {
              "goals": Array [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      Object {
        "name": "org.codehaus.mojo/exec-maven-plugin",
        "type": "build",
        "version": "3.0.0",
      },
      Object {
        "name": "software.amazon.awscdk/aws-cdk-lib",
        "type": "runtime",
        "version": "^2.0.0",
      },
      Object {
        "name": "software.aws.awsprototypingsdk/aws-prototyping-sdk",
        "type": "runtime",
        "version": "^0",
      },
      Object {
        "name": "software.constructs/constructs",
        "type": "runtime",
        "version": "^10.0.5",
      },
      Object {
        "name": "io.github.cdklabs/projen",
        "type": "test",
        "version": "99.99.99",
      },
      Object {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.7.0",
      },
      Object {
        "name": "org.junit.jupiter/junit-jupiter-engine",
        "type": "test",
        "version": "5.7.0",
      },
    ],
  },
  ".projen/files.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "files": Array [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "cdk.json",
      "pom.xml",
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "tasks": Object {
      "build": Object {
        "description": "Full release build",
        "name": "build",
        "steps": Array [
          Object {
            "spawn": "default",
          },
          Object {
            "spawn": "pre-compile",
          },
          Object {
            "spawn": "compile",
          },
          Object {
            "spawn": "post-compile",
          },
          Object {
            "spawn": "test",
          },
          Object {
            "spawn": "package",
          },
        ],
      },
      "clobber": Object {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": Object {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": Array [
          Object {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in \\"scratch\\" branch",
          },
          Object {
            "exec": "git checkout $BRANCH",
          },
          Object {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          Object {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          Object {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          Object {
            "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
          },
        ],
      },
      "compile": Object {
        "description": "Only compile",
        "name": "compile",
        "steps": Array [
          Object {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": Object {
        "description": "Synthesize project files",
        "name": "default",
        "steps": Array [
          Object {
            "exec": "mvn compiler:testCompile --quiet",
          },
          Object {
            "exec": "mvn exec:java --quiet -Dexec.mainClass=projenrc -Dexec.classpathScope=\\"test\\"",
          },
        ],
      },
      "deploy": Object {
        "description": "Deploys your CDK app to the AWS cloud",
        "name": "deploy",
        "steps": Array [
          Object {
            "exec": "cdk deploy",
          },
        ],
      },
      "destroy": Object {
        "description": "Destroys your cdk app in the AWS cloud",
        "name": "destroy",
        "steps": Array [
          Object {
            "exec": "cdk destroy",
          },
        ],
      },
      "diff": Object {
        "description": "Diffs the currently deployed app against your code",
        "name": "diff",
        "steps": Array [
          Object {
            "exec": "cdk diff",
          },
        ],
      },
      "eject": Object {
        "description": "Remove projen from the project",
        "env": Object {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": Array [
          Object {
            "spawn": "default",
          },
        ],
      },
      "package": Object {
        "description": "Creates the distribution package",
        "env": Object {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": Array [
          Object {
            "exec": "mkdir -p dist/java",
          },
          Object {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": Object {
        "description": "Runs after successful compilation",
        "name": "post-compile",
        "steps": Array [
          Object {
            "spawn": "synth",
          },
        ],
      },
      "pre-compile": Object {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "synth": Object {
        "description": "Synthesizes your cdk app into cdk.out",
        "name": "synth",
        "steps": Array [
          Object {
            "exec": "cdk synth",
          },
        ],
      },
      "synth:silent": Object {
        "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\"yarn build\\")",
        "name": "synth:silent",
        "steps": Array [
          Object {
            "exec": "cdk synth -q",
          },
        ],
      },
      "test": Object {
        "description": "Run tests",
        "name": "test",
        "steps": Array [
          Object {
            "exec": "mvn test",
          },
        ],
      },
      "watch": Object {
        "description": "Watches changes in your source code and rebuilds and deploys to the current account",
        "name": "watch",
        "steps": Array [
          Object {
            "exec": "cdk deploy --hotswap",
          },
          Object {
            "exec": "cdk watch",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
  "cdk.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "app": "mvn exec:java --quiet -Dexec.mainClass=software.aws.Pipeline",
    "output": "cdk.out",
  },
  "pom.xml": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<project xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\" xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\">
    <modelVersion>4.0.0</modelVersion>
    <groupId>test</groupId>
    <artifactId>test</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>Defaults</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>software.amazon.awscdk</groupId>
            <artifactId>aws-cdk-lib</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.aws.awsprototypingsdk</groupId>
            <artifactId>aws-prototyping-sdk</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.constructs</groupId>
            <artifactId>constructs</artifactId>
            <version>[10.0.5,11.0.0)</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>projen</artifactId>
            <version>99.99.99</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\". -->",
  "src/main/java/software/aws/ApplicationStack.java": "package software.aws;

import org.jetbrains.annotations.Nullable;
import software.amazon.awscdk.Stack;
import software.amazon.awscdk.StackProps;
import software.constructs.Construct;

public class ApplicationStack extends Stack {
    public ApplicationStack(Construct construct, String id, @Nullable StackProps props) {
        super(construct, id, props);

        // TODO: Add Resources
    }
}",
  "src/main/java/software/aws/ApplicationStage.java": "package software.aws;

import org.jetbrains.annotations.Nullable;
import software.amazon.awscdk.Stage;
import software.amazon.awscdk.StageProps;
import software.constructs.Construct;

public class ApplicationStage extends Stage {

    protected ApplicationStage(Construct scope, String id, @Nullable StageProps props) {
        super(scope, id, props);

        new ApplicationStack(this, \\"MyAplication\\", null);
    }
}",
  "src/main/java/software/aws/Pipeline.java": "package software.aws;

import software.aws.awsprototypingsdk.pdknag.PDKNagApp;
import software.aws.awsprototypingsdk.pdknag.PDKNag;
import software.amazon.awscdk.Environment;
import software.amazon.awscdk.StackProps;
import software.amazon.awscdk.StageProps;

public class Pipeline {
    public static void main(String[] args) {
        PDKNagApp app = PDKNag.app();
        PipelineStack pipelineStack = new PipelineStack(app, \\"PipelineStack\\", StackProps.builder()
                .env(Environment.builder()
                        .account(System.getenv(\\"CDK_DEFAULT_ACCOUNT\\"))
                        .region(System.getenv(\\"CDK_DEFAULT_REGION\\"))
                        .build())
                .build());

        ApplicationStage devStage = new ApplicationStage(app, \\"Dev\\", StageProps.builder()
                .env(Environment.builder()
                        .account(System.getenv(\\"CDK_DEFAULT_ACCOUNT\\"))
                        .region(System.getenv(\\"CDK_DEFAULT_REGION\\"))
                        .build())
                .build());

        pipelineStack.getPipeline().addStage(devStage);

        // Add additional stages here i.e. Prod

        pipelineStack.getPipeline().buildPipeline(); // Needed for CDK Nag
        app.synth();
    }
}",
  "src/main/java/software/aws/PipelineStack.java": "package software.aws;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import org.jetbrains.annotations.Nullable;
import software.amazon.awscdk.Stack;
import software.amazon.awscdk.StackProps;
import software.amazon.awscdk.pipelines.FileSet;
import software.amazon.awscdk.pipelines.IFileSetProducer;
import software.amazon.jsii.JsiiObjectMapper;
import software.aws.awsprototypingsdk.pipeline.PDKPipeline;
import software.aws.awsprototypingsdk.pipeline.PDKPipelineProps;
import software.aws.awsprototypingsdk.pipeline.SonarCodeScannerConfig;
import software.constructs.Construct;

import java.util.List;
import java.util.function.Function;

public class PipelineStack extends Stack {
    private PDKPipeline pipeline;

    public PipelineStack(Construct scope, String id, @Nullable StackProps props) {
        super(scope, id, props);

        SonarCodeScannerConfig sonarConfig = null;
        Object sonarCtx = this.getNode().tryGetContext(\\"sonarqubeScannerConfig\\");
        String repositoryName = (String) this.getNode().tryGetContext(\\"repositoryName\\");

        if (sonarCtx != null) {
            JsonNode ctxJson = JsiiObjectMapper.valueToTree(sonarCtx).get(\\"$jsii.map\\");

            sonarConfig = SonarCodeScannerConfig.builder()
                    .cfnNagIgnorePath(getNode(ctxJson, \\"cfnNagIgnorePath\\", JsonNode::asText))
                    .sonarqubeAuthorizedGroup(getNode(ctxJson, \\"sonarqubeAuthorizedGroup\\", JsonNode::asText))
                    .sonarqubeEndpoint(getNode(ctxJson, \\"sonarqubeEndpoint\\", JsonNode::asText))
                    .sonarqubeProjectName(getNode(ctxJson, \\"sonarqubeProjectName\\", JsonNode::asText))
                    .sonarqubeSpecificProfileOrGateName(getNode(ctxJson, \\"sonarqubeSpecificProfileOrGateName\\", JsonNode::asText))
                    .sonarqubeDefaultProfileOrGateName(getNode(ctxJson, \\"sonarqubeDefaultProfileOrGateName\\", JsonNode::asText))
                    .preArchiveCommands(getNode(ctxJson, \\"preArchiveCommands\\", (node) -> JsiiObjectMapper.INSTANCE.convertValue(node, new TypeReference<List<String>>() {})))
                    .sonarqubeTags(getNode(ctxJson, \\"sonarqubeTags\\", (node) -> JsiiObjectMapper.INSTANCE.convertValue(node, new TypeReference<List<String>>() {})))
                    .build();
        }

        this.pipeline = new PDKPipeline(this, \\"ApplicationPipeline\\", PDKPipelineProps.builder()
                .primarySynthDirectory(\\"packages/infra/cdk.out\\")
                .repositoryName(repositoryName != null ? repositoryName : \\"monorepo\\")
                .publishAssetsInParallel(false)
                .crossAccountKeys(true)
                .sonarCodeScannerConfig(sonarConfig)
                .synth(new IFileSetProducer() {
                    @Override
                    public @Nullable FileSet getPrimaryOutput() {
                        return null;
                    }
                })
                .build());
    }

    private static <T> T getNode(JsonNode parent, String fieldName, Function<JsonNode, T> supplier) {
        JsonNode node = parent.get(fieldName);
        return node != null ? supplier.apply(node) : null;
    }

    public PDKPipeline getPipeline() {
        return this.pipeline;
    }
}",
  "src/test/java/software/aws/PipelineTest.java": "package software.aws;

import org.junit.jupiter.api.Test;

public class PipelineTest {
  @Test
  public void testPipeline() {
    System.out.println(\\"Implement me!\\");
  }
}",
}
`;

exports[`PDK Pipeline Java Unit Tests With Context 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/cdk.json linguist-generated
/pom.xml linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v4.5.0
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/cdk.json
/cdk.out/
.cdk.staging/
",
  ".projen/deps.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "dependencies": Array [
      Object {
        "metadata": Object {
          "configuration": Object {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      Object {
        "metadata": Object {
          "configuration": Object {
            "rules": Array [
              Object {
                "requireMavenVersion": Array [
                  Object {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": Array [
            Object {
              "goals": Array [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      Object {
        "metadata": Object {
          "configuration": Object {
            "archive": Object {
              "index": true,
              "manifest": Object {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      Object {
        "metadata": Object {
          "configuration": Object {
            "additionalJOptions": Object {
              "additionalJOption": Array [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": Array [
            Object {
              "goals": Array [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      Object {
        "metadata": Object {
          "executions": Array [
            Object {
              "goals": Array [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      Object {
        "name": "org.codehaus.mojo/exec-maven-plugin",
        "type": "build",
        "version": "3.0.0",
      },
      Object {
        "name": "software.amazon.awscdk/aws-cdk-lib",
        "type": "runtime",
        "version": "^2.0.0",
      },
      Object {
        "name": "software.aws.awsprototypingsdk/aws-prototyping-sdk",
        "type": "runtime",
        "version": "^0",
      },
      Object {
        "name": "software.constructs/constructs",
        "type": "runtime",
        "version": "^10.0.5",
      },
      Object {
        "name": "io.github.cdklabs/projen",
        "type": "test",
        "version": "99.99.99",
      },
      Object {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.7.0",
      },
      Object {
        "name": "org.junit.jupiter/junit-jupiter-engine",
        "type": "test",
        "version": "5.7.0",
      },
    ],
  },
  ".projen/files.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "files": Array [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "cdk.json",
      "pom.xml",
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "tasks": Object {
      "build": Object {
        "description": "Full release build",
        "name": "build",
        "steps": Array [
          Object {
            "spawn": "default",
          },
          Object {
            "spawn": "pre-compile",
          },
          Object {
            "spawn": "compile",
          },
          Object {
            "spawn": "post-compile",
          },
          Object {
            "spawn": "test",
          },
          Object {
            "spawn": "package",
          },
        ],
      },
      "clobber": Object {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": Object {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": Array [
          Object {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in \\"scratch\\" branch",
          },
          Object {
            "exec": "git checkout $BRANCH",
          },
          Object {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          Object {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          Object {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          Object {
            "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
          },
        ],
      },
      "compile": Object {
        "description": "Only compile",
        "name": "compile",
        "steps": Array [
          Object {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": Object {
        "description": "Synthesize project files",
        "name": "default",
        "steps": Array [
          Object {
            "exec": "mvn compiler:testCompile --quiet",
          },
          Object {
            "exec": "mvn exec:java --quiet -Dexec.mainClass=projenrc -Dexec.classpathScope=\\"test\\"",
          },
        ],
      },
      "deploy": Object {
        "description": "Deploys your CDK app to the AWS cloud",
        "name": "deploy",
        "steps": Array [
          Object {
            "exec": "cdk deploy",
          },
        ],
      },
      "destroy": Object {
        "description": "Destroys your cdk app in the AWS cloud",
        "name": "destroy",
        "steps": Array [
          Object {
            "exec": "cdk destroy",
          },
        ],
      },
      "diff": Object {
        "description": "Diffs the currently deployed app against your code",
        "name": "diff",
        "steps": Array [
          Object {
            "exec": "cdk diff",
          },
        ],
      },
      "eject": Object {
        "description": "Remove projen from the project",
        "env": Object {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": Array [
          Object {
            "spawn": "default",
          },
        ],
      },
      "package": Object {
        "description": "Creates the distribution package",
        "env": Object {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": Array [
          Object {
            "exec": "mkdir -p dist/java",
          },
          Object {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": Object {
        "description": "Runs after successful compilation",
        "name": "post-compile",
        "steps": Array [
          Object {
            "spawn": "synth",
          },
        ],
      },
      "pre-compile": Object {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "synth": Object {
        "description": "Synthesizes your cdk app into cdk.out",
        "name": "synth",
        "steps": Array [
          Object {
            "exec": "cdk synth",
          },
        ],
      },
      "synth:silent": Object {
        "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\"yarn build\\")",
        "name": "synth:silent",
        "steps": Array [
          Object {
            "exec": "cdk synth -q",
          },
        ],
      },
      "test": Object {
        "description": "Run tests",
        "name": "test",
        "steps": Array [
          Object {
            "exec": "mvn test",
          },
        ],
      },
      "watch": Object {
        "description": "Watches changes in your source code and rebuilds and deploys to the current account",
        "name": "watch",
        "steps": Array [
          Object {
            "exec": "cdk deploy --hotswap",
          },
          Object {
            "exec": "cdk watch",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
  "cdk.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "app": "mvn exec:java --quiet -Dexec.mainClass=software.aws.Pipeline",
    "context": Object {
      "sonarqubeScannerConfig": Object {
        "preArchiveCommands": Array [
          "echo here",
        ],
        "sonarqubeAuthorizedGroup": "group",
        "sonarqubeDefaultProfileOrGateName": "default",
        "sonarqubeEndpoint": "https://my.endpoint",
        "sonarqubeProjectName": "WithContext",
        "sonarqubeSpecificProfileOrGateName": "specific",
        "sonarqubeTags": Array [
          "sample",
        ],
      },
    },
    "output": "cdk.out",
  },
  "pom.xml": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<project xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\" xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\">
    <modelVersion>4.0.0</modelVersion>
    <groupId>test</groupId>
    <artifactId>test</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>WithContext</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>software.amazon.awscdk</groupId>
            <artifactId>aws-cdk-lib</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.aws.awsprototypingsdk</groupId>
            <artifactId>aws-prototyping-sdk</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.constructs</groupId>
            <artifactId>constructs</artifactId>
            <version>[10.0.5,11.0.0)</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>projen</artifactId>
            <version>99.99.99</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\". -->",
  "src/main/java/software/aws/ApplicationStack.java": "package software.aws;

import org.jetbrains.annotations.Nullable;
import software.amazon.awscdk.Stack;
import software.amazon.awscdk.StackProps;
import software.constructs.Construct;

public class ApplicationStack extends Stack {
    public ApplicationStack(Construct construct, String id, @Nullable StackProps props) {
        super(construct, id, props);

        // TODO: Add Resources
    }
}",
  "src/main/java/software/aws/ApplicationStage.java": "package software.aws;

import org.jetbrains.annotations.Nullable;
import software.amazon.awscdk.Stage;
import software.amazon.awscdk.StageProps;
import software.constructs.Construct;

public class ApplicationStage extends Stage {

    protected ApplicationStage(Construct scope, String id, @Nullable StageProps props) {
        super(scope, id, props);

        new ApplicationStack(this, \\"MyAplication\\", null);
    }
}",
  "src/main/java/software/aws/Pipeline.java": "package software.aws;

import software.aws.awsprototypingsdk.pdknag.PDKNagApp;
import software.aws.awsprototypingsdk.pdknag.PDKNag;
import software.amazon.awscdk.Environment;
import software.amazon.awscdk.StackProps;
import software.amazon.awscdk.StageProps;

public class Pipeline {
    public static void main(String[] args) {
        PDKNagApp app = PDKNag.app();
        PipelineStack pipelineStack = new PipelineStack(app, \\"PipelineStack\\", StackProps.builder()
                .env(Environment.builder()
                        .account(System.getenv(\\"CDK_DEFAULT_ACCOUNT\\"))
                        .region(System.getenv(\\"CDK_DEFAULT_REGION\\"))
                        .build())
                .build());

        ApplicationStage devStage = new ApplicationStage(app, \\"Dev\\", StageProps.builder()
                .env(Environment.builder()
                        .account(System.getenv(\\"CDK_DEFAULT_ACCOUNT\\"))
                        .region(System.getenv(\\"CDK_DEFAULT_REGION\\"))
                        .build())
                .build());

        pipelineStack.getPipeline().addStage(devStage);

        // Add additional stages here i.e. Prod

        pipelineStack.getPipeline().buildPipeline(); // Needed for CDK Nag
        app.synth();
    }
}",
  "src/main/java/software/aws/PipelineStack.java": "package software.aws;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import org.jetbrains.annotations.Nullable;
import software.amazon.awscdk.Stack;
import software.amazon.awscdk.StackProps;
import software.amazon.awscdk.pipelines.FileSet;
import software.amazon.awscdk.pipelines.IFileSetProducer;
import software.amazon.jsii.JsiiObjectMapper;
import software.aws.awsprototypingsdk.pipeline.PDKPipeline;
import software.aws.awsprototypingsdk.pipeline.PDKPipelineProps;
import software.aws.awsprototypingsdk.pipeline.SonarCodeScannerConfig;
import software.constructs.Construct;

import java.util.List;
import java.util.function.Function;

public class PipelineStack extends Stack {
    private PDKPipeline pipeline;

    public PipelineStack(Construct scope, String id, @Nullable StackProps props) {
        super(scope, id, props);

        SonarCodeScannerConfig sonarConfig = null;
        Object sonarCtx = this.getNode().tryGetContext(\\"sonarqubeScannerConfig\\");
        String repositoryName = (String) this.getNode().tryGetContext(\\"repositoryName\\");

        if (sonarCtx != null) {
            JsonNode ctxJson = JsiiObjectMapper.valueToTree(sonarCtx).get(\\"$jsii.map\\");

            sonarConfig = SonarCodeScannerConfig.builder()
                    .cfnNagIgnorePath(getNode(ctxJson, \\"cfnNagIgnorePath\\", JsonNode::asText))
                    .sonarqubeAuthorizedGroup(getNode(ctxJson, \\"sonarqubeAuthorizedGroup\\", JsonNode::asText))
                    .sonarqubeEndpoint(getNode(ctxJson, \\"sonarqubeEndpoint\\", JsonNode::asText))
                    .sonarqubeProjectName(getNode(ctxJson, \\"sonarqubeProjectName\\", JsonNode::asText))
                    .sonarqubeSpecificProfileOrGateName(getNode(ctxJson, \\"sonarqubeSpecificProfileOrGateName\\", JsonNode::asText))
                    .sonarqubeDefaultProfileOrGateName(getNode(ctxJson, \\"sonarqubeDefaultProfileOrGateName\\", JsonNode::asText))
                    .preArchiveCommands(getNode(ctxJson, \\"preArchiveCommands\\", (node) -> JsiiObjectMapper.INSTANCE.convertValue(node, new TypeReference<List<String>>() {})))
                    .sonarqubeTags(getNode(ctxJson, \\"sonarqubeTags\\", (node) -> JsiiObjectMapper.INSTANCE.convertValue(node, new TypeReference<List<String>>() {})))
                    .build();
        }

        this.pipeline = new PDKPipeline(this, \\"ApplicationPipeline\\", PDKPipelineProps.builder()
                .primarySynthDirectory(\\"packages/infra/cdk.out\\")
                .repositoryName(repositoryName != null ? repositoryName : \\"monorepo\\")
                .publishAssetsInParallel(false)
                .crossAccountKeys(true)
                .sonarCodeScannerConfig(sonarConfig)
                .synth(new IFileSetProducer() {
                    @Override
                    public @Nullable FileSet getPrimaryOutput() {
                        return null;
                    }
                })
                .build());
    }

    private static <T> T getNode(JsonNode parent, String fieldName, Function<JsonNode, T> supplier) {
        JsonNode node = parent.get(fieldName);
        return node != null ? supplier.apply(node) : null;
    }

    public PDKPipeline getPipeline() {
        return this.pipeline;
    }
}",
  "src/test/java/software/aws/PipelineTest.java": "package software.aws;

import org.junit.jupiter.api.Test;

public class PipelineTest {
  @Test
  public void testPipeline() {
    System.out.println(\\"Implement me!\\");
  }
}",
}
`;

exports[`PDK Pipeline Java Unit Tests projenrc synth correctly 1`] = `
"import software.aws.awsprototypingsdk.pipeline.PDKPipelineJavaProject;
import software.aws.awsprototypingsdk.pipeline.PDKPipelineJavaProjectOptions;

public class projenrc {
    public static void main(String[] args) {
        PDKPipelineJavaProject project = new PDKPipelineJavaProject(PDKPipelineJavaProjectOptions.builder()
            .artifactId(\\"test\\")
            .cdkVersion(\\"2.0.0\\")
            .groupId(\\"test\\")
            .mainClass(\\"software.aws.Pipeline\\")
            .version(\\"0.0.0\\")
            .name(\\"ProjenRc\\")
            .build());
        project.synth();
    }
}"
`;
