// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type Safe Api Project Unit Tests Custom OpenAPI Generator CLI Configuration 1`] = `
{
  "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "generator-cli": {
    "repository": {
      "downloadUrl": "https://my.custom.maven.repo/maven2/\${groupId}/\${artifactId}/\${versionName}/\${artifactId}-\${versionName}.jar",
    },
    "storageDir": "~/.my-storage-dir",
    "useDocker": true,
    "version": "6.2.0",
  },
  "spaces": 2,
}
`;

exports[`Type Safe Api Project Unit Tests Custom OpenAPI Generator CLI Configuration 2`] = `
{
  "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "generator-cli": {
    "repository": {
      "downloadUrl": "https://my.custom.maven.repo/maven2/\${groupId}/\${artifactId}/\${versionName}/\${artifactId}-\${versionName}.jar",
    },
    "storageDir": "~/.my-storage-dir",
    "useDocker": true,
    "version": "6.2.0",
  },
  "spaces": 2,
}
`;

exports[`Type Safe Api Project Unit Tests Custom OpenAPI Generator CLI Configuration 3`] = `
{
  "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "generator-cli": {
    "repository": {
      "downloadUrl": "https://my.custom.maven.repo/maven2/\${groupId}/\${artifactId}/\${versionName}/\${artifactId}-\${versionName}.jar",
    },
    "storageDir": "~/.my-storage-dir",
    "useDocker": true,
    "version": "6.2.0",
  },
  "spaces": 2,
}
`;

exports[`Type Safe Api Project Unit Tests Custom OpenAPI Generator CLI Configuration 4`] = `
{
  "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "generator-cli": {
    "repository": {
      "downloadUrl": "https://my.custom.maven.repo/maven2/\${groupId}/\${artifactId}/\${versionName}/\${artifactId}-\${versionName}.jar",
    },
    "storageDir": "~/.my-storage-dir",
    "useDocker": true,
    "version": "6.2.0",
  },
  "spaces": 2,
}
`;

exports[`Type Safe Api Project Unit Tests OpenApi With java Infra 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/java",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/python",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/java",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "generated/infrastructure/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
.openapi-generator
!/project.json
",
  "generated/infrastructure/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/main/java/com/generated/api/openapijavajavainfra/infra/Api.java
!src/main/java/com/generated/api/openapijavajavainfra/infra/ApiProps.java
!src/main/java/com/generated/api/openapijavajavainfra/infra/MockIntegrations.java
",
  "generated/infrastructure/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.fasterxml.jackson.core/jackson-databind",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "com.generated.api/openapi-java-java-runtime",
        "type": "runtime",
        "version": "0.0.0",
      },
      {
        "name": "io.github.cdklabs/cdknag",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "io.github.cdklabs/projen",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "^1",
      },
      {
        "name": "software.amazon.awscdk/aws-cdk-lib",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "software.aws.awsprototypingsdk/type-safe-api",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "software.constructs/constructs",
        "type": "runtime",
        "version": "^10",
      },
    ],
  },
  "generated/infrastructure/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "generated/infrastructure/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java-cdk-infrastructure --src-dir src/main/java/com/generated/api/openapijavajavainfra/infra --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-infrastructure-package":"com.generated.api.openapijavajavainfra.infra","x-runtime-package":"com.generated.api.openapijavajavaruntime.runtime","x-enable-mock-integrations":true}'",
          },
          {
            "exec": "mkdir -p src/main/resources",
          },
          {
            "exec": "cp -f ../../../model/.api.json src/main/resources/.api.json",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path src/main/resources",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/infrastructure/java/README.md": "# replace this",
  "generated/infrastructure/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>openapi-java-java-infra</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>openapijavajavainfra</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <repositories>
        <repository>
            <url>file://../../runtime/java/dist/java</url>
            <id>com.generated.api-openapi-java-java-runtime-repo</id>
        </repository>
    </repositories>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>com.generated.api</groupId>
            <artifactId>openapi-java-java-runtime</artifactId>
            <version>0.0.0</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>cdknag</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>projen</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>[1.0.0,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.awscdk</groupId>
            <artifactId>aws-cdk-lib</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.aws.awsprototypingsdk</groupId>
            <artifactId>type-safe-api</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.constructs</groupId>
            <artifactId>constructs</artifactId>
            <version>[10.0.0,11.0.0)</version>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "generated/infrastructure/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapijavajavaruntime",
      "openapi-java-model",
    ],
    "name": "openapijavajavainfra",
    "root": "generated/infrastructure/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "generated/infrastructure/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "generated/infrastructure/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "generated/infrastructure/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "generated/infrastructure/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "generated/infrastructure/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "generated/infrastructure/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "generated/infrastructure/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "generated/infrastructure/java",
        },
      },
    },
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated",
  "generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
",
  "generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
    ],
  },
  "generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/openapijavajavaruntime/runtime --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=openapi-java-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.openapijavajavaruntime.runtime,apiPackage=com.generated.api.openapijavajavaruntime.runtime.api,modelPackage=com.generated.api.openapijavajavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/java/README.md": "# replace this",
  "generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>openapi-java-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>openapijavajavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pyproject.toml linguist-generated",
  "generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
openapi_java_python_runtime
docs
README.md
.openapi-generator
",
  "generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  "generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir openapi_java_python_runtime --additional-properties "packageName=openapi_java_python_runtime,projectName=openapi-java-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "mkdir -p openapi_java_python_runtime && touch openapi_java_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/python/README.md": "# replace this",
  "generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openapi-java-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "openapi_java_python_runtime",
  "openapi_java_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "openapi_java_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --additional-properties "npmName=openapi-java-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "openapi-java-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. We add the desired path and HTTP method for the operation, as well as its inputs and outputs, for example:

\`\`\`yaml
paths:
  /foo/{myUrlParam}:
    post:
      operationId: CreateFoo
      parameters:
        - name: myUrlParam
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFooRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFooResponse'
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    CreateFooRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
    CreateFooResponse:
      type: object
      properties:
        foo:
          $ref: '#/components/schemas/Foo'
      required:
        - foo
    Foo:
      type: object
      properties:
        myProperty:
          type: integer
      required:
        - myProperty
\`\`\`

Notice above we also used a reference to \`Foo\` in the \`CreateFooResponse\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sayHello.yaml
    |_ schemas/
        |_ index.yaml
        |_ helloResponse.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/hello:
  get:
    $ref: './sayHello.yaml'
\`\`\`

\`paths/sayHello.yaml\`:

\`\`\`yaml
operationId: sayHello
parameters:
 - in: query
   name: name
   schema:
     type: string
   required: true
responses:
  '200':
    description: Successful response
    content:
      'application/json':
        schema:
          $ref: '../schemas/helloResponse.yaml'
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
HelloResponse:
  $ref: './helloResponse.yaml'
\`\`\`

\`schemas/helloResponse.yaml\`:

\`\`\`yaml
type: object
properties:
  message:
    type: string
required:
  - message
\`\`\`
",
  "model/src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /hello:
    get:
      operationId: sayHello
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SayHelloResponseContent'
        500:
          description: An internal failure at the fault of the server
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/InternalFailureErrorResponseContent'
        400:
          description: An error at the fault of the client sending invalid input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        403:
          description: An error due to the client not being authorized to access the resource
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NotAuthorizedErrorResponseContent'
components:
  schemas:
    SayHelloResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    InternalFailureErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    NotAuthorizedErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
",
}
`;

exports[`Type Safe Api Project Unit Tests OpenApi With java Infra in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "yarn nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "yarn nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "yarn nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "yarn nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "postinstall": {
        "name": "postinstall",
        "steps": [
          {
            "exec": "yarn nx run-many --target=install --output-style=stream --parallel=1 --nx-bail --projects=openapi-java-python-runtime",
          },
        ],
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "yarn nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "yarn nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "yarn npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "yarn syncpack fix-mismatches",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "yarn nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
      "yarn": ">=1 <2",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "peerDependencies": {
      "nx": "^16",
    },
    "private": true,
    "resolutions": {
      "@types/babel__traverse": "7.18.2",
      "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
      "wrap-ansi": "^7.0.0",
    },
    "scripts": {
      "build": "npx projen build",
      "clobber": "npx projen clobber",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "eject": "npx projen eject",
      "eslint": "npx projen eslint",
      "graph": "npx projen graph",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "postinstall": "npx projen postinstall",
      "pre-compile": "npx projen pre-compile",
      "run-many": "npx projen run-many",
      "synth-workspace": "yarn projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "upgrade-deps": "npx projen upgrade-deps",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/runtime/python",
        "packages/api/generated/runtime/typescript",
        "packages/api/generated/infrastructure/java",
        "packages/api/generated/runtime/java",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-java-model",
    ],
    "name": "openapi-java-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-java-model",
    ],
    "name": "openapi-java-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-java-model",
    ],
    "name": "openapi-java-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-java-model",
    ],
    "name": "openapi-java-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "packages/api/generated/infrastructure/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
.openapi-generator
!/project.json
",
  "packages/api/generated/infrastructure/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/main/java/com/generated/api/openapijavajavainfra/infra/Api.java
!src/main/java/com/generated/api/openapijavajavainfra/infra/ApiProps.java
!src/main/java/com/generated/api/openapijavajavainfra/infra/MockIntegrations.java
",
  "packages/api/generated/infrastructure/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.fasterxml.jackson.core/jackson-databind",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "com.generated.api/openapi-java-java-runtime",
        "type": "runtime",
        "version": "0.0.0",
      },
      {
        "name": "io.github.cdklabs/cdknag",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "io.github.cdklabs/projen",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "^1",
      },
      {
        "name": "software.amazon.awscdk/aws-cdk-lib",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "software.aws.awsprototypingsdk/type-safe-api",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "software.constructs/constructs",
        "type": "runtime",
        "version": "^10",
      },
    ],
  },
  "packages/api/generated/infrastructure/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "packages/api/generated/infrastructure/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java-cdk-infrastructure --src-dir src/main/java/com/generated/api/openapijavajavainfra/infra --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-infrastructure-package":"com.generated.api.openapijavajavainfra.infra","x-runtime-package":"com.generated.api.openapijavajavaruntime.runtime","x-enable-mock-integrations":true}'",
          },
          {
            "exec": "mkdir -p src/main/resources",
          },
          {
            "exec": "cp -f ../../../model/.api.json src/main/resources/.api.json",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path src/main/resources",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/infrastructure/java/README.md": "# replace this",
  "packages/api/generated/infrastructure/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>openapi-java-java-infra</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>openapijavajavainfra</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <repositories>
        <repository>
            <url>file://../../runtime/java/dist/java</url>
            <id>com.generated.api-openapi-java-java-runtime-repo</id>
        </repository>
    </repositories>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>com.generated.api</groupId>
            <artifactId>openapi-java-java-runtime</artifactId>
            <version>0.0.0</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>cdknag</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>projen</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>[1.0.0,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.awscdk</groupId>
            <artifactId>aws-cdk-lib</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.aws.awsprototypingsdk</groupId>
            <artifactId>type-safe-api</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.constructs</groupId>
            <artifactId>constructs</artifactId>
            <version>[10.0.0,11.0.0)</version>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "packages/api/generated/infrastructure/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapijavajavaruntime",
      "openapi-java-model",
    ],
    "name": "openapijavajavainfra",
    "root": "packages/api/generated/infrastructure/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
    },
  },
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "packages/api/generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "packages/api/generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "packages/api/generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "packages/api/generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/openapijavajavaruntime/runtime --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=openapi-java-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.openapijavajavaruntime.runtime,apiPackage=com.generated.api.openapijavajavaruntime.runtime.api,modelPackage=com.generated.api.openapijavajavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/java/README.md": "# replace this",
  "packages/api/generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>openapi-java-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>openapijavajavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "packages/api/generated/runtime/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-java-model",
    ],
    "name": "openapijavajavaruntime",
    "root": "packages/api/generated/runtime/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "packages/api/generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
openapi_java_python_runtime
docs
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "packages/api/generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "packages/api/generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "packages/api/generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir openapi_java_python_runtime --additional-properties "packageName=openapi_java_python_runtime,projectName=openapi-java-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "env": {
          "VIRTUAL_ENV": "",
        },
        "name": "install",
        "steps": [
          {
            "exec": "unset VIRTUAL_ENV",
          },
          {
            "exec": "mkdir -p openapi_java_python_runtime && touch openapi_java_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/python/README.md": "# replace this",
  "packages/api/generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "packages/api/generated/runtime/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-java-model",
    ],
    "name": "openapi-java-python-runtime",
    "root": "packages/api/generated/runtime/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "install": {
        "dependsOn": [
          "^install",
        ],
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openapi-java-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "openapi_java_python_runtime",
  "openapi_java_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "openapi_java_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --additional-properties "npmName=openapi-java-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "openapi-java-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-java-model",
    ],
    "name": "openapi-java-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. We add the desired path and HTTP method for the operation, as well as its inputs and outputs, for example:

\`\`\`yaml
paths:
  /foo/{myUrlParam}:
    post:
      operationId: CreateFoo
      parameters:
        - name: myUrlParam
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFooRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFooResponse'
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    CreateFooRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
    CreateFooResponse:
      type: object
      properties:
        foo:
          $ref: '#/components/schemas/Foo'
      required:
        - foo
    Foo:
      type: object
      properties:
        myProperty:
          type: integer
      required:
        - myProperty
\`\`\`

Notice above we also used a reference to \`Foo\` in the \`CreateFooResponse\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sayHello.yaml
    |_ schemas/
        |_ index.yaml
        |_ helloResponse.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/hello:
  get:
    $ref: './sayHello.yaml'
\`\`\`

\`paths/sayHello.yaml\`:

\`\`\`yaml
operationId: sayHello
parameters:
 - in: query
   name: name
   schema:
     type: string
   required: true
responses:
  '200':
    description: Successful response
    content:
      'application/json':
        schema:
          $ref: '../schemas/helloResponse.yaml'
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
HelloResponse:
  $ref: './helloResponse.yaml'
\`\`\`

\`schemas/helloResponse.yaml\`:

\`\`\`yaml
type: object
properties:
  message:
    type: string
required:
  - message
\`\`\`
",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "openapi-java-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /hello:
    get:
      operationId: sayHello
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SayHelloResponseContent'
        500:
          description: An internal failure at the fault of the server
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/InternalFailureErrorResponseContent'
        400:
          description: An error at the fault of the client sending invalid input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        403:
          description: An error due to the client not being authorized to access the resource
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NotAuthorizedErrorResponseContent'
components:
  schemas:
    SayHelloResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    InternalFailureErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    NotAuthorizedErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "openapi-java",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;

exports[`Type Safe Api Project Unit Tests OpenApi With python Infra 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/java",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/python",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/python",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "generated/infrastructure/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
openapi_python_python_infra
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!openapi_python_python_infra/__init__.py
!openapi_python_python_infra/api.py
!openapi_python_python_infra/mock_integrations.py
",
  "generated/infrastructure/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws_prototyping_sdk.type_safe_api",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "constructs",
        "type": "runtime",
        "version": "^10",
      },
      {
        "name": "openapi-python-python-runtime",
        "type": "runtime",
        "version": "{path="../../runtime/python", develop=true}",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
    ],
  },
  "generated/infrastructure/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "generated/infrastructure/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python-cdk-infrastructure --src-dir openapi_python_python_infra --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-module-name":"openapi_python_python_runtime","x-relative-spec-path":"../../../../model/.api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "mkdir -p openapi_python_python_infra && touch openapi_python_python_infra/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/infrastructure/python/README.md": "# replace this",
  "generated/infrastructure/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "generated/infrastructure/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-python-python-runtime",
      "openapi-python-model",
    ],
    "name": "openapi-python-python-infra",
    "root": "generated/infrastructure/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "generated/infrastructure/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "generated/infrastructure/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "generated/infrastructure/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "generated/infrastructure/python",
        },
      },
      "install": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "generated/infrastructure/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "generated/infrastructure/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "generated/infrastructure/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "generated/infrastructure/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "generated/infrastructure/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "generated/infrastructure/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "generated/infrastructure/python",
        },
      },
    },
  },
  "generated/infrastructure/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openapi-python-python-infra"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "openapi_python_python_infra",
  "openapi_python_python_infra/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "openapi_python_python_infra"

  [tool.poetry.dependencies]
  "aws_prototyping_sdk.type_safe_api" = "^0"
  aws-cdk-lib = "^2"
  cdk-nag = "^2"
  constructs = "^10"
  python = "^3.9"

    [tool.poetry.dependencies.openapi-python-python-runtime]
    path = "../../runtime/python"
    develop = true
",
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated",
  "generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
",
  "generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
    ],
  },
  "generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/openapipythonjavaruntime/runtime --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=openapi-python-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.openapipythonjavaruntime.runtime,apiPackage=com.generated.api.openapipythonjavaruntime.runtime.api,modelPackage=com.generated.api.openapipythonjavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/java/README.md": "# replace this",
  "generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>openapi-python-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>openapipythonjavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pyproject.toml linguist-generated",
  "generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
openapi_python_python_runtime
docs
README.md
.openapi-generator
",
  "generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  "generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir openapi_python_python_runtime --additional-properties "packageName=openapi_python_python_runtime,projectName=openapi-python-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "mkdir -p openapi_python_python_runtime && touch openapi_python_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/python/README.md": "# replace this",
  "generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openapi-python-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "openapi_python_python_runtime",
  "openapi_python_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "openapi_python_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --additional-properties "npmName=openapi-python-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "openapi-python-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. We add the desired path and HTTP method for the operation, as well as its inputs and outputs, for example:

\`\`\`yaml
paths:
  /foo/{myUrlParam}:
    post:
      operationId: CreateFoo
      parameters:
        - name: myUrlParam
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFooRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFooResponse'
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    CreateFooRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
    CreateFooResponse:
      type: object
      properties:
        foo:
          $ref: '#/components/schemas/Foo'
      required:
        - foo
    Foo:
      type: object
      properties:
        myProperty:
          type: integer
      required:
        - myProperty
\`\`\`

Notice above we also used a reference to \`Foo\` in the \`CreateFooResponse\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sayHello.yaml
    |_ schemas/
        |_ index.yaml
        |_ helloResponse.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/hello:
  get:
    $ref: './sayHello.yaml'
\`\`\`

\`paths/sayHello.yaml\`:

\`\`\`yaml
operationId: sayHello
parameters:
 - in: query
   name: name
   schema:
     type: string
   required: true
responses:
  '200':
    description: Successful response
    content:
      'application/json':
        schema:
          $ref: '../schemas/helloResponse.yaml'
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
HelloResponse:
  $ref: './helloResponse.yaml'
\`\`\`

\`schemas/helloResponse.yaml\`:

\`\`\`yaml
type: object
properties:
  message:
    type: string
required:
  - message
\`\`\`
",
  "model/src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /hello:
    get:
      operationId: sayHello
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SayHelloResponseContent'
        500:
          description: An internal failure at the fault of the server
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/InternalFailureErrorResponseContent'
        400:
          description: An error at the fault of the client sending invalid input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        403:
          description: An error due to the client not being authorized to access the resource
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NotAuthorizedErrorResponseContent'
components:
  schemas:
    SayHelloResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    InternalFailureErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    NotAuthorizedErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
",
}
`;

exports[`Type Safe Api Project Unit Tests OpenApi With python Infra in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "yarn nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "yarn nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "yarn nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "yarn nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "postinstall": {
        "name": "postinstall",
        "steps": [
          {
            "exec": "yarn nx run-many --target=install --output-style=stream --parallel=1 --nx-bail --projects=openapi-python-python-runtime,openapi-python-python-infra",
          },
        ],
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "yarn nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "yarn nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "yarn npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "yarn syncpack fix-mismatches",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "yarn nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
      "yarn": ">=1 <2",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "peerDependencies": {
      "nx": "^16",
    },
    "private": true,
    "resolutions": {
      "@types/babel__traverse": "7.18.2",
      "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
      "wrap-ansi": "^7.0.0",
    },
    "scripts": {
      "build": "npx projen build",
      "clobber": "npx projen clobber",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "eject": "npx projen eject",
      "eslint": "npx projen eslint",
      "graph": "npx projen graph",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "postinstall": "npx projen postinstall",
      "pre-compile": "npx projen pre-compile",
      "run-many": "npx projen run-many",
      "synth-workspace": "yarn projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "upgrade-deps": "npx projen upgrade-deps",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/infrastructure/python",
        "packages/api/generated/runtime/python",
        "packages/api/generated/runtime/typescript",
        "packages/api/generated/runtime/java",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-python-model",
    ],
    "name": "openapi-python-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-python-model",
    ],
    "name": "openapi-python-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-python-model",
    ],
    "name": "openapi-python-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-python-model",
    ],
    "name": "openapi-python-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "packages/api/generated/infrastructure/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
openapi_python_python_infra
.openapi-generator
mocks
!/project.json
",
  "packages/api/generated/infrastructure/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!openapi_python_python_infra/__init__.py
!openapi_python_python_infra/api.py
!openapi_python_python_infra/mock_integrations.py
",
  "packages/api/generated/infrastructure/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws_prototyping_sdk.type_safe_api",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "constructs",
        "type": "runtime",
        "version": "^10",
      },
      {
        "name": "openapi-python-python-runtime",
        "type": "runtime",
        "version": "{path="../../runtime/python", develop=true}",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
    ],
  },
  "packages/api/generated/infrastructure/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "packages/api/generated/infrastructure/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python-cdk-infrastructure --src-dir openapi_python_python_infra --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-module-name":"openapi_python_python_runtime","x-relative-spec-path":"../../../../model/.api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "env": {
          "VIRTUAL_ENV": "",
        },
        "name": "install",
        "steps": [
          {
            "exec": "unset VIRTUAL_ENV",
          },
          {
            "exec": "mkdir -p openapi_python_python_infra && touch openapi_python_python_infra/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/infrastructure/python/README.md": "# replace this",
  "packages/api/generated/infrastructure/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "packages/api/generated/infrastructure/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-python-python-runtime",
      "openapi-python-model",
    ],
    "name": "openapi-python-python-infra",
    "root": "packages/api/generated/infrastructure/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "install": {
        "dependsOn": [
          "^install",
        ],
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openapi-python-python-infra"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "openapi_python_python_infra",
  "openapi_python_python_infra/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "openapi_python_python_infra"

  [tool.poetry.dependencies]
  "aws_prototyping_sdk.type_safe_api" = "^0"
  aws-cdk-lib = "^2"
  cdk-nag = "^2"
  constructs = "^10"
  python = "^3.9"

    [tool.poetry.dependencies.openapi-python-python-runtime]
    path = "../../runtime/python"
    develop = true
",
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "packages/api/generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "packages/api/generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "packages/api/generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "packages/api/generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/openapipythonjavaruntime/runtime --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=openapi-python-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.openapipythonjavaruntime.runtime,apiPackage=com.generated.api.openapipythonjavaruntime.runtime.api,modelPackage=com.generated.api.openapipythonjavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/java/README.md": "# replace this",
  "packages/api/generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>openapi-python-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>openapipythonjavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "packages/api/generated/runtime/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-python-model",
    ],
    "name": "openapipythonjavaruntime",
    "root": "packages/api/generated/runtime/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "packages/api/generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
openapi_python_python_runtime
docs
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "packages/api/generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "packages/api/generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "packages/api/generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir openapi_python_python_runtime --additional-properties "packageName=openapi_python_python_runtime,projectName=openapi-python-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "env": {
          "VIRTUAL_ENV": "",
        },
        "name": "install",
        "steps": [
          {
            "exec": "unset VIRTUAL_ENV",
          },
          {
            "exec": "mkdir -p openapi_python_python_runtime && touch openapi_python_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/python/README.md": "# replace this",
  "packages/api/generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "packages/api/generated/runtime/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-python-model",
    ],
    "name": "openapi-python-python-runtime",
    "root": "packages/api/generated/runtime/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "install": {
        "dependsOn": [
          "^install",
        ],
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openapi-python-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "openapi_python_python_runtime",
  "openapi_python_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "openapi_python_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --additional-properties "npmName=openapi-python-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "openapi-python-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-python-model",
    ],
    "name": "openapi-python-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. We add the desired path and HTTP method for the operation, as well as its inputs and outputs, for example:

\`\`\`yaml
paths:
  /foo/{myUrlParam}:
    post:
      operationId: CreateFoo
      parameters:
        - name: myUrlParam
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFooRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFooResponse'
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    CreateFooRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
    CreateFooResponse:
      type: object
      properties:
        foo:
          $ref: '#/components/schemas/Foo'
      required:
        - foo
    Foo:
      type: object
      properties:
        myProperty:
          type: integer
      required:
        - myProperty
\`\`\`

Notice above we also used a reference to \`Foo\` in the \`CreateFooResponse\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sayHello.yaml
    |_ schemas/
        |_ index.yaml
        |_ helloResponse.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/hello:
  get:
    $ref: './sayHello.yaml'
\`\`\`

\`paths/sayHello.yaml\`:

\`\`\`yaml
operationId: sayHello
parameters:
 - in: query
   name: name
   schema:
     type: string
   required: true
responses:
  '200':
    description: Successful response
    content:
      'application/json':
        schema:
          $ref: '../schemas/helloResponse.yaml'
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
HelloResponse:
  $ref: './helloResponse.yaml'
\`\`\`

\`schemas/helloResponse.yaml\`:

\`\`\`yaml
type: object
properties:
  message:
    type: string
required:
  - message
\`\`\`
",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "openapi-python-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /hello:
    get:
      operationId: sayHello
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SayHelloResponseContent'
        500:
          description: An internal failure at the fault of the server
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/InternalFailureErrorResponseContent'
        400:
          description: An error at the fault of the client sending invalid input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        403:
          description: An error due to the client not being authorized to access the resource
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NotAuthorizedErrorResponseContent'
components:
  schemas:
    SayHelloResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    InternalFailureErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    NotAuthorizedErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "openapi-python",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;

exports[`Type Safe Api Project Unit Tests OpenApi With typescript Infra 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/java",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/python",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "openapi-typescript-typescript-runtime",
        "type": "runtime",
        "version": "file:../../runtime/typescript",
      },
    ],
  },
  "generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"openapi-typescript-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn link openapi-typescript-typescript-runtime",
          },
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='openapi-typescript-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='openapi-typescript-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='openapi-typescript-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='openapi-typescript-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='openapi-typescript-typescript-runtime'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/infrastructure/typescript/README.md": "# replace this",
  "generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "openapi-typescript-typescript-runtime": "file:../../runtime/typescript",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "openapi-typescript-typescript-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-typescript-typescript-runtime",
      "openapi-typescript-model",
    ],
    "name": "openapi-typescript-typescript-infra",
    "root": "generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "generated/infrastructure/typescript",
        },
      },
    },
  },
  "generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated",
  "generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
",
  "generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
    ],
  },
  "generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/openapitypescriptjavaruntime/runtime --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=openapi-typescript-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.openapitypescriptjavaruntime.runtime,apiPackage=com.generated.api.openapitypescriptjavaruntime.runtime.api,modelPackage=com.generated.api.openapitypescriptjavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/java/README.md": "# replace this",
  "generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>openapi-typescript-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>openapitypescriptjavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pyproject.toml linguist-generated",
  "generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
openapi_typescript_python_runtime
docs
README.md
.openapi-generator
",
  "generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  "generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir openapi_typescript_python_runtime --additional-properties "packageName=openapi_typescript_python_runtime,projectName=openapi-typescript-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "mkdir -p openapi_typescript_python_runtime && touch openapi_typescript_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/python/README.md": "# replace this",
  "generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openapi-typescript-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "openapi_typescript_python_runtime",
  "openapi_typescript_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "openapi_typescript_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --additional-properties "npmName=openapi-typescript-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "openapi-typescript-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. We add the desired path and HTTP method for the operation, as well as its inputs and outputs, for example:

\`\`\`yaml
paths:
  /foo/{myUrlParam}:
    post:
      operationId: CreateFoo
      parameters:
        - name: myUrlParam
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFooRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFooResponse'
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    CreateFooRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
    CreateFooResponse:
      type: object
      properties:
        foo:
          $ref: '#/components/schemas/Foo'
      required:
        - foo
    Foo:
      type: object
      properties:
        myProperty:
          type: integer
      required:
        - myProperty
\`\`\`

Notice above we also used a reference to \`Foo\` in the \`CreateFooResponse\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sayHello.yaml
    |_ schemas/
        |_ index.yaml
        |_ helloResponse.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/hello:
  get:
    $ref: './sayHello.yaml'
\`\`\`

\`paths/sayHello.yaml\`:

\`\`\`yaml
operationId: sayHello
parameters:
 - in: query
   name: name
   schema:
     type: string
   required: true
responses:
  '200':
    description: Successful response
    content:
      'application/json':
        schema:
          $ref: '../schemas/helloResponse.yaml'
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
HelloResponse:
  $ref: './helloResponse.yaml'
\`\`\`

\`schemas/helloResponse.yaml\`:

\`\`\`yaml
type: object
properties:
  message:
    type: string
required:
  - message
\`\`\`
",
  "model/src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /hello:
    get:
      operationId: sayHello
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SayHelloResponseContent'
        500:
          description: An internal failure at the fault of the server
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/InternalFailureErrorResponseContent'
        400:
          description: An error at the fault of the client sending invalid input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        403:
          description: An error due to the client not being authorized to access the resource
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NotAuthorizedErrorResponseContent'
components:
  schemas:
    SayHelloResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    InternalFailureErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    NotAuthorizedErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
",
}
`;

exports[`Type Safe Api Project Unit Tests OpenApi With typescript Infra in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "yarn nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "yarn nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "yarn nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "yarn nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "postinstall": {
        "name": "postinstall",
        "steps": [
          {
            "exec": "yarn nx run-many --target=install --output-style=stream --parallel=1 --nx-bail --projects=openapi-typescript-python-runtime",
          },
        ],
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "yarn nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "yarn nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "yarn npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "yarn syncpack fix-mismatches",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "yarn nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
      "yarn": ">=1 <2",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "peerDependencies": {
      "nx": "^16",
    },
    "private": true,
    "resolutions": {
      "@types/babel__traverse": "7.18.2",
      "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
      "wrap-ansi": "^7.0.0",
    },
    "scripts": {
      "build": "npx projen build",
      "clobber": "npx projen clobber",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "eject": "npx projen eject",
      "eslint": "npx projen eslint",
      "graph": "npx projen graph",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "postinstall": "npx projen postinstall",
      "pre-compile": "npx projen pre-compile",
      "run-many": "npx projen run-many",
      "synth-workspace": "yarn projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "upgrade-deps": "npx projen upgrade-deps",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/runtime/python",
        "packages/api/generated/infrastructure/typescript",
        "packages/api/generated/runtime/typescript",
        "packages/api/generated/runtime/java",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-typescript-model",
    ],
    "name": "openapi-typescript-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-typescript-model",
    ],
    "name": "openapi-typescript-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-typescript-model",
    ],
    "name": "openapi-typescript-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-typescript-model",
    ],
    "name": "openapi-typescript-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "packages/api/generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "packages/api/generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "openapi-typescript-typescript-runtime",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"openapi-typescript-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/infrastructure/typescript/README.md": "# replace this",
  "packages/api/generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "openapi-typescript-typescript-runtime": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "openapi-typescript-typescript-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-typescript-typescript-runtime",
      "openapi-typescript-model",
    ],
    "name": "openapi-typescript-typescript-infra",
    "root": "packages/api/generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "packages/api/generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "packages/api/generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "packages/api/generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "packages/api/generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/openapitypescriptjavaruntime/runtime --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=openapi-typescript-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.openapitypescriptjavaruntime.runtime,apiPackage=com.generated.api.openapitypescriptjavaruntime.runtime.api,modelPackage=com.generated.api.openapitypescriptjavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/java/README.md": "# replace this",
  "packages/api/generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>openapi-typescript-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>openapitypescriptjavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "packages/api/generated/runtime/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-typescript-model",
    ],
    "name": "openapitypescriptjavaruntime",
    "root": "packages/api/generated/runtime/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "packages/api/generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
openapi_typescript_python_runtime
docs
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "packages/api/generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "packages/api/generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "packages/api/generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir openapi_typescript_python_runtime --additional-properties "packageName=openapi_typescript_python_runtime,projectName=openapi-typescript-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "env": {
          "VIRTUAL_ENV": "",
        },
        "name": "install",
        "steps": [
          {
            "exec": "unset VIRTUAL_ENV",
          },
          {
            "exec": "mkdir -p openapi_typescript_python_runtime && touch openapi_typescript_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/python/README.md": "# replace this",
  "packages/api/generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "packages/api/generated/runtime/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-typescript-model",
    ],
    "name": "openapi-typescript-python-runtime",
    "root": "packages/api/generated/runtime/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "install": {
        "dependsOn": [
          "^install",
        ],
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openapi-typescript-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "openapi_typescript_python_runtime",
  "openapi_typescript_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "openapi_typescript_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --additional-properties "npmName=openapi-typescript-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "openapi-typescript-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "openapi-typescript-model",
    ],
    "name": "openapi-typescript-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. We add the desired path and HTTP method for the operation, as well as its inputs and outputs, for example:

\`\`\`yaml
paths:
  /foo/{myUrlParam}:
    post:
      operationId: CreateFoo
      parameters:
        - name: myUrlParam
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFooRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFooResponse'
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    CreateFooRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
    CreateFooResponse:
      type: object
      properties:
        foo:
          $ref: '#/components/schemas/Foo'
      required:
        - foo
    Foo:
      type: object
      properties:
        myProperty:
          type: integer
      required:
        - myProperty
\`\`\`

Notice above we also used a reference to \`Foo\` in the \`CreateFooResponse\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sayHello.yaml
    |_ schemas/
        |_ index.yaml
        |_ helloResponse.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/hello:
  get:
    $ref: './sayHello.yaml'
\`\`\`

\`paths/sayHello.yaml\`:

\`\`\`yaml
operationId: sayHello
parameters:
 - in: query
   name: name
   schema:
     type: string
   required: true
responses:
  '200':
    description: Successful response
    content:
      'application/json':
        schema:
          $ref: '../schemas/helloResponse.yaml'
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
HelloResponse:
  $ref: './helloResponse.yaml'
\`\`\`

\`schemas/helloResponse.yaml\`:

\`\`\`yaml
type: object
properties:
  message:
    type: string
required:
  - message
\`\`\`
",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "openapi-typescript-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /hello:
    get:
      operationId: sayHello
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SayHelloResponseContent'
        500:
          description: An internal failure at the fault of the server
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/InternalFailureErrorResponseContent'
        400:
          description: An error at the fault of the client sending invalid input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        403:
          description: An error due to the client not being authorized to access the resource
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NotAuthorizedErrorResponseContent'
components:
  schemas:
    SayHelloResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    InternalFailureErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    NotAuthorizedErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "openapi-typescript",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With Handlers 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/java",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/python",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/typescript",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-handlers-typescript-runtime",
        "type": "runtime",
        "version": "file:../../runtime/typescript",
      },
    ],
  },
  "generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-handlers-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-handlers-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn link smithy-handlers-typescript-runtime",
          },
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/infrastructure/typescript/README.md": "# replace this",
  "generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-handlers-typescript-runtime": "file:../../runtime/typescript",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-handlers-typescript-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-handlers-typescript-runtime",
      "smithy-handlers-model",
    ],
    "name": "smithy-handlers-typescript-infra",
    "root": "generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "generated/infrastructure/typescript",
        },
      },
    },
  },
  "generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated",
  "generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
",
  "generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
    ],
  },
  "generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/smithyhandlersjavaruntime/runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-handlers-model/openapi/model/model.json --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=smithy-handlers-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.smithyhandlersjavaruntime.runtime,apiPackage=com.generated.api.smithyhandlersjavaruntime.runtime.api,modelPackage=com.generated.api.smithyhandlersjavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/java/README.md": "# replace this",
  "generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-handlers-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithyhandlersjavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pyproject.toml linguist-generated",
  "generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
smithy_handlers_python_runtime
docs
README.md
.openapi-generator
",
  "generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  "generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir smithy_handlers_python_runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-handlers-model/openapi/model/model.json --additional-properties "packageName=smithy_handlers_python_runtime,projectName=smithy-handlers-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "mkdir -p smithy_handlers_python_runtime && touch smithy_handlers_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/python/README.md": "# replace this",
  "generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-handlers-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_handlers_python_runtime",
  "smithy_handlers_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_handlers_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-handlers-model/openapi/model/model.json --additional-properties "npmName=smithy-handlers-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-handlers-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "handlers/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.openapi-generator-ignore-handlebars linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "handlers/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/.openapi-generator-ignore-handlebars
!/openapitools.json
.openapi-generator
!/project.json
",
  "handlers/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
",
  "handlers/java/.openapi-generator-ignore-handlebars": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/*
**/*
*
!src/main/java/com/generated/api/smithyhandlersjavahandlers/handlers/__all_handlers.java
",
  "handlers/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "com.github.edwgiz/maven-shade-plugin.log4j2-cachefile-transformer",
        "type": "build",
        "version": "2.15.0",
      },
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "createDependencyReducedPom": false,
            "transformers": [
              {
                "transformer": {
                  "@implementation": "com.github.edwgiz.maven_shade_plugin.log4j2_cache_transformer.PluginsCacheFileTransformer",
                },
              },
            ],
          },
          "dependencies": [
            "com.github.edwgiz/maven-shade-plugin.log4j2-cachefile-transformer@2.15.0",
          ],
          "executions": [
            {
              "goals": [
                "shade",
              ],
              "id": "shade-task",
              "phase": "package",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-shade-plugin",
        "type": "build",
        "version": "3.3.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.generated.api/smithy-handlers-java-runtime",
        "type": "runtime",
        "version": "0.0.0",
      },
    ],
  },
  "handlers/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".openapi-generator-ignore-handlebars",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "handlers/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../model/.api.json --output-path . --generator-dir java-lambda-handlers --src-dir src/main/java/com/generated/api/smithyhandlersjavahandlers/handlers --smithy-json-path ../../model/build/smithyprojections/smithy-handlers-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-handlers-package":"com.generated.api.smithyhandlersjavahandlers.handlers","x-runtime-package":"com.generated.api.smithyhandlersjavaruntime.runtime"}'",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "handlers/java/README.md": "# replace this",
  "handlers/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "handlers/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-handlers-java-handlers</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithyhandlersjavahandlers</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <repositories>
        <repository>
            <url>file://../../generated/runtime/java/dist/java</url>
            <id>com.generated.api-smithy-handlers-java-runtime-repo</id>
        </repository>
    </repositories>
    <build>
        <plugins>
            <plugin>
                <groupId>com.github.edwgiz</groupId>
                <artifactId>maven-shade-plugin.log4j2-cachefile-transformer</artifactId>
                <version>2.15.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <transformers>
                        <transformer implementation="com.github.edwgiz.maven_shade_plugin.log4j2_cache_transformer.PluginsCacheFileTransformer"/>
                    </transformers>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.github.edwgiz</groupId>
                        <artifactId>maven-shade-plugin.log4j2-cachefile-transformer</artifactId>
                        <version>2.15.0</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>shade-task</id>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.generated.api</groupId>
            <artifactId>smithy-handlers-java-runtime</artifactId>
            <version>0.0.0</version>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "handlers/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithyhandlersjavaruntime",
    ],
    "name": "smithyhandlersjavahandlers",
    "root": "handlers/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "handlers/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "handlers/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "handlers/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "handlers/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "handlers/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "handlers/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "handlers/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "handlers/java",
        },
      },
    },
  },
  "handlers/java/src/main/resources/log4j2.xml": "<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
    <Appenders>
        <Console name="JsonAppender" target="SYSTEM_OUT">
            <JsonTemplateLayout eventTemplateUri="classpath:LambdaJsonLayout.json" />
        </Console>
    </Appenders>
    <Loggers>
        <Logger name="JsonLogger" level="INFO" additivity="false">
            <AppenderRef ref="JsonAppender"/>
        </Logger>
        <Root level="info">
            <AppenderRef ref="JsonAppender"/>
        </Root>
    </Loggers>
</Configuration>",
  "handlers/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.openapi-generator-ignore-handlebars linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "handlers/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/.openapi-generator-ignore-handlebars
!/openapitools.json
.openapi-generator
!/project.json
",
  "handlers/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
",
  "handlers/python/.openapi-generator-ignore-handlebars": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/*
**/*
*
!smithy_handlers_python_handlers/__all_handlers.py
",
  "handlers/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "smithy-handlers-python-runtime",
        "type": "runtime",
        "version": "{path="../../generated/runtime/python", develop=true}",
      },
    ],
  },
  "handlers/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".openapi-generator-ignore-handlebars",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "handlers/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../model/.api.json --output-path . --generator-dir python-lambda-handlers --src-dir smithy_handlers_python_handlers --smithy-json-path ../../model/build/smithyprojections/smithy-handlers-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-module-name":"smithy_handlers_python_runtime"}' --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
          {
            "exec": "mkdir -p dist/lambda && rm -rf dist/lambda/*",
          },
          {
            "exec": "cp -r smithy_handlers_python_handlers dist/lambda/smithy_handlers_python_handlers",
          },
          {
            "exec": "poetry export --without-hashes --format=requirements.txt > dist/lambda/requirements.txt",
          },
          {
            "exec": "pip install -r dist/lambda/requirements.txt --target dist/lambda --upgrade",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "handlers/python/README.md": "# replace this",
  "handlers/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "handlers/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "handlers/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-handlers-python-runtime",
    ],
    "name": "smithy-handlers-python-handlers",
    "root": "handlers/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "handlers/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "handlers/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "handlers/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "handlers/python",
        },
      },
      "install": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "handlers/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "handlers/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "handlers/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "handlers/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "handlers/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "handlers/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "handlers/python",
        },
      },
    },
  },
  "handlers/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-handlers-python-handlers"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_handlers_python_handlers",
  "smithy_handlers_python_handlers/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_handlers_python_handlers"

  [tool.poetry.dependencies]
  python = "^3.9"

    [tool.poetry.dependencies.smithy-handlers-python-runtime]
    path = "../../generated/runtime/python"
    develop = true
",
  "handlers/python/smithy_handlers_python_handlers/__init__.py": "#",
  "handlers/typescript/.eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
    ],
    "ignorePatterns": [
      "*.js",
      "*.d.ts",
      "node_modules/",
      "*.generated.ts",
      "coverage",
    ],
    "overrides": [],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/indent": [
        "error",
        2,
      ],
      "@typescript-eslint/member-delimiter-style": [
        "error",
      ],
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "array-bracket-newline": [
        "error",
        "consistent",
      ],
      "array-bracket-spacing": [
        "error",
        "never",
      ],
      "brace-style": [
        "error",
        "1tbs",
        {
          "allowSingleLine": true,
        },
      ],
      "comma-dangle": [
        "error",
        "always-multiline",
      ],
      "comma-spacing": [
        "error",
        {
          "after": true,
          "before": false,
        },
      ],
      "curly": [
        "error",
        "multi-line",
        "consistent",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "indent": [
        "off",
      ],
      "key-spacing": [
        "error",
      ],
      "keyword-spacing": [
        "error",
      ],
      "max-len": [
        "error",
        {
          "code": 150,
          "ignoreComments": true,
          "ignoreRegExpLiterals": true,
          "ignoreStrings": true,
          "ignoreTemplateLiterals": true,
          "ignoreUrls": true,
        },
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multi-spaces": [
        "error",
        {
          "ignoreEOLComments": false,
        },
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "object-curly-newline": [
        "error",
        {
          "consistent": true,
          "multiline": true,
        },
      ],
      "object-curly-spacing": [
        "error",
        "always",
      ],
      "object-property-newline": [
        "error",
        {
          "allowAllPropertiesOnSameLine": true,
        },
      ],
      "quote-props": [
        "error",
        "consistent-as-needed",
      ],
      "quotes": [
        "error",
        "single",
        {
          "avoidEscape": true,
        },
      ],
      "semi": [
        "error",
        "always",
      ],
      "space-before-blocks": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  "handlers/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.openapi-generator-ignore-handlebars linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "handlers/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
/test-reports/
junit.xml
/coverage/
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
!/.npmignore
!/.openapi-generator-ignore
!/.openapi-generator-ignore-handlebars
!/openapitools.json
.openapi-generator
!/project.json
",
  "handlers/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "handlers/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
",
  "handlers/typescript/.openapi-generator-ignore-handlebars": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/*
**/*
*
!src/__all_handlers.ts
",
  "handlers/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/jest",
        "type": "build",
      },
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "esbuild",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "jest",
        "type": "build",
      },
      {
        "name": "jest-junit",
        "type": "build",
        "version": "^15",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "ts-jest",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "smithy-handlers-typescript-runtime",
        "type": "runtime",
        "version": "file:../../generated/runtime/typescript",
      },
    ],
  },
  "handlers/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".openapi-generator-ignore-handlebars",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "handlers/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../..",
            "exec": "npx projen default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase",
        "name": "eslint",
        "steps": [
          {
            "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../model/.api.json --output-path . --generator-dir typescript-lambda-handlers --src-dir src --smithy-json-path ../../model/build/smithyprojections/smithy-handlers-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-handlers-typescript-runtime"}' --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn link smithy-handlers-typescript-runtime",
          },
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
          {
            "exec": "mkdir -p dist/lambda && rm -rf dist/lambda/*",
          },
          {
            "exec": "esbuild --bundle src/*.ts --platform=node --outdir=dist/lambda",
          },
          {
            "exec": "for f in $(ls dist/lambda); do mkdir dist/lambda/$(basename $f .js) && mv dist/lambda/$f dist/lambda/$(basename $f .js)/index.js; done",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
        "steps": [
          {
            "exec": "jest --passWithNoTests --updateSnapshot",
            "receiveArgs": true,
          },
          {
            "spawn": "eslint",
          },
        ],
      },
      "test:watch": {
        "description": "Run jest in watch mode",
        "name": "test:watch",
        "steps": [
          {
            "exec": "jest --watch",
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='smithy-handlers-typescript-runtime'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "handlers/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "handlers/typescript/README.md": "# replace this",
  "handlers/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "handlers/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "smithy-handlers-typescript-runtime": "file:../../generated/runtime/typescript",
    },
    "devDependencies": {
      "@types/jest": "*",
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "esbuild": "*",
      "eslint": "^8",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "jest": "*",
      "jest-junit": "^15",
      "npm-check-updates": "^16",
      "projen": "*",
      "ts-jest": "*",
      "typescript": "*",
    },
    "jest": {
      "clearMocks": true,
      "collectCoverage": true,
      "coverageDirectory": "coverage",
      "coveragePathIgnorePatterns": [
        "/node_modules/",
      ],
      "coverageReporters": [
        "json",
        "lcov",
        "clover",
        "cobertura",
        "text",
      ],
      "globals": {
        "ts-jest": {
          "tsconfig": "tsconfig.dev.json",
        },
      },
      "preset": "ts-jest",
      "reporters": [
        "default",
        [
          "jest-junit",
          {
            "outputDirectory": "test-reports",
          },
        ],
      ],
      "testMatch": [
        "<rootDir>/src/**/__tests__/**/*.ts?(x)",
        "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
      ],
      "testPathIgnorePatterns": [
        "/node_modules/",
      ],
      "watchPathIgnorePatterns": [
        "/node_modules/",
      ],
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-handlers-typescript-handlers",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "eslint": "npx projen eslint",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "test:watch": "npx projen test:watch",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "handlers/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-handlers-typescript-runtime",
    ],
    "name": "smithy-handlers-typescript-handlers",
    "root": "handlers/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "handlers/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "handlers/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "handlers/typescript",
        },
      },
      "eslint": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen eslint",
          "cwd": "handlers/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "handlers/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "handlers/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "handlers/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "handlers/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "handlers/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "handlers/typescript",
        },
      },
      "test:watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test:watch",
          "cwd": "handlers/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "handlers/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "handlers/typescript",
        },
      },
    },
  },
  "handlers/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "handlers/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-handlers-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "ConfiguredHandlerProject"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                [@trait|com.test#handler: @{language} = typescript, java, python]
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @@handler language @{trait|com.test#handler|language} cannot be referenced unless a handler project is configured for this language.
                Configured handler project languages are: typescript, java, python.
                You can add this language by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have configured handler projects for typescript, java, python
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-handlers-model'
",
  "model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
@handler(language: "typescript")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With TypeScript react-query hooks library 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/libraries/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/infrastructure/README.md",
      "generated/libraries/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/libraries/typescript-react-query-hooks",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-typescript-react-query-hooks-typescript-runtime",
        "type": "runtime",
        "version": "file:../../runtime/typescript",
      },
    ],
  },
  "generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-react-query-hooks-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-typescript-react-query-hooks-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn link smithy-typescript-react-query-hooks-typescript-runtime",
          },
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='smithy-typescript-react-query-hooks-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='smithy-typescript-react-query-hooks-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='smithy-typescript-react-query-hooks-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='smithy-typescript-react-query-hooks-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='smithy-typescript-react-query-hooks-typescript-runtime'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/infrastructure/typescript/README.md": "# replace this",
  "generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-typescript-react-query-hooks-typescript-runtime": "file:../../runtime/typescript",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-typescript-react-query-hooks-typescript-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-react-query-hooks-typescript-runtime",
      "smithy-typescript-react-query-hooks-model",
    ],
    "name": "smithy-typescript-react-query-hooks-typescript-infra",
    "root": "generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "generated/infrastructure/typescript",
        },
      },
    },
  },
  "generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "generated/libraries/README.md": "## Generated Libraries

This directory contains generated libraries based on your API model.",
  "generated/libraries/typescript-react-query-hooks/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.openapi-generator-ignore-handlebars linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/libraries/typescript-react-query-hooks/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.openapi-generator-ignore
!/.openapi-generator-ignore-handlebars
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
",
  "generated/libraries/typescript-react-query-hooks/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
**/*Hooks.ts
",
  "generated/libraries/typescript-react-query-hooks/.openapi-generator-ignore-handlebars": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/*
**/*
*
!**/*Hooks.ts
",
  "generated/libraries/typescript-react-query-hooks/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@types/react",
        "type": "build",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "react",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "react",
        "type": "peer",
      },
      {
        "name": "@tanstack/react-query",
        "type": "runtime",
      },
    ],
  },
  "generated/libraries/typescript-react-query-hooks/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".openapi-generator-ignore-handlebars",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "generated/libraries/typescript-react-query-hooks/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-react-query-hooks --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-react-query-hooks-model/openapi/model/model.json --additional-properties "npmName=smithy-typescript-react-query-hooks-typescript-react-query-hooks,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/libraries/typescript-react-query-hooks/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/libraries/typescript-react-query-hooks/README.md": "# replace this",
  "generated/libraries/typescript-react-query-hooks/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/libraries/typescript-react-query-hooks/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@tanstack/react-query": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@types/react": "*",
      "npm-check-updates": "^16",
      "projen": "*",
      "react": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-typescript-react-query-hooks-typescript-react-query-hooks",
    "peerDependencies": {
      "react": "*",
    },
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/libraries/typescript-react-query-hooks/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "jsx": "react",
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/libraries/typescript-react-query-hooks/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "jsx": "react",
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-react-query-hooks-model/openapi/model/model.json --additional-properties "npmName=smithy-typescript-react-query-hooks-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-typescript-react-query-hooks-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-typescript-react-query-hooks-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-typescript-react-query-hooks-model'
",
  "model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With java Infra 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/java",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/python",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/java",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "generated/infrastructure/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
.openapi-generator
!/project.json
",
  "generated/infrastructure/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/main/java/com/generated/api/smithyjavajavainfra/infra/Api.java
!src/main/java/com/generated/api/smithyjavajavainfra/infra/ApiProps.java
!src/main/java/com/generated/api/smithyjavajavainfra/infra/MockIntegrations.java
",
  "generated/infrastructure/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.fasterxml.jackson.core/jackson-databind",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "com.generated.api/smithy-java-java-runtime",
        "type": "runtime",
        "version": "0.0.0",
      },
      {
        "name": "io.github.cdklabs/cdknag",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "io.github.cdklabs/projen",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "^1",
      },
      {
        "name": "software.amazon.awscdk/aws-cdk-lib",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "software.aws.awsprototypingsdk/type-safe-api",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "software.constructs/constructs",
        "type": "runtime",
        "version": "^10",
      },
    ],
  },
  "generated/infrastructure/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "generated/infrastructure/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java-cdk-infrastructure --src-dir src/main/java/com/generated/api/smithyjavajavainfra/infra --smithy-json-path ../../../model/build/smithyprojections/smithy-java-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-infrastructure-package":"com.generated.api.smithyjavajavainfra.infra","x-runtime-package":"com.generated.api.smithyjavajavaruntime.runtime","x-enable-mock-integrations":true}'",
          },
          {
            "exec": "mkdir -p src/main/resources",
          },
          {
            "exec": "cp -f ../../../model/.api.json src/main/resources/.api.json",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path src/main/resources",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/infrastructure/java/README.md": "# replace this",
  "generated/infrastructure/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-java-java-infra</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithyjavajavainfra</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <repositories>
        <repository>
            <url>file://../../runtime/java/dist/java</url>
            <id>com.generated.api-smithy-java-java-runtime-repo</id>
        </repository>
    </repositories>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>com.generated.api</groupId>
            <artifactId>smithy-java-java-runtime</artifactId>
            <version>0.0.0</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>cdknag</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>projen</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>[1.0.0,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.awscdk</groupId>
            <artifactId>aws-cdk-lib</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.aws.awsprototypingsdk</groupId>
            <artifactId>type-safe-api</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.constructs</groupId>
            <artifactId>constructs</artifactId>
            <version>[10.0.0,11.0.0)</version>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "generated/infrastructure/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithyjavajavaruntime",
      "smithy-java-model",
    ],
    "name": "smithyjavajavainfra",
    "root": "generated/infrastructure/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "generated/infrastructure/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "generated/infrastructure/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "generated/infrastructure/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "generated/infrastructure/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "generated/infrastructure/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "generated/infrastructure/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "generated/infrastructure/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "generated/infrastructure/java",
        },
      },
    },
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated",
  "generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
",
  "generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
    ],
  },
  "generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/smithyjavajavaruntime/runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-java-model/openapi/model/model.json --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=smithy-java-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.smithyjavajavaruntime.runtime,apiPackage=com.generated.api.smithyjavajavaruntime.runtime.api,modelPackage=com.generated.api.smithyjavajavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/java/README.md": "# replace this",
  "generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-java-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithyjavajavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pyproject.toml linguist-generated",
  "generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
smithy_java_python_runtime
docs
README.md
.openapi-generator
",
  "generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  "generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir smithy_java_python_runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-java-model/openapi/model/model.json --additional-properties "packageName=smithy_java_python_runtime,projectName=smithy-java-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "mkdir -p smithy_java_python_runtime && touch smithy_java_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/python/README.md": "# replace this",
  "generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-java-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_java_python_runtime",
  "smithy_java_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_java_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-java-model/openapi/model/model.json --additional-properties "npmName=smithy-java-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-java-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-java-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-java-model'
",
  "model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With java Infra in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "yarn nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "yarn nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "yarn nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "yarn nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "postinstall": {
        "name": "postinstall",
        "steps": [
          {
            "exec": "yarn nx run-many --target=install --output-style=stream --parallel=1 --nx-bail --projects=smithy-java-python-runtime",
          },
        ],
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "yarn nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "yarn nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "yarn npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "yarn syncpack fix-mismatches",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "yarn nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
      "yarn": ">=1 <2",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "peerDependencies": {
      "nx": "^16",
    },
    "private": true,
    "resolutions": {
      "@types/babel__traverse": "7.18.2",
      "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
      "wrap-ansi": "^7.0.0",
    },
    "scripts": {
      "build": "npx projen build",
      "clobber": "npx projen clobber",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "eject": "npx projen eject",
      "eslint": "npx projen eslint",
      "graph": "npx projen graph",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "postinstall": "npx projen postinstall",
      "pre-compile": "npx projen pre-compile",
      "run-many": "npx projen run-many",
      "synth-workspace": "yarn projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "upgrade-deps": "npx projen upgrade-deps",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/runtime/python",
        "packages/api/generated/runtime/typescript",
        "packages/api/generated/infrastructure/java",
        "packages/api/generated/runtime/java",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-java-model",
    ],
    "name": "smithy-java-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-java-model",
    ],
    "name": "smithy-java-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-java-model",
    ],
    "name": "smithy-java-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-java-model",
    ],
    "name": "smithy-java-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "packages/api/generated/infrastructure/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
.openapi-generator
!/project.json
",
  "packages/api/generated/infrastructure/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/main/java/com/generated/api/smithyjavajavainfra/infra/Api.java
!src/main/java/com/generated/api/smithyjavajavainfra/infra/ApiProps.java
!src/main/java/com/generated/api/smithyjavajavainfra/infra/MockIntegrations.java
",
  "packages/api/generated/infrastructure/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.fasterxml.jackson.core/jackson-databind",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "com.generated.api/smithy-java-java-runtime",
        "type": "runtime",
        "version": "0.0.0",
      },
      {
        "name": "io.github.cdklabs/cdknag",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "io.github.cdklabs/projen",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "^1",
      },
      {
        "name": "software.amazon.awscdk/aws-cdk-lib",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "software.aws.awsprototypingsdk/type-safe-api",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "software.constructs/constructs",
        "type": "runtime",
        "version": "^10",
      },
    ],
  },
  "packages/api/generated/infrastructure/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "packages/api/generated/infrastructure/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java-cdk-infrastructure --src-dir src/main/java/com/generated/api/smithyjavajavainfra/infra --smithy-json-path ../../../model/build/smithyprojections/smithy-java-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-infrastructure-package":"com.generated.api.smithyjavajavainfra.infra","x-runtime-package":"com.generated.api.smithyjavajavaruntime.runtime","x-enable-mock-integrations":true}'",
          },
          {
            "exec": "mkdir -p src/main/resources",
          },
          {
            "exec": "cp -f ../../../model/.api.json src/main/resources/.api.json",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path src/main/resources",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/infrastructure/java/README.md": "# replace this",
  "packages/api/generated/infrastructure/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-java-java-infra</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithyjavajavainfra</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <repositories>
        <repository>
            <url>file://../../runtime/java/dist/java</url>
            <id>com.generated.api-smithy-java-java-runtime-repo</id>
        </repository>
    </repositories>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>com.generated.api</groupId>
            <artifactId>smithy-java-java-runtime</artifactId>
            <version>0.0.0</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>cdknag</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>io.github.cdklabs</groupId>
            <artifactId>projen</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>[1.0.0,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.awscdk</groupId>
            <artifactId>aws-cdk-lib</artifactId>
            <version>[2.0.0,3.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.aws.awsprototypingsdk</groupId>
            <artifactId>type-safe-api</artifactId>
            <version>(,1.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.constructs</groupId>
            <artifactId>constructs</artifactId>
            <version>[10.0.0,11.0.0)</version>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "packages/api/generated/infrastructure/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithyjavajavaruntime",
      "smithy-java-model",
    ],
    "name": "smithyjavajavainfra",
    "root": "packages/api/generated/infrastructure/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/infrastructure/java",
        },
      },
    },
  },
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "packages/api/generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "packages/api/generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "packages/api/generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "packages/api/generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/smithyjavajavaruntime/runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-java-model/openapi/model/model.json --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=smithy-java-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.smithyjavajavaruntime.runtime,apiPackage=com.generated.api.smithyjavajavaruntime.runtime.api,modelPackage=com.generated.api.smithyjavajavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/java/README.md": "# replace this",
  "packages/api/generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-java-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithyjavajavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "packages/api/generated/runtime/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-java-model",
    ],
    "name": "smithyjavajavaruntime",
    "root": "packages/api/generated/runtime/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "packages/api/generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
smithy_java_python_runtime
docs
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "packages/api/generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "packages/api/generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "packages/api/generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir smithy_java_python_runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-java-model/openapi/model/model.json --additional-properties "packageName=smithy_java_python_runtime,projectName=smithy-java-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "env": {
          "VIRTUAL_ENV": "",
        },
        "name": "install",
        "steps": [
          {
            "exec": "unset VIRTUAL_ENV",
          },
          {
            "exec": "mkdir -p smithy_java_python_runtime && touch smithy_java_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/python/README.md": "# replace this",
  "packages/api/generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "packages/api/generated/runtime/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-java-model",
    ],
    "name": "smithy-java-python-runtime",
    "root": "packages/api/generated/runtime/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "install": {
        "dependsOn": [
          "^install",
        ],
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-java-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_java_python_runtime",
  "smithy_java_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_java_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-java-model/openapi/model/model.json --additional-properties "npmName=smithy-java-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-java-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-java-model",
    ],
    "name": "smithy-java-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "project.json",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-java-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "packages/api/model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "packages/api/model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-java-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-java-model'
",
  "packages/api/model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "packages/api/model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "packages/api/model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "packages/api/model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-java",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With npm Package Manager 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package-lock.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated",
  "generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-npm-typescript-runtime",
        "type": "runtime",
        "version": "file:../../runtime/typescript",
      },
    ],
  },
  "generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-npm-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-npm-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "npm link smithy-npm-typescript-runtime",
          },
          {
            "exec": "npm install",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "npm ci",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "npm update npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='smithy-npm-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='smithy-npm-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='smithy-npm-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='smithy-npm-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='smithy-npm-typescript-runtime'",
          },
          {
            "exec": "npm install",
          },
          {
            "exec": "npm update",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/infrastructure/typescript/README.md": "# replace this",
  "generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-npm-typescript-runtime": "file:../../runtime/typescript",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "my-ts-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-npm-typescript-runtime",
      "smithy-npm-model",
    ],
    "name": "my-ts-infra",
    "root": "generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen watch",
          "cwd": "generated/infrastructure/typescript",
        },
      },
    },
  },
  "generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-npm-model/openapi/model/model.json --additional-properties "npmName=smithy-npm-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-npm-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-npm-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-npm-model'
",
  "model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With npm Package Manager in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package-lock.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "npx nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "npx nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "npx nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "npx nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "npm install",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "npm ci",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "npx nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "npx nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "npx nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "npx nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "npx nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "npm update npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm install",
          },
          {
            "exec": "npm update",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "npx npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "npx syncpack fix-mismatches",
          },
          {
            "exec": "npm install",
          },
          {
            "exec": "npx projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "npx nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "overrides": {
      "@types/babel__traverse": "7.18.2",
      "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
      "wrap-ansi": "^7.0.0",
    },
    "peerDependencies": {
      "nx": "^16",
    },
    "private": true,
    "scripts": {
      "build": "npx projen build",
      "clobber": "npx projen clobber",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "eject": "npx projen eject",
      "eslint": "npx projen eslint",
      "graph": "npx projen graph",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "run-many": "npx projen run-many",
      "synth-workspace": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "upgrade-deps": "npx projen upgrade-deps",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/infrastructure/typescript",
        "packages/api/generated/runtime/typescript",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-npm-model",
    ],
    "name": "smithy-npm-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-npm-model",
    ],
    "name": "smithy-npm-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-npm-model",
    ],
    "name": "smithy-npm-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-npm-model",
    ],
    "name": "smithy-npm-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package-lock.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated",
  "packages/api/generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "packages/api/generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "packages/api/generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-npm-typescript-runtime",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-npm-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-npm-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "npm install",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "npm ci",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "npm update npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "npm install",
          },
          {
            "exec": "npm update",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/infrastructure/typescript/README.md": "# replace this",
  "packages/api/generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-npm-typescript-runtime": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-npm-typescript-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-npm-typescript-runtime",
      "smithy-npm-model",
    ],
    "name": "smithy-npm-typescript-infra",
    "root": "packages/api/generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen watch",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package-lock.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-npm-model/openapi/model/model.json --additional-properties "npmName=smithy-npm-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "npm install",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "npm ci",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "npm update npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "npm install",
          },
          {
            "exec": "npm update",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-npm-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-npm-model",
    ],
    "name": "smithy-npm-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "project.json",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-npm-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "packages/api/model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "packages/api/model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-npm-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-npm-model'
",
  "packages/api/model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "packages/api/model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "packages/api/model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "packages/api/model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-npm",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With pnpm Package Manager 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated",
  "generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/infrastructure/typescript/.npmrc": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

resolution-mode=highest
",
  "generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-pnpm-typescript-runtime",
        "type": "runtime",
        "version": "file:../../runtime/typescript",
      },
    ],
  },
  "generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(pnpm -c exec "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-pnpm-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-pnpm-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm link /../../runtime/typescript",
          },
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "pnpm update npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='smithy-pnpm-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='smithy-pnpm-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='smithy-pnpm-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='smithy-pnpm-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='smithy-pnpm-typescript-runtime'",
          },
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
          {
            "exec": "pnpm update",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/infrastructure/typescript/README.md": "# replace this",
  "generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-pnpm-typescript-runtime": "file:../../runtime/typescript",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "my-ts-infra",
    "pnpm": {},
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-pnpm-typescript-runtime",
      "smithy-pnpm-model",
    ],
    "name": "my-ts-infra",
    "root": "generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen build",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen default",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen generate",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen package",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen post-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen post-upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen pre-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen test",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen watch",
          "cwd": "generated/infrastructure/typescript",
        },
      },
    },
  },
  "generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-pnpm-model/openapi/model/model.json --additional-properties "npmName=smithy-pnpm-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-pnpm-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-pnpm-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-pnpm-model'
",
  "model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With pnpm Package Manager in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/pnpm-lock.yaml linguist-generated
/pnpm-workspace.yaml linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
!/pnpm-workspace.yaml
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".npmrc": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

resolution-mode=highest
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "pnpm-workspace.yaml",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(pnpm -c exec "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "pnpm exec nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "pnpm exec nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "pnpm exec nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "pnpm exec nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "pnpm exec nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "pnpm exec nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "pnpm exec nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "pnpm exec nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "pnpm exec nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "pnpm update npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
          {
            "exec": "pnpm update",
          },
          {
            "exec": "pnpm exec projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "pnpm exec npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "pnpm exec syncpack fix-mismatches",
          },
          {
            "exec": "pnpm i",
          },
          {
            "exec": "pnpm exec projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "pnpm exec nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
      "pnpm": ">=8",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "peerDependencies": {
      "nx": "^16",
    },
    "pnpm": {
      "overrides": {
        "@types/babel__traverse": "7.18.2",
        "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
        "wrap-ansi": "^7.0.0",
      },
    },
    "private": true,
    "scripts": {
      "build": "pnpm exec projen build",
      "clobber": "pnpm exec projen clobber",
      "compile": "pnpm exec projen compile",
      "default": "pnpm exec projen default",
      "eject": "pnpm exec projen eject",
      "eslint": "pnpm exec projen eslint",
      "graph": "pnpm exec projen graph",
      "package": "pnpm exec projen package",
      "post-compile": "pnpm exec projen post-compile",
      "post-upgrade": "pnpm exec projen post-upgrade",
      "pre-compile": "pnpm exec projen pre-compile",
      "run-many": "pnpm exec projen run-many",
      "synth-workspace": "pnpm exec projen",
      "test": "pnpm exec projen test",
      "upgrade": "pnpm exec projen upgrade",
      "upgrade-deps": "pnpm exec projen upgrade-deps",
      "watch": "pnpm exec projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/infrastructure/typescript",
        "packages/api/generated/runtime/typescript",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-pnpm-model",
    ],
    "name": "smithy-pnpm-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-pnpm-model",
    ],
    "name": "smithy-pnpm-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-pnpm-model",
    ],
    "name": "smithy-pnpm-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-pnpm-model",
    ],
    "name": "smithy-pnpm-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated",
  "packages/api/generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "packages/api/generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "packages/api/generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-pnpm-typescript-runtime",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(pnpm -c exec "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-pnpm-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-pnpm-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "pnpm update npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
          {
            "exec": "pnpm update",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/infrastructure/typescript/README.md": "# replace this",
  "packages/api/generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-pnpm-typescript-runtime": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-pnpm-typescript-infra",
    "pnpm": {},
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-pnpm-typescript-runtime",
      "smithy-pnpm-model",
    ],
    "name": "smithy-pnpm-typescript-infra",
    "root": "packages/api/generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen build",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen default",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen generate",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen package",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen post-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen post-upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen test",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen watch",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(pnpm -c exec "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-pnpm-model/openapi/model/model.json --additional-properties "npmName=smithy-pnpm-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "pnpm i --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "pnpm update npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "pnpm i --no-frozen-lockfile",
          },
          {
            "exec": "pnpm update",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-pnpm-typescript-runtime",
    "pnpm": {},
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-pnpm-model",
    ],
    "name": "smithy-pnpm-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm exec projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "project.json",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-pnpm-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "packages/api/model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "packages/api/model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-pnpm-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-pnpm-model'
",
  "packages/api/model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "packages/api/model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "packages/api/model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "packages/api/model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-pnpm",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "pnpm dlx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "pnpm-workspace.yaml": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

packages:
  - packages/api
  - packages/api/generated/documentation/html_redoc
  - packages/api/generated/documentation/html2
  - packages/api/generated/documentation/markdown
  - packages/api/generated/documentation/plantuml
  - packages/api/model
  - packages/api/generated/infrastructure/typescript
  - packages/api/generated/runtime/typescript
",
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With python Infra 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/java",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/python",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/python",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "generated/infrastructure/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
smithy_python_python_infra
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!smithy_python_python_infra/__init__.py
!smithy_python_python_infra/api.py
!smithy_python_python_infra/mock_integrations.py
",
  "generated/infrastructure/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws_prototyping_sdk.type_safe_api",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "constructs",
        "type": "runtime",
        "version": "^10",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "smithy-python-python-runtime",
        "type": "runtime",
        "version": "{path="../../runtime/python", develop=true}",
      },
    ],
  },
  "generated/infrastructure/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "generated/infrastructure/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python-cdk-infrastructure --src-dir smithy_python_python_infra --smithy-json-path ../../../model/build/smithyprojections/smithy-python-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-module-name":"smithy_python_python_runtime","x-relative-spec-path":"../../../../model/.api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "mkdir -p smithy_python_python_infra && touch smithy_python_python_infra/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/infrastructure/python/README.md": "# replace this",
  "generated/infrastructure/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "generated/infrastructure/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-python-python-runtime",
      "smithy-python-model",
    ],
    "name": "smithy-python-python-infra",
    "root": "generated/infrastructure/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "generated/infrastructure/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "generated/infrastructure/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "generated/infrastructure/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "generated/infrastructure/python",
        },
      },
      "install": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "generated/infrastructure/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "generated/infrastructure/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "generated/infrastructure/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "generated/infrastructure/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "generated/infrastructure/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "generated/infrastructure/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "generated/infrastructure/python",
        },
      },
    },
  },
  "generated/infrastructure/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-python-python-infra"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_python_python_infra",
  "smithy_python_python_infra/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_python_python_infra"

  [tool.poetry.dependencies]
  "aws_prototyping_sdk.type_safe_api" = "^0"
  aws-cdk-lib = "^2"
  cdk-nag = "^2"
  constructs = "^10"
  python = "^3.9"

    [tool.poetry.dependencies.smithy-python-python-runtime]
    path = "../../runtime/python"
    develop = true
",
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated",
  "generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
",
  "generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
    ],
  },
  "generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/smithypythonjavaruntime/runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-python-model/openapi/model/model.json --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=smithy-python-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.smithypythonjavaruntime.runtime,apiPackage=com.generated.api.smithypythonjavaruntime.runtime.api,modelPackage=com.generated.api.smithypythonjavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/java/README.md": "# replace this",
  "generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-python-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithypythonjavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pyproject.toml linguist-generated",
  "generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
smithy_python_python_runtime
docs
README.md
.openapi-generator
",
  "generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  "generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir smithy_python_python_runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-python-model/openapi/model/model.json --additional-properties "packageName=smithy_python_python_runtime,projectName=smithy-python-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "mkdir -p smithy_python_python_runtime && touch smithy_python_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/python/README.md": "# replace this",
  "generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-python-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_python_python_runtime",
  "smithy_python_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_python_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-python-model/openapi/model/model.json --additional-properties "npmName=smithy-python-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-python-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-python-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-python-model'
",
  "model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With python Infra in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "yarn nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "yarn nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "yarn nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "yarn nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "postinstall": {
        "name": "postinstall",
        "steps": [
          {
            "exec": "yarn nx run-many --target=install --output-style=stream --parallel=1 --nx-bail --projects=smithy-python-python-runtime,smithy-python-python-infra",
          },
        ],
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "yarn nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "yarn nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "yarn npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "yarn syncpack fix-mismatches",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "yarn nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
      "yarn": ">=1 <2",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "peerDependencies": {
      "nx": "^16",
    },
    "private": true,
    "resolutions": {
      "@types/babel__traverse": "7.18.2",
      "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
      "wrap-ansi": "^7.0.0",
    },
    "scripts": {
      "build": "npx projen build",
      "clobber": "npx projen clobber",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "eject": "npx projen eject",
      "eslint": "npx projen eslint",
      "graph": "npx projen graph",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "postinstall": "npx projen postinstall",
      "pre-compile": "npx projen pre-compile",
      "run-many": "npx projen run-many",
      "synth-workspace": "yarn projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "upgrade-deps": "npx projen upgrade-deps",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/infrastructure/python",
        "packages/api/generated/runtime/python",
        "packages/api/generated/runtime/typescript",
        "packages/api/generated/runtime/java",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-python-model",
    ],
    "name": "smithy-python-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-python-model",
    ],
    "name": "smithy-python-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-python-model",
    ],
    "name": "smithy-python-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-python-model",
    ],
    "name": "smithy-python-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "packages/api/generated/infrastructure/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
smithy_python_python_infra
.openapi-generator
mocks
!/project.json
",
  "packages/api/generated/infrastructure/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!smithy_python_python_infra/__init__.py
!smithy_python_python_infra/api.py
!smithy_python_python_infra/mock_integrations.py
",
  "packages/api/generated/infrastructure/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws_prototyping_sdk.type_safe_api",
        "type": "runtime",
        "version": "^0",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
        "version": "^2",
      },
      {
        "name": "constructs",
        "type": "runtime",
        "version": "^10",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "smithy-python-python-runtime",
        "type": "runtime",
        "version": "{path="../../runtime/python", develop=true}",
      },
    ],
  },
  "packages/api/generated/infrastructure/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "packages/api/generated/infrastructure/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python-cdk-infrastructure --src-dir smithy_python_python_infra --smithy-json-path ../../../model/build/smithyprojections/smithy-python-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-module-name":"smithy_python_python_runtime","x-relative-spec-path":"../../../../model/.api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "env": {
          "VIRTUAL_ENV": "",
        },
        "name": "install",
        "steps": [
          {
            "exec": "unset VIRTUAL_ENV",
          },
          {
            "exec": "mkdir -p smithy_python_python_infra && touch smithy_python_python_infra/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/infrastructure/python/README.md": "# replace this",
  "packages/api/generated/infrastructure/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "packages/api/generated/infrastructure/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-python-python-runtime",
      "smithy-python-model",
    ],
    "name": "smithy-python-python-infra",
    "root": "packages/api/generated/infrastructure/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "install": {
        "dependsOn": [
          "^install",
        ],
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/infrastructure/python",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-python-python-infra"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_python_python_infra",
  "smithy_python_python_infra/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_python_python_infra"

  [tool.poetry.dependencies]
  "aws_prototyping_sdk.type_safe_api" = "^0"
  aws-cdk-lib = "^2"
  cdk-nag = "^2"
  constructs = "^10"
  python = "^3.9"

    [tool.poetry.dependencies.smithy-python-python-runtime]
    path = "../../runtime/python"
    develop = true
",
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "packages/api/generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "packages/api/generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "packages/api/generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "packages/api/generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/smithypythonjavaruntime/runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-python-model/openapi/model/model.json --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=smithy-python-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.smithypythonjavaruntime.runtime,apiPackage=com.generated.api.smithypythonjavaruntime.runtime.api,modelPackage=com.generated.api.smithypythonjavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/java/README.md": "# replace this",
  "packages/api/generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-python-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithypythonjavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "packages/api/generated/runtime/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-python-model",
    ],
    "name": "smithypythonjavaruntime",
    "root": "packages/api/generated/runtime/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "packages/api/generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
smithy_python_python_runtime
docs
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "packages/api/generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "packages/api/generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "packages/api/generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir smithy_python_python_runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-python-model/openapi/model/model.json --additional-properties "packageName=smithy_python_python_runtime,projectName=smithy-python-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "env": {
          "VIRTUAL_ENV": "",
        },
        "name": "install",
        "steps": [
          {
            "exec": "unset VIRTUAL_ENV",
          },
          {
            "exec": "mkdir -p smithy_python_python_runtime && touch smithy_python_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/python/README.md": "# replace this",
  "packages/api/generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "packages/api/generated/runtime/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-python-model",
    ],
    "name": "smithy-python-python-runtime",
    "root": "packages/api/generated/runtime/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "install": {
        "dependsOn": [
          "^install",
        ],
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-python-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_python_python_runtime",
  "smithy_python_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_python_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-python-model/openapi/model/model.json --additional-properties "npmName=smithy-python-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-python-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-python-model",
    ],
    "name": "smithy-python-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "project.json",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-python-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "packages/api/model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "packages/api/model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-python-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-python-model'
",
  "packages/api/model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "packages/api/model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "packages/api/model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "packages/api/model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-python",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With typescript Infra 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/java",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/python",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-typescript-typescript-runtime",
        "type": "runtime",
        "version": "file:../../runtime/typescript",
      },
    ],
  },
  "generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-typescript-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn link smithy-typescript-typescript-runtime",
          },
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='smithy-typescript-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='smithy-typescript-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='smithy-typescript-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='smithy-typescript-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='smithy-typescript-typescript-runtime'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/infrastructure/typescript/README.md": "# replace this",
  "generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-typescript-typescript-runtime": "file:../../runtime/typescript",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-typescript-typescript-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-typescript-runtime",
      "smithy-typescript-model",
    ],
    "name": "smithy-typescript-typescript-infra",
    "root": "generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "generated/infrastructure/typescript",
        },
      },
    },
  },
  "generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated",
  "generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
",
  "generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
    ],
  },
  "generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/smithytypescriptjavaruntime/runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-model/openapi/model/model.json --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=smithy-typescript-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.smithytypescriptjavaruntime.runtime,apiPackage=com.generated.api.smithytypescriptjavaruntime.runtime.api,modelPackage=com.generated.api.smithytypescriptjavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/java/README.md": "# replace this",
  "generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-typescript-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithytypescriptjavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pyproject.toml linguist-generated",
  "generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
smithy_typescript_python_runtime
docs
README.md
.openapi-generator
",
  "generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  "generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir smithy_typescript_python_runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-model/openapi/model/model.json --additional-properties "packageName=smithy_typescript_python_runtime,projectName=smithy-typescript-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "mkdir -p smithy_typescript_python_runtime && touch smithy_typescript_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/runtime/python/README.md": "# replace this",
  "generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-typescript-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_typescript_python_runtime",
  "smithy_typescript_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_typescript_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-model/openapi/model/model.json --additional-properties "npmName=smithy-typescript-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-typescript-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-typescript-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-typescript-model'
",
  "model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With typescript Infra in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "yarn nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "yarn nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "yarn nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "yarn nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "postinstall": {
        "name": "postinstall",
        "steps": [
          {
            "exec": "yarn nx run-many --target=install --output-style=stream --parallel=1 --nx-bail --projects=smithy-typescript-python-runtime",
          },
        ],
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "yarn nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "yarn nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "yarn npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "yarn syncpack fix-mismatches",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "yarn nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
      "yarn": ">=1 <2",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "peerDependencies": {
      "nx": "^16",
    },
    "private": true,
    "resolutions": {
      "@types/babel__traverse": "7.18.2",
      "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
      "wrap-ansi": "^7.0.0",
    },
    "scripts": {
      "build": "npx projen build",
      "clobber": "npx projen clobber",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "eject": "npx projen eject",
      "eslint": "npx projen eslint",
      "graph": "npx projen graph",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "postinstall": "npx projen postinstall",
      "pre-compile": "npx projen pre-compile",
      "run-many": "npx projen run-many",
      "synth-workspace": "yarn projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "upgrade-deps": "npx projen upgrade-deps",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/runtime/python",
        "packages/api/generated/infrastructure/typescript",
        "packages/api/generated/runtime/typescript",
        "packages/api/generated/runtime/java",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-model",
    ],
    "name": "smithy-typescript-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-model",
    ],
    "name": "smithy-typescript-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-model",
    ],
    "name": "smithy-typescript-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-model",
    ],
    "name": "smithy-typescript-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "packages/api/generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "packages/api/generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-typescript-typescript-runtime",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-typescript-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/infrastructure/typescript/README.md": "# replace this",
  "packages/api/generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-typescript-typescript-runtime": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-typescript-typescript-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-typescript-runtime",
      "smithy-typescript-model",
    ],
    "name": "smithy-typescript-typescript-infra",
    "root": "packages/api/generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/java/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/pom.xml linguist-generated
/project.json linguist-generated",
  "packages/api/generated/runtime/java/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pom.xml
.classpath
.project
.settings
target
dist/java
!/.openapi-generator-ignore
!/openapitools.json
src
docs
api
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/java/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
pom.xml
gradle
gradle/**/*
gradlew
gradle.properties
gradlew.bat
build.gradle
settings.gradle
build.sbt
.travis.yml
git_push.sh
src/test
src/test/**/*
src/main/AndroidManifest.xml
",
  "packages/api/generated/runtime/java/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "metadata": {
          "configuration": {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      {
        "metadata": {
          "configuration": {
            "rules": [
              {
                "requireMavenVersion": [
                  {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": [
            {
              "goals": [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      {
        "metadata": {
          "configuration": {
            "archive": {
              "index": true,
              "manifest": {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "configuration": {
            "additionalJOptions": {
              "additionalJOption": [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      {
        "metadata": {
          "executions": [
            {
              "goals": [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-core",
        "type": "runtime",
        "version": "1.2.1",
      },
      {
        "name": "com.amazonaws/aws-lambda-java-events",
        "type": "runtime",
        "version": "3.11.0",
      },
      {
        "name": "com.google.code.findbugs/jsr305",
        "type": "runtime",
        "version": "3.0.2",
      },
      {
        "name": "com.google.code.gson/gson",
        "type": "runtime",
        "version": "2.9.1",
      },
      {
        "name": "com.squareup.okhttp3/logging-interceptor",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "com.squareup.okhttp3/okhttp",
        "type": "runtime",
        "version": "4.10.0",
      },
      {
        "name": "io.gsonfire/gson-fire",
        "type": "runtime",
        "version": "1.8.5",
      },
      {
        "name": "io.swagger/swagger-annotations",
        "type": "runtime",
        "version": "1.6.8",
      },
      {
        "name": "jakarta.annotation/jakarta.annotation-api",
        "type": "runtime",
        "version": "1.3.5",
      },
      {
        "name": "javax.ws.rs/javax.ws.rs-api",
        "type": "runtime",
        "version": "2.1.1",
      },
      {
        "name": "javax.ws.rs/jsr311-api",
        "type": "runtime",
        "version": "1.1.1",
      },
      {
        "name": "org.apache.commons/commons-lang3",
        "type": "runtime",
        "version": "3.12.0",
      },
      {
        "name": "org.openapitools/jackson-databind-nullable",
        "type": "runtime",
        "version": "0.2.4",
      },
      {
        "name": "org.projectlombok/lombok",
        "type": "runtime",
        "version": "1.18.24",
      },
      {
        "name": "software.amazon.lambda/powertools-logging",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-metrics",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "software.amazon.lambda/powertools-tracing",
        "type": "runtime",
        "version": "^1.16.1",
      },
      {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.9.1",
      },
      {
        "name": "org.mockito/mockito-core",
        "type": "test",
        "version": "3.12.4",
      },
    ],
  },
  "packages/api/generated/runtime/java/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "pom.xml",
      "project.json",
    ],
  },
  "packages/api/generated/runtime/java/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator java --spec-path ../../../model/.api.json --output-path . --generator-dir java --src-dir src/main/java/com/generated/api/smithytypescriptjavaruntime/runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-model/openapi/model/model.json --additional-properties "useSingleRequestParameter=true,groupId=com.generated.api,artifactId=smithy-typescript-java-runtime,artifactVersion=0.0.0,invokerPackage=com.generated.api.smithytypescriptjavaruntime.runtime,apiPackage=com.generated.api.smithytypescriptjavaruntime.runtime.api,modelPackage=com.generated.api.smithytypescriptjavaruntime.runtime.model,hideGenerationTimestamp=true,additionalModelTypeAnnotations=@lombok.AllArgsConstructor\\ @lombok.experimental.SuperBuilder" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true"",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "env": {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/java",
          },
          {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/java/README.md": "# replace this",
  "packages/api/generated/runtime/java/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/java/pom.xml": "<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.generated.api</groupId>
    <artifactId>smithy-typescript-java-runtime</artifactId>
    <version>0.0.0</version>
    <packaging>jar</packaging>
    <name>smithytypescriptjavaruntime</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-events</artifactId>
            <version>3.11.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.9.1</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>logging-interceptor</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.10.0</version>
        </dependency>
        <dependency>
            <groupId>io.gsonfire</groupId>
            <artifactId>gson-fire</artifactId>
            <version>1.8.5</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>1.6.8</version>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <version>1.3.5</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-logging</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-metrics</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.lambda</groupId>
            <artifactId>powertools-tracing</artifactId>
            <version>[1.16.1,2.0.0)</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.12.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen". -->",
  "packages/api/generated/runtime/java/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-model",
    ],
    "name": "smithytypescriptjavaruntime",
    "root": "packages/api/generated/runtime/java",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/java",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/openapitools.json linguist-generated
/project.json linguist-generated
/pyproject.toml linguist-generated",
  "packages/api/generated/runtime/python/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
!/openapitools.json
smithy_typescript_python_runtime
docs
README.md
.openapi-generator
!/project.json
",
  "packages/api/generated/runtime/python/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  "packages/api/generated/runtime/python/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "aws-lambda-powertools",
        "type": "runtime",
        "version": "{extras=["all"],version="^2.23.0"}",
      },
      {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      {
        "name": "python",
        "type": "runtime",
        "version": "^3.9",
      },
      {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "^4.6.2",
      },
      {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  "packages/api/generated/runtime/python/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "poetry.toml",
      "project.json",
      "pyproject.toml",
    ],
  },
  "packages/api/generated/runtime/python/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator python --spec-path ../../../model/.api.json --output-path . --generator-dir python --src-dir smithy_typescript_python_runtime --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-model/openapi/model/model.json --additional-properties "packageName=smithy_typescript_python_runtime,projectName=smithy-typescript-python-runtime" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "env": {
          "VIRTUAL_ENV": "",
        },
        "name": "install",
        "steps": [
          {
            "exec": "unset VIRTUAL_ENV",
          },
          {
            "exec": "mkdir -p smithy_typescript_python_runtime && touch smithy_typescript_python_runtime/__init__.py",
          },
          {
            "exec": "poetry update",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/runtime/python/README.md": "# replace this",
  "packages/api/generated/runtime/python/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/python/poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "packages/api/generated/runtime/python/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-model",
    ],
    "name": "smithy-typescript-python-runtime",
    "root": "packages/api/generated/runtime/python",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "install": {
        "dependsOn": [
          "^install",
        ],
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen install",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "publish:test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen publish:test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/runtime/python",
        },
      },
    },
  },
  "packages/api/generated/runtime/python/pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

[build-system]
requires = [ "poetry_core>=1.0.0" ]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "smithy-typescript-python-runtime"
version = "0.0.0"
description = ""
authors = [ "APJ Cope <apj-cope@amazon.com>" ]
readme = "README.md"
include = [
  "smithy_typescript_python_runtime",
  "smithy_typescript_python_runtime/**/*.py"
]
dev-dependencies = { }

  [[tool.poetry.packages]]
  include = "smithy_typescript_python_runtime"

  [tool.poetry.dependencies]
  certifi = "^14.5.14"
  frozendict = "~2.3.4"
  python-dateutil = "~2.7.0"
  python = "^3.9"
  setuptools = "^21.0.0"
  typing_extensions = "^4.6.2"
  urllib3 = "~1.26.7"

    [tool.poetry.dependencies.aws-lambda-powertools]
    extras = [ "all" ]
    version = "^2.23.0"
",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-typescript-model/openapi/model/model.json --additional-properties "npmName=smithy-typescript-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-typescript-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-typescript-model",
    ],
    "name": "smithy-typescript-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "project.json",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-typescript-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "packages/api/model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "packages/api/model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-typescript-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-typescript-model'
",
  "packages/api/model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "packages/api/model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "packages/api/model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "packages/api/model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-typescript",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With yarn Package Manager 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-yarn-typescript-runtime",
        "type": "runtime",
        "version": "file:../../runtime/typescript",
      },
    ],
  },
  "generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-yarn-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-yarn-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn link smithy-yarn-typescript-runtime",
          },
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='smithy-yarn-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='smithy-yarn-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='smithy-yarn-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='smithy-yarn-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='smithy-yarn-typescript-runtime'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/infrastructure/typescript/README.md": "# replace this",
  "generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-yarn-typescript-runtime": "file:../../runtime/typescript",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "my-ts-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn-typescript-runtime",
      "smithy-yarn-model",
    ],
    "name": "my-ts-infra",
    "root": "generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "generated/infrastructure/typescript",
        },
      },
    },
  },
  "generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-yarn-model/openapi/model/model.json --additional-properties "npmName=smithy-yarn-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-yarn-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-yarn-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-yarn-model'
",
  "model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With yarn Package Manager in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "yarn nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "yarn nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "yarn nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "yarn nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "yarn nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "yarn nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "yarn nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "yarn projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "yarn npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "yarn syncpack fix-mismatches",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "yarn nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
      "yarn": ">=1 <2",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "peerDependencies": {
      "nx": "^16",
    },
    "private": true,
    "resolutions": {
      "@types/babel__traverse": "7.18.2",
      "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
      "wrap-ansi": "^7.0.0",
    },
    "scripts": {
      "build": "yarn projen build",
      "clobber": "yarn projen clobber",
      "compile": "yarn projen compile",
      "default": "yarn projen default",
      "eject": "yarn projen eject",
      "eslint": "yarn projen eslint",
      "graph": "yarn projen graph",
      "package": "yarn projen package",
      "post-compile": "yarn projen post-compile",
      "post-upgrade": "yarn projen post-upgrade",
      "pre-compile": "yarn projen pre-compile",
      "run-many": "yarn projen run-many",
      "synth-workspace": "yarn projen",
      "test": "yarn projen test",
      "upgrade": "yarn projen upgrade",
      "upgrade-deps": "yarn projen upgrade-deps",
      "watch": "yarn projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/infrastructure/typescript",
        "packages/api/generated/runtime/typescript",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn-model",
    ],
    "name": "smithy-yarn-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn-model",
    ],
    "name": "smithy-yarn-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn-model",
    ],
    "name": "smithy-yarn-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn-model",
    ],
    "name": "smithy-yarn-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "packages/api/generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "packages/api/generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-yarn-typescript-runtime",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-yarn-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-yarn-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/infrastructure/typescript/README.md": "# replace this",
  "packages/api/generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-yarn-typescript-runtime": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-yarn-typescript-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn-typescript-runtime",
      "smithy-yarn-model",
    ],
    "name": "smithy-yarn-typescript-infra",
    "root": "packages/api/generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-yarn-model/openapi/model/model.json --additional-properties "npmName=smithy-yarn-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-yarn-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn-model",
    ],
    "name": "smithy-yarn-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "project.json",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-yarn-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "packages/api/model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "packages/api/model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-yarn-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-yarn-model'
",
  "packages/api/model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "packages/api/model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "packages/api/model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "packages/api/model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-yarn",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "npx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With yarn2 Package Manager 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/generated/runtime/README.md
!/generated/documentation/README.md
!/handlers/README.md
!/generated/infrastructure/README.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "generated/documentation/README.md",
      "generated/infrastructure/README.md",
      "generated/runtime/README.md",
      "handlers/README.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "cwd": "model",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/runtime/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/infrastructure/typescript",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html2",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/markdown",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/plantuml",
            "exec": "npx projen build",
          },
          {
            "cwd": "generated/documentation/html_redoc",
            "exec": "npx projen build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
",
  "generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
",
  "generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
",
  "generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
",
  "generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
    ],
  },
  "generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-yarn2-typescript-runtime",
        "type": "runtime",
        "version": "file:../../runtime/typescript",
      },
    ],
  },
  "generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-yarn2-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-yarn2-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn2 link smithy-yarn2-typescript-runtime",
          },
          {
            "exec": "yarn install",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --immutable",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='smithy-yarn2-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='smithy-yarn2-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='smithy-yarn2-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='smithy-yarn2-typescript-runtime'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='smithy-yarn2-typescript-runtime'",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/infrastructure/typescript/README.md": "# replace this",
  "generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-yarn2-typescript-runtime": "file:../../runtime/typescript",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "my-ts-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn2-typescript-runtime",
      "smithy-yarn2-model",
    ],
    "name": "my-ts-infra",
    "root": "generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen build",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen default",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen generate",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen package",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen post-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen post-upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen pre-compile",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen test",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen upgrade",
          "cwd": "generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen watch",
          "cwd": "generated/infrastructure/typescript",
        },
      },
    },
  },
  "generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
",
  "generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "../../..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-yarn2-model/openapi/model/model.json --additional-properties "npmName=smithy-yarn2-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn link",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --check-files --frozen-lockfile",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install --check-files",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "generated/runtime/typescript/README.md": "# replace this",
  "generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-yarn2-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  "model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "cwd": "..",
            "exec": "npx projen default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-yarn2-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-yarn2-model'
",
  "model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Project Unit Tests Smithy With yarn2 Package Manager in Monorepo 1`] = `
{
  ".eslintrc.json": {
    "env": {
      "jest": true,
      "node": true,
    },
    "extends": [
      "plugin:import/typescript",
      "prettier",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": [
      "packages/**/*.*",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": [
      {
        "files": [
          ".projenrc.ts",
        ],
        "rules": {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": [
      "@typescript-eslint",
      "import",
      "prettier",
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": [
        "error",
      ],
      "@typescript-eslint/no-require-imports": [
        "error",
      ],
      "@typescript-eslint/no-shadow": [
        "error",
      ],
      "@typescript-eslint/return-await": [
        "error",
      ],
      "dot-notation": [
        "error",
      ],
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": [
        "error",
      ],
      "import/order": [
        "warn",
        {
          "alphabetize": {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": [
        "error",
      ],
      "no-bitwise": [
        "error",
      ],
      "no-duplicate-imports": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
      ],
      "no-return-await": [
        "off",
      ],
      "no-shadow": [
        "off",
      ],
      "no-trailing-spaces": [
        "error",
      ],
      "prettier/prettier": [
        "error",
      ],
    },
    "settings": {
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": {
        "node": {},
        "typescript": {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.nxignore linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.syncpackrc.json linguist-generated
/LICENSE linguist-generated
/nx.json linguist-generated
/package.json linguist-generated
/packages/api/generated/documentation/README.md linguist-generated
/packages/api/generated/infrastructure/README.md linguist-generated
/packages/api/generated/runtime/README.md linguist-generated
/packages/api/handlers/README.md linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
.tmp
!/.projenrc.js
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.nx/cache
!/nx.json
!/.nxignore
.yarn/*
.pnp.cjs
!.yarn/releases
!.yarn/plugins
!/.syncpackrc.json
!/packages/api/generated/runtime/README.md
!/packages/api/generated/documentation/README.md
!/packages/api/handlers/README.md
!/packages/api/generated/infrastructure/README.md
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
/.projen/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
",
  ".nxignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
.tmp
.env
.pytest_cache
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".
",
  ".prettierrc.json": {
    "overrides": [],
  },
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^5",
      },
      {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-node",
        "type": "build",
      },
      {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
      },
      {
        "name": "nx",
        "type": "build",
        "version": "16.0.0",
      },
      {
        "name": "prettier",
        "type": "build",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "syncpack",
        "type": "build",
      },
      {
        "name": "ts-node",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@types/babel__traverse",
        "type": "override",
        "version": "7.18.2",
      },
      {
        "name": "@zkochan/js-yaml",
        "type": "override",
        "version": "npm:js-yaml@4.1.0",
      },
      {
        "name": "wrap-ansi",
        "type": "override",
        "version": "^7.0.0",
      },
      {
        "name": "nx",
        "type": "peer",
        "version": "^16",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "files": [
      ".eslintrc.json",
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".npmrc",
      ".nxignore",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".syncpackrc.json",
      "LICENSE",
      "nx.json",
      "packages/api/generated/documentation/README.md",
      "packages/api/generated/infrastructure/README.md",
      "packages/api/generated/runtime/README.md",
      "packages/api/handlers/README.md",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build for all affected projects",
        "name": "build",
        "steps": [
          {
            "exec": "yarn exec nx run-many --target=build --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "clobber": {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": [
          {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in "scratch" branch",
          },
          {
            "exec": "git checkout $BRANCH",
          },
          {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          {
            "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
          },
        ],
      },
      "compile": {
        "description": "Only compile for all affected projects",
        "name": "compile",
        "steps": [
          {
            "exec": "yarn exec nx run-many --target=compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "eslint": {
        "description": "Runs eslint against the codebase for all affected projects",
        "name": "eslint",
        "steps": [
          {
            "exec": "yarn exec nx run-many --target=eslint --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "graph": {
        "description": "Generate dependency graph for monorepo",
        "name": "graph",
        "steps": [
          {
            "exec": "yarn exec nx graph",
            "receiveArgs": true,
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --immutable",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package for all affected projects",
        "name": "package",
        "steps": [
          {
            "exec": "yarn exec nx run-many --target=package --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation for all affected projects",
        "name": "post-compile",
        "steps": [
          {
            "exec": "yarn exec nx run-many --target=post-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation for all affected projects",
        "name": "pre-compile",
        "steps": [
          {
            "exec": "yarn exec nx run-many --target=pre-compile --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "run-many": {
        "description": "Run task against multiple workspace projects",
        "name": "run-many",
        "steps": [
          {
            "exec": "yarn exec nx run-many",
            "receiveArgs": true,
          },
        ],
      },
      "test": {
        "description": "Run tests for all affected projects",
        "name": "test",
        "steps": [
          {
            "exec": "yarn exec nx run-many --target=test --output-style=stream --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='nx'",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "yarn exec projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "upgrade-deps": {
        "name": "upgrade-deps",
        "steps": [
          {
            "exec": "yarn exec npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor",
          },
          {
            "exec": "yarn exec syncpack fix-mismatches",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn exec projen",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background for all affected projects",
        "name": "watch",
        "steps": [
          {
            "exec": "yarn exec nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
            "receiveArgs": true,
          },
        ],
      },
    },
  },
  ".syncpackrc.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencyTypes": [],
    "dev": true,
    "filter": ".",
    "indent": "  ",
    "overrides": true,
    "peer": true,
    "pnpmOverrides": true,
    "prod": true,
    "resolutions": true,
    "semverGroups": [],
    "semverRange": "",
    "sortAz": [
      "contributors",
      "dependencies",
      "devDependencies",
      "keywords",
      "peerDependencies",
      "resolutions",
      "scripts",
    ],
    "sortFirst": [
      "name",
      "description",
      "version",
      "author",
    ],
    "source": [],
    "versionGroups": [],
    "workspace": true,
  },
  "LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "README.md": "# replace this",
  "nx.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "affected": {
      "defaultBase": "main",
    },
    "extends": "nx/presets/npm.json",
    "namedInputs": {
      "default": [
        "{projectRoot}/**/*",
      ],
    },
    "npmScope": "monorepo",
    "targetDefaults": {
      "build": {
        "dependsOn": [
          "^build",
        ],
        "inputs": [
          "default",
          "^default",
        ],
        "outputs": [
          "{projectRoot}/dist",
          "{projectRoot}/lib",
          "{projectRoot}/build",
          "{projectRoot}/coverage",
          "{projectRoot}/test-reports",
          "{projectRoot}/target",
          "{projectRoot}/cdk.out",
          "{projectRoot}/LICENSE_THIRD_PARTY",
          "{projectRoot}/.jsii",
        ],
      },
    },
    "tasksRunnerOptions": {
      "default": {
        "options": {
          "cacheableOperations": [
            "build",
            "test",
          ],
          "useDaemonProcess": false,
        },
        "runner": "nx/tasks-runners/default",
      },
    },
  },
  "package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".",
    "dependencies": {
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "@typescript-eslint/eslint-plugin": "^5",
      "@typescript-eslint/parser": "^5",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-node": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "npm-check-updates": "*",
      "nx": "16.0.0",
      "prettier": "*",
      "projen": "*",
      "syncpack": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "engines": {
      "node": ">=16",
      "yarn": ">=2",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "monorepo",
    "peerDependencies": {
      "nx": "^16",
    },
    "private": true,
    "resolutions": {
      "@types/babel__traverse": "7.18.2",
      "@zkochan/js-yaml": "npm:js-yaml@4.1.0",
      "wrap-ansi": "^7.0.0",
    },
    "scripts": {
      "build": "yarn exec projen build",
      "clobber": "yarn exec projen clobber",
      "compile": "yarn exec projen compile",
      "default": "yarn exec projen default",
      "eject": "yarn exec projen eject",
      "eslint": "yarn exec projen eslint",
      "graph": "yarn exec projen graph",
      "package": "yarn exec projen package",
      "post-compile": "yarn exec projen post-compile",
      "post-upgrade": "yarn exec projen post-upgrade",
      "pre-compile": "yarn exec projen pre-compile",
      "run-many": "yarn exec projen run-many",
      "synth-workspace": "yarn exec projen",
      "test": "yarn exec projen test",
      "upgrade": "yarn exec projen upgrade",
      "upgrade-deps": "yarn exec projen upgrade-deps",
      "watch": "yarn exec projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
    "workspaces": {
      "packages": [
        "packages/api",
        "packages/api/generated/documentation/html_redoc",
        "packages/api/generated/documentation/html2",
        "packages/api/generated/documentation/markdown",
        "packages/api/generated/documentation/plantuml",
        "packages/api/model",
        "packages/api/generated/infrastructure/typescript",
        "packages/api/generated/runtime/typescript",
      ],
    },
  },
  "packages/api/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/project.json
",
  "packages/api/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "project.json",
    ],
  },
  "packages/api/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/README.md": "# Type Safe API

This project contains an API built with [Type Safe API](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).

## Project Structure

This project consists of the following components:

### Model

The \`model\` folder contains the API model, which defines the API operations and their inputs and outputs. For more details, please refer to the [model project README](./model/README.md).

### Runtime

The \`runtime\` folder contains subprojects for each of the selected runtime languages. These projects include types as well as client and server code, generated from the model.

### Infrastructure

The \`infrastructure\` folder contains a subproject for the selected infrastructure language. This includes a CDK construct which defines the API Gateway resources to deploy the API defined by the model.

### Documentation

The \`documentation\` folder contains documentation generated from the model, for each of the selected documentation formats.

## Adding Operations

This section describes the steps required to add a new operation to your API.

### Define the Operation

The API operations are defined by the API model. Please see the [model project README](./model/README.md) for instructions for the specific model language used.

### Build the Project

Next, build the project using the project's build command. This will vary depending on the overall project setup, and is likely documented in the top level README.

The build will trigger regeneration of the \`runtime\`, \`infrastructure\` and \`documentation\` projects, which will include your new operation.

### Add an Integration

If you are using the CDK construct defined in the \`infrastructure\` folder, you likely encountered a type error in your CDK project, since the construct requires an integration for every operation defined in the model.

Please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api) for details about how to add integrations in your chosen infrastructure language.

### Implement the Operation

Finally, you'll need to implement the operation. If using AWS Lambda for your API integrations, you can make use of the generated lambda handler wrappers from one of the \`runtime\` projects. These wrappers provide typed interfaces for operations, providing auto-complete in your IDE for inputs, and ensuring you return the output (or one of the errors) defined in the model.

For more details about using the handler wrappers in the various supported languages, please refer to the [Type Safe API documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api).
",
  "packages/api/generated/documentation/README.md": "## Generated Documentation

This directory contains generated documentation based on your API model.",
  "packages/api/generated/documentation/html2/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
index.html
!/project.json
",
  "packages/api/generated/documentation/html2/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html2/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator html2 --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html2/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html2/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn2-model",
    ],
    "name": "smithy-yarn2-documentation-html2",
    "root": "packages/api/generated/documentation/html2",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen build",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen default",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen generate",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen package",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen post-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen test",
          "cwd": "packages/api/generated/documentation/html2",
        },
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
index.html
!/project.json
",
  "packages/api/generated/documentation/html_redoc/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/html_redoc/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-html-redoc-docs --spec-path ../../../model/.api.json --output-path .",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/html_redoc/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/html_redoc/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn2-model",
    ],
    "name": "smithy-yarn2-documentation-html-redoc",
    "root": "packages/api/generated/documentation/html_redoc",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen build",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen default",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen generate",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen package",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen post-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen pre-compile",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen test",
          "cwd": "packages/api/generated/documentation/html_redoc",
        },
      },
    },
  },
  "packages/api/generated/documentation/markdown/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
Apis
Models
README.md
!/project.json
",
  "packages/api/generated/documentation/markdown/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/markdown/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator markdown --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/markdown/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/markdown/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn2-model",
    ],
    "name": "smithy-yarn2-documentation-markdown",
    "root": "packages/api/generated/documentation/markdown",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen build",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen default",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen generate",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen package",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen post-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen pre-compile",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen test",
          "cwd": "packages/api/generated/documentation/markdown",
        },
      },
    },
  },
  "packages/api/generated/documentation/plantuml/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/openapitools.json
.openapi-generator
schemas.plantuml
!/project.json
",
  "packages/api/generated/documentation/plantuml/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "openapitools.json",
      "project.json",
    ],
  },
  "packages/api/generated/documentation/plantuml/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator plantuml --spec-path ../../../model/.api.json --output-path . --generator-dir docs --src-dir src --generate-alias-as-model",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/generated/documentation/plantuml/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/documentation/plantuml/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn2-model",
    ],
    "name": "smithy-yarn2-documentation-plantuml",
    "root": "packages/api/generated/documentation/plantuml",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen build",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen default",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen generate",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen package",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen post-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen pre-compile",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen test",
          "cwd": "packages/api/generated/documentation/plantuml",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/README.md": "## Generated Infrastructure

This directory contains a generated type-safe CDK construct which will can the API gateway infrastructure for an API based on your model.",
  "packages/api/generated/infrastructure/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/infrastructure/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
/assets/api.json
src
.openapi-generator
mocks
!/project.json
",
  "packages/api/generated/infrastructure/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/infrastructure/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
/*
**/*
*
!src/index.ts
!src/api.ts
!src/mock-integrations.ts
",
  "packages/api/generated/infrastructure/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-prototyping-sdk/type-safe-api",
        "type": "runtime",
      },
      {
        "name": "aws-cdk-lib",
        "type": "runtime",
      },
      {
        "name": "cdk-nag",
        "type": "runtime",
      },
      {
        "name": "constructs",
        "type": "runtime",
      },
      {
        "name": "smithy-yarn2-typescript-runtime",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/infrastructure/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript-cdk-infrastructure --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-yarn2-model/openapi/model/model.json --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --extra-vendor-extensions '{"x-runtime-package-name":"smithy-yarn2-typescript-runtime","x-relative-spec-path":"../assets/api.json","x-enable-mock-integrations":true}' --generate-alias-as-model",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate-mock-data --spec-path ../../../model/.api.json --output-path .",
          },
          {
            "exec": "mkdir -p assets",
          },
          {
            "exec": "cp -f ../../../model/.api.json assets/api.json",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --immutable",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/infrastructure/typescript/README.md": "# replace this",
  "packages/api/generated/infrastructure/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/infrastructure/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-prototyping-sdk/type-safe-api": "*",
      "aws-cdk-lib": "*",
      "cdk-nag": "*",
      "constructs": "*",
      "smithy-yarn2-typescript-runtime": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-yarn2-typescript-infra",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/infrastructure/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn2-typescript-runtime",
      "smithy-yarn2-model",
    ],
    "name": "smithy-yarn2-typescript-infra",
    "root": "packages/api/generated/infrastructure/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen build",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen default",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen generate",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen package",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen post-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen post-upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen pre-compile",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen test",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen upgrade",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen watch",
          "cwd": "packages/api/generated/infrastructure/typescript",
        },
      },
    },
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/infrastructure/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/README.md": "## Generated Runtimes

This directory contains generated runtime projects based on your API model.

Each runtime project includes types from your API model, as well as type-safe client and server code.",
  "packages/api/generated/runtime/typescript/.gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/LICENSE linguist-generated
/openapitools.json linguist-generated
/package.json linguist-generated
/project.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.esm.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated",
  "packages/api/generated/runtime/typescript/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.npmignore
!/.openapi-generator-ignore
!/openapitools.json
src
.npmignore
README.md
.openapi-generator
!/tsconfig.esm.json
!/project.json
",
  "packages/api/generated/runtime/typescript/.npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
/.projen/
/src
/dist
",
  "packages/api/generated/runtime/typescript/.openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
.gitignore
package.json
tsconfig.json
tsconfig.esm.json
.npmignore
",
  "packages/api/generated/runtime/typescript/.projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "@types/node",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "npm-check-updates",
        "type": "build",
        "version": "^16",
      },
      {
        "name": "projen",
        "type": "build",
      },
      {
        "name": "typescript",
        "type": "build",
      },
      {
        "name": "@aws-lambda-powertools/logger",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/metrics",
        "type": "runtime",
      },
      {
        "name": "@aws-lambda-powertools/tracer",
        "type": "runtime",
      },
      {
        "name": "@types/aws-lambda",
        "type": "runtime",
      },
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".npmignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "LICENSE",
      "openapitools.json",
      "project.json",
      "tsconfig.dev.json",
      "tsconfig.esm.json",
      "tsconfig.json",
    ],
  },
  "packages/api/generated/runtime/typescript/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "PATH": "$(npx -c "node --print process.env.PATH")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "exec": "tsc --build",
          },
        ],
      },
      "compile-esm": {
        "name": "compile-esm",
        "steps": [
          {
            "exec": "tsc -p tsconfig.esm.json",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 clean-openapi-generated-code --code-path .",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 generate --generator typescript-fetch --spec-path ../../../model/.api.json --output-path . --generator-dir typescript --src-dir src --smithy-json-path ../../../model/build/smithyprojections/smithy-yarn2-model/openapi/model/model.json --additional-properties "npmName=smithy-yarn2-typescript-runtime,typescriptThreePlus=true,useSingleParameter=true,supportsES6=true" --openapi-normalizer "KEEP_ONLY_FIRST_TAG_IN_OPERATION=true" --generate-alias-as-model",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": [
          {
            "exec": "yarn install",
          },
        ],
      },
      "install:ci": {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "yarn install --immutable",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "mkdir -p dist/js",
          },
          {
            "exec": "mv $(npm pack) dist/js/",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "upgrade": {
        "description": "upgrade dependencies",
        "env": {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": [
          {
            "exec": "yarn upgrade npm-check-updates",
          },
          {
            "exec": "npm-check-updates --dep dev --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep optional --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep peer --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep prod --upgrade --target=minor",
          },
          {
            "exec": "npm-check-updates --dep bundle --upgrade --target=minor",
          },
          {
            "exec": "yarn install",
          },
          {
            "exec": "yarn upgrade",
          },
          {
            "exec": "npx projen",
          },
          {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": [
          {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  "packages/api/generated/runtime/typescript/LICENSE": "
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
",
  "packages/api/generated/runtime/typescript/README.md": "# replace this",
  "packages/api/generated/runtime/typescript/openapitools.json": {
    "$schema": "node_modules/@openapitools/openapi-generator-cli/config.schema.json",
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "generator-cli": {
      "storageDir": "~/.open-api-generator-cli",
      "version": "6.3.0",
    },
    "spaces": 2,
  },
  "packages/api/generated/runtime/typescript/package.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": {
      "@aws-lambda-powertools/logger": "*",
      "@aws-lambda-powertools/metrics": "*",
      "@aws-lambda-powertools/tracer": "*",
      "@types/aws-lambda": "*",
    },
    "devDependencies": {
      "@types/node": "^16",
      "npm-check-updates": "^16",
      "projen": "*",
      "typescript": "*",
    },
    "license": "Apache-2.0",
    "main": "lib/index.js",
    "name": "smithy-yarn2-typescript-runtime",
    "scripts": {
      "build": "npx projen build",
      "compile": "npx projen compile",
      "compile-esm": "npx projen compile-esm",
      "default": "npx projen default",
      "generate": "npx projen generate",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "test": "npx projen test",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "packages/api/generated/runtime/typescript/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "implicitDependencies": [
      "smithy-yarn2-model",
    ],
    "name": "smithy-yarn2-typescript-runtime",
    "root": "packages/api/generated/runtime/typescript",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen build",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "compile-esm": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen compile-esm",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen default",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen generate",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen package",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen post-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "post-upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen post-upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen pre-compile",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen test",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "upgrade": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen upgrade",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
      "watch": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn exec projen watch",
          "cwd": "packages/api/generated/runtime/typescript",
        },
      },
    },
  },
  "packages/api/generated/runtime/typescript/tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "resolveJsonModule": true,
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
    ],
  },
  "packages/api/generated/runtime/typescript/tsconfig.esm.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "compilerOptions": {
      "module": "esnext",
      "moduleResolution": "nodenext",
      "outDir": "lib/esm",
    },
    "extends": "./tsconfig.json",
  },
  "packages/api/generated/runtime/typescript/tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": false,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "dom",
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": false,
      "noImplicitReturns": false,
      "noImplicitThis": false,
      "noUnusedLocals": false,
      "noUnusedParameters": false,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "skipLibCheck": true,
      "strict": false,
      "strictNullChecks": false,
      "strictPropertyInitialization": false,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
    ],
  },
  "packages/api/handlers/README.md": "## Handlers

This directory contains lambda handlers for implementing your API.

Whenever an operation is annotated with the \`@handler\` trait in Smithy (or the \`x-handler\` vendor extension in OpenAPI), a stub handler implementation will be generated for you, which you are free to modify.",
  "packages/api/model/.gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
!/project.json
",
  "packages/api/model/.projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "project.json",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  "packages/api/model/.projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws-prototyping-sdk/type-safe-api@0.0.0 parse-openapi-spec --spec-path build/smithyprojections/smithy-yarn2-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "packages/api/model/README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-prototyping-sdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "packages/api/model/build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "packages/api/model/generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "packages/api/model/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-yarn2-model",
    "root": "packages/api/model",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen build",
          "cwd": "packages/api/model",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen compile",
          "cwd": "packages/api/model",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen default",
          "cwd": "packages/api/model",
        },
      },
      "generate": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen generate",
          "cwd": "packages/api/model",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen package",
          "cwd": "packages/api/model",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen post-compile",
          "cwd": "packages/api/model",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen pre-compile",
          "cwd": "packages/api/model",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen test",
          "cwd": "packages/api/model",
        },
      },
    },
  },
  "packages/api/model/settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-yarn2-model'
",
  "packages/api/model/smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "packages/api/model/src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "packages/api/model/src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "packages/api/model/src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
  "packages/api/project.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "name": "smithy-yarn2",
    "root": "packages/api",
    "targets": {
      "build": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen build",
          "cwd": "packages/api",
        },
      },
      "compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen compile",
          "cwd": "packages/api",
        },
      },
      "default": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen default",
          "cwd": "packages/api",
        },
      },
      "package": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen package",
          "cwd": "packages/api",
        },
      },
      "post-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen post-compile",
          "cwd": "packages/api",
        },
      },
      "pre-compile": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen pre-compile",
          "cwd": "packages/api",
        },
      },
      "test": {
        "executor": "nx:run-commands",
        "options": {
          "command": "yarn dlx projen test",
          "cwd": "packages/api",
        },
      },
    },
  },
  "tsconfig.dev.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [
      "node_modules",
    ],
    "include": [
      ".projenrc.js",
      "src/**/*.ts",
      "test/**/*.ts",
      "**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": {
    "compilerOptions": {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": ".",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": [],
    "include": [
      "src/**/*.ts",
      "**/*.ts",
    ],
  },
}
`;
