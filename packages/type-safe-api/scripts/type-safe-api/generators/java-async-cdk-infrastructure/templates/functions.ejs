<%_ allOperations.forEach((operation) => { _%>
<%_ if (operation.vendorExtensions && operation.vendorExtensions['x-handler']) { _%>
<%_ const language = operation.vendorExtensions['x-handler'].language; _%>
<%_ const isTypeScript = language === 'typescript'; _%>
<%_ const isJava = language === 'java'; _%>
<%_ const isPython = language === 'python'; _%>
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/functions",
  "name": "<%- operation.operationIdPascalCase %>Function",
  "ext": ".java",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###package <%- metadata.packageName %>.functions;

import org.jetbrains.annotations.NotNull;
import software.amazon.awscdk.services.lambda.Function;
import software.aws.pdk.type_safe_api.SnapStartFunction;
import software.constructs.Construct;

/**
 * Lambda function construct which points to the <%- language %> implementation of <%- operation.operationIdPascalCase %>
 */
public class <%- operation.operationIdPascalCase %>Function extends <% if (isJava) { %>SnapStart<% } %>Function {
    public <%- operation.operationIdPascalCase %>Function(@NotNull Construct scope, @NotNull String id, @NotNull <%- operation.operationIdPascalCase %>FunctionProps props) {
        super(scope, id, props);
    }

    public <%- operation.operationIdPascalCase %>Function(@NotNull Construct scope, @NotNull String id) {
        this(scope, id, <%- operation.operationIdPascalCase %>FunctionProps.builder().build());
    }
}
###TSAPI_WRITE_FILE###
{
  "dir": "<%= metadata.srcDir || 'src' %>/functions",
  "name": "<%- operation.operationIdPascalCase %>FunctionProps",
  "ext": ".java",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###package <%- metadata.packageName %>.functions;

import org.jetbrains.annotations.NotNull;
import software.amazon.awscdk.Duration;
import software.amazon.awscdk.Size;
import software.amazon.awscdk.services.codeguruprofiler.IProfilingGroup;
import software.amazon.awscdk.services.ec2.ISecurityGroup;
import software.amazon.awscdk.services.ec2.IVpc;
import software.amazon.awscdk.services.ec2.SubnetSelection;
import software.amazon.awscdk.services.iam.IRole;
import software.amazon.awscdk.services.iam.PolicyStatement;
import software.amazon.awscdk.services.kms.IKey;
import software.amazon.awscdk.services.lambda.AdotInstrumentationConfig;
import software.amazon.awscdk.services.lambda.Architecture;
import software.amazon.awscdk.services.lambda.Code;
import software.amazon.awscdk.services.lambda.FileSystem;
import software.amazon.awscdk.services.lambda.FunctionProps;
import software.amazon.awscdk.services.lambda.ICodeSigningConfig;
import software.amazon.awscdk.services.lambda.IDestination;
import software.amazon.awscdk.services.lambda.IEventSource;
import software.amazon.awscdk.services.lambda.ILayerVersion;
import software.amazon.awscdk.services.lambda.LambdaInsightsVersion;
import software.amazon.awscdk.services.lambda.LogRetentionRetryOptions;
import software.amazon.awscdk.services.lambda.ParamsAndSecretsLayerVersion;
import software.amazon.awscdk.services.lambda.Runtime;
import software.amazon.awscdk.services.lambda.RuntimeManagementMode;
import software.amazon.awscdk.services.lambda.Tracing;
import software.amazon.awscdk.services.lambda.VersionOptions;
import software.amazon.awscdk.services.logs.RetentionDays;
import software.amazon.awscdk.services.sns.ITopic;
import software.amazon.awscdk.services.sqs.IQueue;
import software.aws.pdk.type_safe_api.SnapStartFunctionProps;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

@lombok.Builder @lombok.Getter
public class <%- operation.operationIdPascalCase %>FunctionProps implements <% if (isJava) { %>SnapStart<% } %>FunctionProps {
    private static String infraProjectAbsolutePath;

    static {
        try {
            try (InputStream stream = <%- operation.operationIdPascalCase %>FunctionProps.class.getClassLoader()
                    .getResourceAsStream("project-absolute-path.txt")) {
                try (InputStreamReader inputStreamReader = new InputStreamReader(stream)) {
                    infraProjectAbsolutePath = new BufferedReader(inputStreamReader).lines().findFirst()
                            .orElseThrow(() -> new RuntimeException("No project-absolute-path.txt resource found"));
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    // Fixed props
    private final Code code = Code.fromAsset(Paths.get(infraProjectAbsolutePath).resolve(
        <%_ if (isTypeScript) { _%>
        "<%- metadata['x-handlers-typescript-asset-path'] %>/<%- operation.operationIdKebabCase %>"
        <%_ } else if (isPython) { _%>
        "<%- metadata['x-handlers-python-asset-path'] %>"
        <%_ } else if (isJava) { _%>
        "<%- metadata['x-handlers-java-asset-path'] %>"
        <%_ } _%>
    ).toAbsolutePath().toString());
    <%_ if (isTypeScript) { _%>
    private final String handler = "index.handler";
    <%_ } else if (isPython) { _%>
    private final String handler = "<%- metadata['x-handlers-python-module'] %>.<%- operation.operationIdSnakeCase %>.handler";
    <%_ } else if (isJava) { _%>
    private final String handler = "<%- metadata['x-handlers-java-package'] %>.<%- operation.operationIdPascalCase %>Handler";
    <%_ } _%>
    <%_ if (isTypeScript) { _%>
    private final Runtime runtime = Runtime.<%- metadata['x-handlers-node-lambda-runtime-version'] %>;
    <%_ } else if (isPython) { _%>
    private final Runtime runtime = Runtime.<%- metadata['x-handlers-python-lambda-runtime-version'] %>;
    <%_ } else if (isJava) { _%>
    private final Runtime runtime = Runtime.<%- metadata['x-handlers-java-lambda-runtime-version'] %>;
    <%_ } _%>

    // Props with defaults
    @lombok.Builder.Default
    Duration timeout = Duration.seconds(30);
    @lombok.Builder.Default
    Tracing tracing = Tracing.ACTIVE;

    // Remaining Function Props
    AdotInstrumentationConfig adotInstrumentation;
    Boolean allowAllOutbound;
    Boolean allowPublicSubnet;
    Architecture architecture;
    ICodeSigningConfig codeSigningConfig;
    VersionOptions currentVersionOptions;
    IQueue deadLetterQueue;
    Boolean deadLetterQueueEnabled;
    ITopic deadLetterTopic;
    String description;
    Map<String, String> environment;
    IKey environmentEncryption;
    Size ephemeralStorageSize;
    List<IEventSource> events;
    FileSystem filesystem;
    String functionName;
    List<PolicyStatement> initialPolicy;
    LambdaInsightsVersion insightsVersion;
    List<ILayerVersion> layers;
    RetentionDays logRetention;
    LogRetentionRetryOptions logRetentionRetryOptions;
    IRole logRetentionRole;
    Number memorySize;
    ParamsAndSecretsLayerVersion paramsAndSecrets;
    Boolean profiling;
    IProfilingGroup profilingGroup;
    Number reservedConcurrentExecutions;
    IRole role;
    RuntimeManagementMode runtimeManagementMode;
    List<ISecurityGroup> securityGroups;
    IVpc vpc;
    SubnetSelection vpcSubnets;
    Duration maxEventAge;
    IDestination onFailure;
    IDestination onSuccess;
    Number retryAttempts;
}
<%_ } _%>
<%_ }); _%>