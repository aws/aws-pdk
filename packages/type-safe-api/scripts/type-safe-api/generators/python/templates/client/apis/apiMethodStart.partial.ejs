        """<%- operation.isDeprecated ? '(Deprecated) ' : '' %><%- operation.operationIdSnakeCase %>
        <%_ if (operation.description) { _%>
        <%- operation.description %>
        <%_ } _%>
        <%_ operation.parameters.forEach((parameter) => { _%>
        :param <%- parameter.pythonName %>:<%- parameter.description ? ` ${parameter.description}` : '' %><%- parameter.isRequired ? ' (required)': ' (optional)' %>
        :type <%- parameter.pythonName %>: <%- parameter.pythonType %><%- parameter.isRequired ? '' : ', optional' %>
        <%_ }); _%>
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        <%_ if (operation.isDeprecated) { _%>
        warnings.warn("<%- operation.method %> <%- operation.path %> is deprecated.", DeprecationWarning)
        <%_ } _%>

        _param = self._<%- operation.operationIdSnakeCase %>_serialize(
            <%_ operation.parameters.map((parameter) => { _%>
            <%- parameter.pythonName %>=<%-parameter.pythonName %>,
            <%_ }); _%>
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            <%_ operation.responses.filter(res => res.code > 0 && res.type !== 'void').forEach((res, i) => { _%>
            '<%- res.code %>': <%- res.pythonType ? `"${res.pythonType}"` : 'None' %><% if (i < operation.responses.length - 1) { %>,<% } %>
            <%_ }); _%>
        }
