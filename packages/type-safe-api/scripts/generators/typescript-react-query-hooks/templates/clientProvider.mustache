import * as React from "react";
import {
  QueryClient,
  QueryClientProvider,
} from "@tanstack/react-query";
import { {{ classname }} } from "./{{ classFilename }}";
import { {{ classname }}ClientContext } from "./{{ classFilename }}Hooks";

const queryClient = new QueryClient();

/**
 * Default QueryClient context for {{classname}}
 */
export const {{classname}}DefaultContext = React.createContext<QueryClient | undefined>(
  undefined
);

/**
 * Properties for the {{ classname }}ClientProvider
 */
export interface {{ classname }}ClientProviderProps {
  readonly apiClient: {{ classname }};
  readonly client?: QueryClient;
  readonly context?: React.Context<QueryClient | undefined>;
  readonly children?: React.ReactNode;
}

/**
 * Provider for the API Client and Query Client used by the hooks.
 * This must parent any components which make use of the hooks.
 */
export const {{ classname }}ClientProvider = ({
  apiClient,
  client = queryClient,
  context = {{classname}}DefaultContext,
  children,
}: {{ classname }}ClientProviderProps): JSX.Element => {
  return (
    <QueryClientProvider client={client} context={context}>
      <{{ classname }}ClientContext.Provider value={apiClient}>
        {children}
      </{{ classname }}ClientContext.Provider>
    </QueryClientProvider>
  );
};
