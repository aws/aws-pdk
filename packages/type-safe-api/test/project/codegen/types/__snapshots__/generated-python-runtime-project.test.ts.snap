// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated Python Runtime Unit Tests Synth 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.py and run \\"npx projen\\".

/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.openapi-generator-ignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/pyproject.toml linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run \\"npx projen\\".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v5.0.2
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run \\"npx projen\\".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.openapi-generator-ignore
test
docs
README.md
.openapi-generator
",
  ".openapi-generator-ignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run \\"npx projen\\".
.gitignore
test
test/*
test/**/*
.gitlab-ci.yml
.travis.yml
git_push.sh
tox.ini
requirements.txt
test-requirements.txt
setup.py
setup.cfg
",
  ".projen/deps.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run \\"npx projen\\".",
    "dependencies": Array [
      Object {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
      Object {
        "name": "certifi",
        "type": "runtime",
        "version": "^14.5.14",
      },
      Object {
        "name": "frozendict",
        "type": "runtime",
        "version": "~2.3.4",
      },
      Object {
        "name": "python-dateutil",
        "type": "runtime",
        "version": "~2.7.0",
      },
      Object {
        "name": "setuptools",
        "type": "runtime",
        "version": "^21.0.0",
      },
      Object {
        "name": "typing_extensions",
        "type": "runtime",
        "version": "~4.3.0",
      },
      Object {
        "name": "urllib3",
        "type": "runtime",
        "version": "~1.26.7",
      },
    ],
  },
  ".projen/files.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run \\"npx projen\\".",
    "files": Array [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".openapi-generator-ignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run \\"npx projen\\".",
    "env": Object {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p)",
    },
    "tasks": Object {
      "build": Object {
        "description": "Full release build",
        "name": "build",
        "steps": Array [
          Object {
            "spawn": "default",
          },
          Object {
            "spawn": "pre-compile",
          },
          Object {
            "spawn": "compile",
          },
          Object {
            "spawn": "post-compile",
          },
          Object {
            "spawn": "test",
          },
          Object {
            "spawn": "package",
          },
        ],
      },
      "clobber": Object {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": Object {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": Array [
          Object {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in \\"scratch\\" branch",
          },
          Object {
            "exec": "git checkout $BRANCH",
          },
          Object {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          Object {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          Object {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          Object {
            "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
          },
        ],
      },
      "compile": Object {
        "description": "Only compile",
        "name": "compile",
      },
      "default": Object {
        "description": "Synthesize project files",
        "name": "default",
        "steps": Array [
          Object {
            "exec": "python .projenrc.py",
          },
        ],
      },
      "eject": Object {
        "description": "Remove projen from the project",
        "env": Object {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": Array [
          Object {
            "spawn": "default",
          },
        ],
      },
      "generate": Object {
        "name": "generate",
        "steps": Array [
          Object {
            "cwd": "../../../../../scripts/custom/clean-openapi-generated-code",
            "exec": "./clean-openapi-generated-code --code-path ../../../test/project/codegen/types/python-runtime",
          },
          Object {
            "cwd": "../../../../../scripts/generators",
            "exec": "./generate --generator python --spec-path ../../test/project/codegen/types/python-runtime/my-spec.json --output-path ../../test/project/codegen/types/python-runtime --generator-dir python --src-dir test --additional-properties \\"packageName=test,projectName=test-python-runtime\\" --openapi-normalizer \\"KEEP_ONLY_FIRST_TAG_IN_OPERATION=true\\"",
          },
        ],
      },
      "install": Object {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": Array [
          Object {
            "exec": "mkdir -p test && touch test/__init__.py",
          },
          Object {
            "exec": "poetry update",
          },
        ],
      },
      "package": Object {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": Array [
          Object {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": Object {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": Object {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
        "steps": Array [
          Object {
            "spawn": "generate",
          },
        ],
      },
      "publish": Object {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": Array [
          Object {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": Object {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": Array [
          Object {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": Object {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# replace this",
  "poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run \\"npx projen\\".

[repositories.testpypi]
url = \\"https://test.pypi.org/legacy/\\"
",
  "pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run \\"npx projen\\".

[build-system]
requires = [ \\"poetry_core>=1.0.0\\" ]
build-backend = \\"poetry.core.masonry.api\\"

[tool.poetry]
name = \\"test-python-runtime\\"
version = \\"1.0.0\\"
description = \\"\\"
authors = [ \\"test <me@example.com>\\" ]
readme = \\"README.md\\"
include = [ \\"test\\", \\"test/**/*.py\\" ]

  [[tool.poetry.packages]]
  include = \\"test\\"

  [tool.poetry.dependencies]
  certifi = \\"^14.5.14\\"
  frozendict = \\"~2.3.4\\"
  python-dateutil = \\"~2.7.0\\"
  setuptools = \\"^21.0.0\\"
  typing_extensions = \\"~4.3.0\\"
  urllib3 = \\"~1.26.7\\"
  python = \\"^3.7\\"

  [tool.poetry.dev-dependencies]
  projen = \\"99.99.99\\"
",
}
`;
