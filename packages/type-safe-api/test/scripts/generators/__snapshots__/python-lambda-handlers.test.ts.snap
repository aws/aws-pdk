// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Python Handlers Code Generation Script Unit Tests Generates With handlers.yaml 1`] = `
"from test_client.models import *
from test_client.response import Response
from test_client.interceptors import INTERCEPTORS
from test_client.interceptors.powertools.logger import LoggingInterceptor
from test_client.api.operation_config import (
    python_one_handler, PythonOneRequest, PythonOneOperationResponses
)


def python_one(input: PythonOneRequest, **kwargs) -> PythonOneOperationResponses:
    """
    Type-safe handler for the PythonOne operation
    """
    LoggingInterceptor.get_logger(input).info("Start PythonOne Operation")

    # TODO: Implement PythonOne Operation. \`input\` contains the request input

    return Response.internal_failure(InternalFailureErrorResponseContent(
        message="Not Implemented!"
    ))


# Entry point for the AWS Lambda handler for the PythonOne operation.
# The python_one_handler method wraps the type-safe handler and manages marshalling inputs and outputs
handler = python_one_handler(interceptors=INTERCEPTORS)(python_one)

"
`;

exports[`Python Handlers Code Generation Script Unit Tests Generates With handlers.yaml 2`] = `
"from test_client.models import *
from test_client.response import Response
from test_client.interceptors import INTERCEPTORS
from test_client.interceptors.powertools.logger import LoggingInterceptor
from test_client.api.operation_config import (
    python_two_handler, PythonTwoRequest, PythonTwoOperationResponses
)


def python_two(input: PythonTwoRequest, **kwargs) -> PythonTwoOperationResponses:
    """
    Type-safe handler for the PythonTwo operation
    """
    LoggingInterceptor.get_logger(input).info("Start PythonTwo Operation")

    # TODO: Implement PythonTwo Operation. \`input\` contains the request input

    return Response.internal_failure(InternalFailureErrorResponseContent(
        message="Not Implemented!"
    ))


# Entry point for the AWS Lambda handler for the PythonTwo operation.
# The python_two_handler method wraps the type-safe handler and manages marshalling inputs and outputs
handler = python_two_handler(interceptors=INTERCEPTORS)(python_two)

"
`;
