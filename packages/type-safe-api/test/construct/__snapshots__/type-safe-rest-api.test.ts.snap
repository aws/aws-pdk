// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type Safe Rest Api Construct Unit Tests Create 2 APIs on same stack 1`] = `
{
  "Outputs": {
    "ApiTest1EndpointFCE7CA87": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTest1E0FDBC81",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTest1DeploymentStageprod6B6E3F66",
            },
            "/",
          ],
        ],
      },
    },
    "ApiTest2Endpoint37683897": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTest29D927A57",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTest2DeploymentStageprodF3467DC1",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTest1AccessLogsC273067A": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTest1Account37F1A1C0": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTest1E0FDBC81",
        "ApiTest1PrepareSpecCustomResource30CD03AA",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTest1CloudWatchRole30B84AB0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTest1ApiTest1AclWebACL4CD0F6DD": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest1-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest1-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest1-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTest1ApiTest1AclWebACLAssociationAFA8584F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTest1E0FDBC81",
              },
              "/stages/",
              {
                "Ref": "ApiTest1DeploymentStageprod6B6E3F66",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTest1ApiTest1AclWebACL4CD0F6DD",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTest1CloudWatchRole30B84AB0": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTest1PrepareSpecCustomResource30CD03AA",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTest1Deployment2E308FF82fc4f0a458a5f6de41661a6b62b5c224": {
      "DependsOn": [
        "ApiTest1PrepareSpecCustomResource30CD03AA",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTest1E0FDBC81",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTest1DeploymentStageprod6B6E3F66": {
      "DependsOn": [
        "ApiTest1Account37F1A1C0",
        "ApiTest1PrepareSpecCustomResource30CD03AA",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTest1AccessLogsC273067A",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTest1Deployment2E308FF82fc4f0a458a5f6de41661a6b62b5c224",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTest1E0FDBC81",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTest1E0FDBC81": {
      "DependsOn": [
        "ApiTest1PrepareSpecCustomResource30CD03AA",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTest1PrepareSpecCustomResource30CD03AA",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest1",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTest1LambdaPermissiontestOperation0FD44D9B": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTest1E0FDBC81",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTest1PrepareSpecCustomResource30CD03AA": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTest1PrepareSpecProviderframeworkonEvent9E64448F",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTest1PrepareSpecHandler41DBA69C": {
      "DependsOn": [
        "ApiTest1PrepareSpecRole6018776C",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-85532C36PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTest1PrepareSpecRole6018776C",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTest1PrepareSpecProviderRoleA1D8F665": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-85532C36PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-85532C36PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTest1PrepareSpecProviderRoleDefaultPolicyFCE97042": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTest1PrepareSpecHandler41DBA69C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTest1PrepareSpecHandler41DBA69C",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTest1PrepareSpecProviderRoleDefaultPolicyFCE97042",
        "Roles": [
          {
            "Ref": "ApiTest1PrepareSpecProviderRoleA1D8F665",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTest1PrepareSpecProviderframeworkonEvent9E64448F": {
      "DependsOn": [
        "ApiTest1PrepareSpecProviderRoleDefaultPolicyFCE97042",
        "ApiTest1PrepareSpecProviderRoleA1D8F665",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest1/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTest1PrepareSpecHandler41DBA69C",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-85532C36PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTest1PrepareSpecProviderRoleA1D8F665",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTest1PrepareSpecRole6018776C": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-85532C36PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-85532C36PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-85532C36PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-85532C36PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTest29D927A57": {
      "DependsOn": [
        "ApiTest2PrepareSpecCustomResource2182A9C5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTest2PrepareSpecCustomResource2182A9C5",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest2",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTest2AccessLogs7506EDA6": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTest2Account685F675E": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTest29D927A57",
        "ApiTest2PrepareSpecCustomResource2182A9C5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTest2CloudWatchRole72C1A98D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTest2ApiTest2AclWebACL627F765E": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest2-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest2-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest2-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTest2ApiTest2AclWebACLAssociation1BE7A2D1": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTest29D927A57",
              },
              "/stages/",
              {
                "Ref": "ApiTest2DeploymentStageprodF3467DC1",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTest2ApiTest2AclWebACL627F765E",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTest2CloudWatchRole72C1A98D": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTest2PrepareSpecCustomResource2182A9C5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTest2DeploymentF5547FBB0628ff5b414eb67a464523f7ee50546d": {
      "DependsOn": [
        "ApiTest2PrepareSpecCustomResource2182A9C5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTest29D927A57",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTest2DeploymentStageprodF3467DC1": {
      "DependsOn": [
        "ApiTest2Account685F675E",
        "ApiTest2PrepareSpecCustomResource2182A9C5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTest2AccessLogs7506EDA6",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTest2DeploymentF5547FBB0628ff5b414eb67a464523f7ee50546d",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTest29D927A57",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTest2LambdaPermissiontestOperation7622FF16": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTest29D927A57",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTest2PrepareSpecCustomResource2182A9C5": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTest2PrepareSpecProviderframeworkonEventC9470DD8",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTest2PrepareSpecHandler8A43E4DB": {
      "DependsOn": [
        "ApiTest2PrepareSpecRoleE638C076",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-300D0E5FPrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTest2PrepareSpecRoleE638C076",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTest2PrepareSpecProviderRole59C44E6C": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-300D0E5FPrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-300D0E5FPrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTest2PrepareSpecProviderRoleDefaultPolicyA41E659C": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTest2PrepareSpecHandler8A43E4DB",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTest2PrepareSpecHandler8A43E4DB",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTest2PrepareSpecProviderRoleDefaultPolicyA41E659C",
        "Roles": [
          {
            "Ref": "ApiTest2PrepareSpecProviderRole59C44E6C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTest2PrepareSpecProviderframeworkonEventC9470DD8": {
      "DependsOn": [
        "ApiTest2PrepareSpecProviderRoleDefaultPolicyA41E659C",
        "ApiTest2PrepareSpecProviderRole59C44E6C",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest2/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTest2PrepareSpecHandler8A43E4DB",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-300D0E5FPrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTest2PrepareSpecProviderRole59C44E6C",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTest2PrepareSpecRoleE638C076": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-300D0E5FPrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-300D0E5FPrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-300D0E5FPrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-300D0E5FPrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "This is a test construct.",
            },
            {
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "This is a test construct.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "This is a test construct.",
            },
            {
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "This is a test construct.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Local Mode 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC4781c1d08559e5f0b03e31c4dcb542fe38a": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC4781c1d08559e5f0b03e31c4dcb542fe38a",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Body": {
          "components": {
            "securitySchemes": {},
          },
          "info": {
            "title": "Test API",
            "version": "1.0.0",
          },
          "openapi": "3.0.3",
          "paths": {
            "/test": {
              "get": {
                "operationId": "testOperation",
                "responses": {
                  "200": {
                    "content": {
                      "application/json": {
                        "schema": {
                          "properties": {
                            "message": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                    },
                    "description": "Successful response",
                    "headers": {},
                  },
                },
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LambdaD247545B",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
          },
          "x-amazon-apigateway-gateway-responses": {
            "BAD_REQUEST_BODY": {
              "responseTemplates": {
                "application/json": "{"message": "$context.error.validationErrorString"}",
              },
              "statusCode": 400,
            },
          },
          "x-amazon-apigateway-request-validator": "all",
          "x-amazon-apigateway-request-validators": {
            "all": {
              "validateRequestBody": true,
              "validateRequestParameters": true,
            },
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Permits Matching No Authorizers In Spec And Construct 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC47838079670259c24557112d51aa8c99f2d": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC47838079670259c24557112d51aa8c99f2d",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "defaultAuthorizerReference": {
          "authorizerId": "none",
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Permits path-level parameters, summary and description 1`] = `
{
  "components": {
    "securitySchemes": {
      "my-custom-scheme": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authorizer": {
          "authorizerResultTtlInSeconds": 300,
          "authorizerUri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
          "identitySource": "method.request.header.Authorization",
          "type": "token",
        },
        "x-amazon-apigateway-authtype": "CUSTOM",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "description": "Description",
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "my-custom-scheme": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
      "parameters": [
        {
          "in": "query",
          "name": "queryParam",
          "schema": {
            "type": "string",
          },
        },
      ],
      "summary": "Summary",
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Should add header parameters to CORS Access-Control-Allow-Headers 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC47894f72739a02c7563be2a8cc00e09568e": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC47894f72739a02c7563be2a8cc00e09568e",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiondeleteOperationCF8B1751": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Lambda35298F1AD",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/DELETE/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetOperationE32C7896": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Lambda1DB8E9965",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionpostOperation5287C28F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Lambda461E84558",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/POST/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionputOperation80355FB2": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Lambda217CFB423",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/PUT/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "corsOptions": {
          "allowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "x-amz-content-sha256",
          ],
          "allowMethods": [
            "OPTIONS",
            "GET",
            "PUT",
            "POST",
            "DELETE",
            "PATCH",
            "HEAD",
          ],
          "allowOrigins": [
            "*",
          ],
          "statusCode": 200,
        },
        "defaultAuthorizerReference": {
          "authorizerId": "aws.auth.sigv4",
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "1b379c070728ce6e390dc775a85f16303a2625450133ff14c948409d76eb41c8.json",
        },
        "integrations": {
          "deleteOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "Lambda35298F1AD",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "Lambda1DB8E9965",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "postOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "Lambda461E84558",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "putOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "Lambda217CFB423",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "deleteOperation": {
            "method": "delete",
            "path": "/test",
          },
          "getOperation": {
            "method": "get",
            "path": "/test",
          },
          "postOperation": {
            "method": "post",
            "path": "/test",
          },
          "putOperation": {
            "method": "put",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "1b379c070728ce6e390dc775a85f16303a2625450133ff14c948409d76eb41c8.json-prepared",
        },
        "securitySchemes": {
          "aws.auth.sigv4": {
            "in": "header",
            "name": "Authorization",
            "type": "apiKey",
            "x-amazon-apigateway-authtype": "awsSigv4",
          },
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/1b379c070728ce6e390dc775a85f16303a2625450133ff14c948409d76eb41c8.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/1b379c070728ce6e390dc775a85f16303a2625450133ff14c948409d76eb41c8.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/1b379c070728ce6e390dc775a85f16303a2625450133ff14c948409d76eb41c8.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/1b379c070728ce6e390dc775a85f16303a2625450133ff14c948409d76eb41c8.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Lambda1DB8E9965": {
      "DependsOn": [
        "Lambda1ServiceRoleF188C4B8",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "Lambda1ServiceRoleF188C4B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "Lambda1ServiceRoleF188C4B8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Lambda217CFB423": {
      "DependsOn": [
        "Lambda2ServiceRole31A072E1",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "Lambda2ServiceRole31A072E1",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "Lambda2ServiceRole31A072E1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Lambda35298F1AD": {
      "DependsOn": [
        "Lambda3ServiceRole54BB0786",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "Lambda3ServiceRole54BB0786",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "Lambda3ServiceRole54BB0786": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Lambda461E84558": {
      "DependsOn": [
        "Lambda4ServiceRole72B40363",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "Lambda4ServiceRole72B40363",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "Lambda4ServiceRole72B40363": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Should add header parameters to CORS Access-Control-Allow-Headers 2`] = `
{
  "components": {
    "securitySchemes": {
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "delete": {
        "operationId": "deleteOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
      "get": {
        "operationId": "getOperation",
        "parameters": [
          {
            "in": "query",
            "name": "notAHeader",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "header",
            "name": "x-shared-header",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "header",
            "name": "X-Different-Header",
            "schema": {
              "type": "number",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
      "options": {
        "description": "Enable CORS by returning the correct headers",
        "responses": {
          "200": {
            "content": {},
            "description": "Default response for CORS method",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [],
        "summary": "CORS Support",
        "x-amazon-apigateway-auth": {
          "type": "NONE",
        },
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{"statusCode": 200}",
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256,x-shared-header,X-Different-Header,x-another-header'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {
                "application/json": "{}",
              },
              "statusCode": "200",
            },
          },
          "type": "mock",
        },
      },
      "post": {
        "operationId": "postOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
      "put": {
        "operationId": "putOperation",
        "parameters": [
          {
            "in": "query",
            "name": "anotherQueryParam",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "header",
            "name": "x-shared-header",
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "header",
            "name": "x-another-header",
            "schema": {
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseParameters": {
        "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256,x-shared-header,X-Different-Header,x-another-header'",
        "gatewayresponse.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
      },
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Should allow for lambdas in different regions 1`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:\${<TOKEN>}:lambda:us-east-1:\${<TOKEN>}:function:Test/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Should consolidate permissions for reused lambdas 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC4783909f7c5ff6f3e4849abee9771dfb63a": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC4783909f7c5ff6f3e4849abee9771dfb63a",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissionpostOperation5287C28F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Lambda217CFB423",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/POST/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaRouterPermissionfec335f16B87EC1A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Lambda1DB8E9965",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json",
        },
        "integrations": {
          "deleteOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "Lambda1DB8E9965",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "Lambda1DB8E9965",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "postOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "Lambda217CFB423",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "putOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "Lambda1DB8E9965",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "deleteOperation": {
            "method": "delete",
            "path": "/test",
          },
          "getOperation": {
            "method": "get",
            "path": "/test",
          },
          "postOperation": {
            "method": "post",
            "path": "/test",
          },
          "putOperation": {
            "method": "put",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Lambda1DB8E9965": {
      "DependsOn": [
        "Lambda1ServiceRoleF188C4B8",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "Lambda1ServiceRoleF188C4B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "Lambda1ServiceRoleF188C4B8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Lambda217CFB423": {
      "DependsOn": [
        "Lambda2ServiceRole31A072E1",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "Lambda2ServiceRole31A072E1",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "Lambda2ServiceRole31A072E1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Should enable compression 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478faa243d7b88abc45cdf0192565d77ac9": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478faa243d7b88abc45cdf0192565d77ac9",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "MinimumCompressionSize": 20,
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478ba688c73ecd411d6bc46f33941546de6": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478ba688c73ecd411d6bc46f33941546de6",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "This is a test construct.",
            },
            {
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "This is a test construct.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM4",
              "reason": "This is a test construct.",
            },
            {
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "This is a test construct.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth 2`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 01. Empty 1`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 02. Header 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 03. Authorizer 1`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "AUTHORIZER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 04. Header Required 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 05. Header Not Required 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 06. Header Required And Default Authorizer 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
          {
            "api_key": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 07. Header Not Required And Default Authorizer 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 08. Header Required And Method Authorizer 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
          {
            "api_key": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 09. Header Not Required And Method Authorizer 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 10. Header Required By Default 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 11. Header Required By Default But Not Required For Method 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 12. Header Required By Default With Default Authorizer 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
          {
            "api_key": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 13. Header Required By Default With Method Authorizer 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
          {
            "api_key": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Synth With ApiKey Configuration 14. Header Required By Default With Default Authorizer But Not Required For Method 1`] = `
{
  "components": {
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey",
      },
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-api-key-source": "HEADER",
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Cognito Auth 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC4782f7f76b22669fc980f9f7456fe1deff4": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC4782f7f76b22669fc980f9f7456fe1deff4",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "defaultAuthorizerReference": {
          "authorizerId": "myCognitoAuthorizer",
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {
          "myCognitoAuthorizer": {
            "in": "header",
            "name": "Authorization",
            "type": "apiKey",
            "x-amazon-apigateway-authorizer": {
              "providerARNs": [
                {
                  "Fn::GetAtt": [
                    "pool056F3F7E",
                    "Arn",
                  ],
                },
              ],
              "type": "COGNITO_USER_POOLS",
            },
            "x-amazon-apigateway-authtype": "COGNITO_USER_POOLS",
          },
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "pool056F3F7E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
        },
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Cognito Auth 2`] = `
{
  "components": {
    "securitySchemes": {
      "myCognitoAuthorizer": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authorizer": {
          "providerARNs": [
            "\${<TOKEN>}",
          ],
          "type": "COGNITO_USER_POOLS",
        },
        "x-amazon-apigateway-authtype": "COGNITO_USER_POOLS",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "myCognitoAuthorizer": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Custom Auth 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC47803e8a90fd243402c01d0e16cbd6e0535": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC47803e8a90fd243402c01d0e16cbd6e0535",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissionmyCustomAuthorizer2D3D850D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizerBD825682",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "defaultAuthorizerReference": {
          "authorizerId": "myCustomAuthorizer",
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {
          "myCustomAuthorizer": {
            "in": "header",
            "name": "Authorization",
            "type": "apiKey",
            "x-amazon-apigateway-authorizer": {
              "authorizerResultTtlInSeconds": 300,
              "authorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizerBD825682",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
              "identitySource": "method.request.header.Authorization",
              "type": "token",
            },
            "x-amazon-apigateway-authtype": "CUSTOM",
          },
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthorizerBD825682": {
      "DependsOn": [
        "AuthorizerServiceRoleB8F38EC9",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "AuthorizerServiceRoleB8F38EC9",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "AuthorizerServiceRoleB8F38EC9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Custom Auth 2`] = `
{
  "components": {
    "securitySchemes": {
      "myCustomAuthorizer": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authorizer": {
          "authorizerResultTtlInSeconds": 300,
          "authorizerUri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
          "identitySource": "method.request.header.Authorization",
          "type": "token",
        },
        "x-amazon-apigateway-authtype": "CUSTOM",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "myCustomAuthorizer": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Custom Managed Rules 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesAmazonIpReputationList",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesAmazonIpReputationList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesAmazonIpReputationList",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWS-AWSManagedRulesAnonymousIpList",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 3,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesAnonymousIpList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesAnonymousIpList",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478ba688c73ecd411d6bc46f33941546de6": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478ba688c73ecd411d6bc46f33941546de6",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With IAM Auth and CORS 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478a540cf96c2f3638f1db06413ff4bc26e": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478a540cf96c2f3638f1db06413ff4bc26e",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "corsOptions": {
          "allowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "x-amz-content-sha256",
          ],
          "allowMethods": [
            "OPTIONS",
            "GET",
            "PUT",
            "POST",
            "DELETE",
            "PATCH",
            "HEAD",
          ],
          "allowOrigins": [
            "*",
          ],
          "statusCode": 200,
        },
        "defaultAuthorizerReference": {
          "authorizerId": "aws.auth.sigv4",
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {
          "aws.auth.sigv4": {
            "in": "header",
            "name": "Authorization",
            "type": "apiKey",
            "x-amazon-apigateway-authtype": "awsSigv4",
          },
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With IAM Auth and CORS 2`] = `
{
  "components": {
    "securitySchemes": {
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
      "options": {
        "description": "Enable CORS by returning the correct headers",
        "responses": {
          "200": {
            "content": {},
            "description": "Default response for CORS method",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [],
        "summary": "CORS Support",
        "x-amazon-apigateway-auth": {
          "type": "NONE",
        },
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{"statusCode": 200}",
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {
                "application/json": "{}",
              },
              "statusCode": "200",
            },
          },
          "type": "mock",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseParameters": {
        "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
        "gatewayresponse.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
      },
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Mixed Auth 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC47818452aad75ab6cbc8f46ee5fe2293a71": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC47818452aad75ab6cbc8f46ee5fe2293a71",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiondeleteOperationCF8B1751": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaIntegrationdD45F0B2E",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/DELETE/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetOperationE32C7896": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaIntegrationaE925485E",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionmyCustomAuthorizer2D3D850D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAuthorizerB5870E9B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionpostOperation5287C28F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaIntegrationc8B199E47",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/POST/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionputOperation80355FB2": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaIntegrationb550BB0F2",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/PUT/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "defaultAuthorizerReference": {
          "authorizerId": "aws.auth.sigv4",
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json",
        },
        "integrations": {
          "deleteOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaIntegrationdD45F0B2E",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaIntegrationaE925485E",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
            "methodAuthorizer": {
              "authorizationScopes": [
                "foo/bar",
              ],
              "authorizerId": "myCognitoAuthorizer",
            },
          },
          "postOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaIntegrationc8B199E47",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
            "methodAuthorizer": {
              "authorizerId": "myCustomAuthorizer",
            },
          },
          "putOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaIntegrationb550BB0F2",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
            "methodAuthorizer": {
              "authorizationScopes": [
                "other/scope",
              ],
              "authorizerId": "myCognitoAuthorizer",
            },
          },
        },
        "operationLookup": {
          "deleteOperation": {
            "method": "delete",
            "path": "/test",
          },
          "getOperation": {
            "method": "get",
            "path": "/test",
          },
          "postOperation": {
            "method": "post",
            "path": "/test",
          },
          "putOperation": {
            "method": "put",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json-prepared",
        },
        "securitySchemes": {
          "aws.auth.sigv4": {
            "in": "header",
            "name": "Authorization",
            "type": "apiKey",
            "x-amazon-apigateway-authtype": "awsSigv4",
          },
          "myCognitoAuthorizer": {
            "in": "header",
            "name": "Authorization",
            "type": "apiKey",
            "x-amazon-apigateway-authorizer": {
              "providerARNs": [
                {
                  "Fn::GetAtt": [
                    "pool056F3F7E",
                    "Arn",
                  ],
                },
              ],
              "type": "COGNITO_USER_POOLS",
            },
            "x-amazon-apigateway-authtype": "COGNITO_USER_POOLS",
          },
          "myCustomAuthorizer": {
            "in": "header",
            "name": "Unused",
            "type": "apiKey",
            "x-amazon-apigateway-authorizer": {
              "authorizerResultTtlInSeconds": 60,
              "authorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaAuthorizerB5870E9B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
              "identitySource": "method.request.querystring.QueryString1",
              "type": "request",
            },
            "x-amazon-apigateway-authtype": "CUSTOM",
          },
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/59c8d7b10656c48be66a3a7cb22540b5dc6f56cfa67229affa21977c6567f30e.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaAuthorizerB5870E9B": {
      "DependsOn": [
        "LambdaAuthorizerServiceRole801EAE1C",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "auth",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaAuthorizerServiceRole801EAE1C",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaAuthorizerServiceRole801EAE1C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaIntegrationaE925485E": {
      "DependsOn": [
        "LambdaIntegrationaServiceRoleA0EFE184",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "integration",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaIntegrationaServiceRoleA0EFE184",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaIntegrationaServiceRoleA0EFE184": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaIntegrationb550BB0F2": {
      "DependsOn": [
        "LambdaIntegrationbServiceRole67BB48DF",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "integration",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaIntegrationbServiceRole67BB48DF",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaIntegrationbServiceRole67BB48DF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaIntegrationc8B199E47": {
      "DependsOn": [
        "LambdaIntegrationcServiceRole2FA1D12D",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "integration",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaIntegrationcServiceRole2FA1D12D",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaIntegrationcServiceRole2FA1D12D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaIntegrationdD45F0B2E": {
      "DependsOn": [
        "LambdaIntegrationdServiceRoleE3650DB6",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "integration",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaIntegrationdServiceRoleE3650DB6",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaIntegrationdServiceRoleE3650DB6": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "pool056F3F7E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
        },
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Mixed Auth 2`] = `
{
  "components": {
    "securitySchemes": {
      "aws.auth.sigv4": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authtype": "awsSigv4",
      },
      "myCognitoAuthorizer": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "x-amazon-apigateway-authorizer": {
          "providerARNs": [
            "\${<TOKEN>}",
          ],
          "type": "COGNITO_USER_POOLS",
        },
        "x-amazon-apigateway-authtype": "COGNITO_USER_POOLS",
      },
      "myCustomAuthorizer": {
        "in": "header",
        "name": "Unused",
        "type": "apiKey",
        "x-amazon-apigateway-authorizer": {
          "authorizerResultTtlInSeconds": 60,
          "authorizerUri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
          "identitySource": "method.request.querystring.QueryString1",
          "type": "request",
        },
        "x-amazon-apigateway-authtype": "CUSTOM",
      },
    },
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "delete": {
        "operationId": "deleteOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "aws.auth.sigv4": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
      "get": {
        "operationId": "getOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "myCognitoAuthorizer": [
              "foo/bar",
            ],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
      "post": {
        "operationId": "postOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "myCustomAuthorizer": [],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
      "put": {
        "operationId": "putOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "security": [
          {
            "myCognitoAuthorizer": [
              "other/scope",
            ],
          },
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Mock Integration 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478a28890a7ac67f65a56f78d242bf067d5": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478a28890a7ac67f65a56f78d242bf067d5",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "requestTemplates": {
                "application/json": "{"statusCode": 200}",
              },
              "responses": {
                "default": {
                  "responseParameters": {},
                  "responseTemplates": {
                    "application/json": "{"message":"message"}",
                  },
                  "statusCode": "200",
                },
              },
              "type": "MOCK",
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Mock Integration 2`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{"statusCode": 200}",
          },
          "responses": {
            "default": {
              "responseParameters": {},
              "responseTemplates": {
                "application/json": "{"message":"message"}",
              },
              "statusCode": "200",
            },
          },
          "type": "MOCK",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Mock Integration and CORS 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC4783e3e5eeaa8a8e6d23441a25ca55384d3": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC4783e3e5eeaa8a8e6d23441a25ca55384d3",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "corsOptions": {
          "allowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "x-amz-content-sha256",
          ],
          "allowMethods": [
            "OPTIONS",
            "GET",
            "PUT",
            "POST",
            "DELETE",
            "PATCH",
            "HEAD",
          ],
          "allowOrigins": [
            "*",
          ],
          "statusCode": 204,
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "requestTemplates": {
                "application/json": "{"statusCode": 200}",
              },
              "responses": {
                "default": {
                  "responseParameters": {
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                  },
                  "responseTemplates": {
                    "application/json": "{"message":"message"}",
                  },
                  "statusCode": "200",
                },
              },
              "type": "MOCK",
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Mock Integration and CORS 2`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{"statusCode": 200}",
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {
                "application/json": "{"message":"message"}",
              },
              "statusCode": "200",
            },
          },
          "type": "MOCK",
        },
      },
      "options": {
        "description": "Enable CORS by returning the correct headers",
        "responses": {
          "204": {
            "content": {},
            "description": "Default response for CORS method",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [],
        "summary": "CORS Support",
        "x-amazon-apigateway-auth": {
          "type": "NONE",
        },
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{"statusCode": 204}",
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {
                "application/json": "{}",
              },
              "statusCode": "204",
            },
          },
          "type": "mock",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseParameters": {
        "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
        "gatewayresponse.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
      },
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Path Parameters 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478ed5e71f4a5bc4f71e07a9dafbe8ea425": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478ed5e71f4a5bc4f71e07a9dafbe8ea425",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test/*/fixed/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "6060611f34e7c9e9000a19922d48dfd8d47d66cbf3715fb30e173c4b51d9061b.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test/{param1}/fixed/{param2}/{param3}",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "6060611f34e7c9e9000a19922d48dfd8d47d66cbf3715fb30e173c4b51d9061b.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/6060611f34e7c9e9000a19922d48dfd8d47d66cbf3715fb30e173c4b51d9061b.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/6060611f34e7c9e9000a19922d48dfd8d47d66cbf3715fb30e173c4b51d9061b.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/6060611f34e7c9e9000a19922d48dfd8d47d66cbf3715fb30e173c4b51d9061b.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/6060611f34e7c9e9000a19922d48dfd8d47d66cbf3715fb30e173c4b51d9061b.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Path Parameters 2`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test/{param1}/fixed/{param2}/{param3}": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "passthroughBehavior": "WHEN_NO_MATCH",
          "type": "AWS_PROXY",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:lambda:path/2015-03-31/functions/\${<TOKEN>}/invocations",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC47810d7b0590d97eaf69cafa6593194e8df": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC47810d7b0590d97eaf69cafa6593194e8df",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "credentials": {
                "Fn::GetAtt": [
                  "ApiTestS3IntegrationsExecutionRole635C75E5",
                  "Arn",
                ],
              },
              "httpMethod": "GET",
              "requestParameters": {},
              "responses": {
                "400": {
                  "responseParameters": {},
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "400",
                },
                "403": {
                  "responseParameters": {},
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "403",
                },
                "404": {
                  "responseParameters": {},
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "404",
                },
                "500": {
                  "responseParameters": {},
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "500",
                },
                "default": {
                  "responseParameters": {},
                  "responseTemplates": {},
                  "statusCode": "200",
                },
              },
              "type": "AWS",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":s3:path/",
                    {
                      "Ref": "Bucket83908E77",
                    },
                    "//test",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRole635C75E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "//test",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360",
        "Roles": [
          {
            "Ref": "ApiTestS3IntegrationsExecutionRole635C75E5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Bucket83908E77": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration 2`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "credentials": "\${<TOKEN>}",
          "httpMethod": "GET",
          "requestParameters": {},
          "responses": {
            "400": {
              "responseParameters": {},
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "400",
            },
            "403": {
              "responseParameters": {},
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "403",
            },
            "404": {
              "responseParameters": {},
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "404",
            },
            "500": {
              "responseParameters": {},
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "500",
            },
            "default": {
              "responseParameters": {},
              "responseTemplates": {},
              "statusCode": "200",
            },
          },
          "type": "AWS",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:s3:path/\${<TOKEN>}//test",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration and CORS 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478beddb9201ba4ad68f6a4bc6d02cab297": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478beddb9201ba4ad68f6a4bc6d02cab297",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "corsOptions": {
          "allowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "x-amz-content-sha256",
          ],
          "allowMethods": [
            "OPTIONS",
            "GET",
            "PUT",
            "POST",
            "DELETE",
            "PATCH",
            "HEAD",
          ],
          "allowOrigins": [
            "*",
          ],
          "statusCode": 204,
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "credentials": {
                "Fn::GetAtt": [
                  "ApiTestS3IntegrationsExecutionRole635C75E5",
                  "Arn",
                ],
              },
              "httpMethod": "GET",
              "requestParameters": {},
              "responses": {
                "400": {
                  "responseParameters": {
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                  },
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "400",
                },
                "403": {
                  "responseParameters": {
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                  },
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "403",
                },
                "404": {
                  "responseParameters": {
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                  },
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "404",
                },
                "500": {
                  "responseParameters": {
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                  },
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "500",
                },
                "default": {
                  "responseParameters": {
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                  },
                  "responseTemplates": {},
                  "statusCode": "200",
                },
              },
              "type": "AWS",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":s3:path/",
                    {
                      "Ref": "Bucket83908E77",
                    },
                    "//test",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRole635C75E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "//test",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360",
        "Roles": [
          {
            "Ref": "ApiTestS3IntegrationsExecutionRole635C75E5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Bucket83908E77": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration and CORS 2`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "x-amazon-apigateway-integration": {
          "credentials": "\${<TOKEN>}",
          "httpMethod": "GET",
          "requestParameters": {},
          "responses": {
            "400": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "400",
            },
            "403": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "403",
            },
            "404": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "404",
            },
            "500": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "500",
            },
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {},
              "statusCode": "200",
            },
          },
          "type": "AWS",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:s3:path/\${<TOKEN>}//test",
        },
      },
      "options": {
        "description": "Enable CORS by returning the correct headers",
        "responses": {
          "204": {
            "content": {},
            "description": "Default response for CORS method",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                },
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                },
              },
            },
          },
        },
        "security": [],
        "summary": "CORS Support",
        "x-amazon-apigateway-auth": {
          "type": "NONE",
        },
        "x-amazon-apigateway-integration": {
          "requestTemplates": {
            "application/json": "{"statusCode": 204}",
          },
          "responses": {
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "responseTemplates": {
                "application/json": "{}",
              },
              "statusCode": "204",
            },
          },
          "type": "mock",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseParameters": {
        "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,x-amz-content-sha256'",
        "gatewayresponse.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
      },
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration and catch all error response 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478ebfbc700064544fdaac5fead52fd80db": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478ebfbc700064544fdaac5fead52fd80db",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "credentials": {
                "Fn::GetAtt": [
                  "ApiTestS3IntegrationsExecutionRole635C75E5",
                  "Arn",
                ],
              },
              "httpMethod": "GET",
              "requestParameters": {},
              "responses": {
                "(4|5)\\d{2}": {
                  "responseParameters": {},
                  "responseTemplates": {},
                  "statusCode": "500",
                },
                "default": {
                  "responseParameters": {},
                  "responseTemplates": {},
                  "statusCode": "200",
                },
              },
              "type": "AWS",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":s3:path/",
                    {
                      "Ref": "Bucket83908E77",
                    },
                    "//test",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRole635C75E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "//test",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360",
        "Roles": [
          {
            "Ref": "ApiTestS3IntegrationsExecutionRole635C75E5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Bucket83908E77": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration and catch all error response 2`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "credentials": "\${<TOKEN>}",
          "httpMethod": "GET",
          "requestParameters": {},
          "responses": {
            "(4|5)\\d{2}": {
              "responseParameters": {},
              "responseTemplates": {},
              "statusCode": "500",
            },
            "default": {
              "responseParameters": {},
              "responseTemplates": {},
              "statusCode": "200",
            },
          },
          "type": "AWS",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:s3:path/\${<TOKEN>}//test",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration and custom error responses 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478fefc088658fe169eae079143df6c6a3a": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478fefc088658fe169eae079143df6c6a3a",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "credentials": {
                "Fn::GetAtt": [
                  "ApiTestS3IntegrationsExecutionRole635C75E5",
                  "Arn",
                ],
              },
              "httpMethod": "GET",
              "requestParameters": {},
              "responses": {
                "4\\d{2}": {
                  "responseParameters": {},
                  "responseTemplates": {},
                  "statusCode": "400",
                },
                "5\\d{2}": {
                  "responseParameters": {},
                  "responseTemplates": {},
                  "statusCode": "500",
                },
                "default": {
                  "responseParameters": {},
                  "responseTemplates": {},
                  "statusCode": "200",
                },
              },
              "type": "AWS",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":s3:path/",
                    {
                      "Ref": "Bucket83908E77",
                    },
                    "//test",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRole635C75E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "//test",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360",
        "Roles": [
          {
            "Ref": "ApiTestS3IntegrationsExecutionRole635C75E5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Bucket83908E77": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration and custom error responses 2`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "credentials": "\${<TOKEN>}",
          "httpMethod": "GET",
          "requestParameters": {},
          "responses": {
            "4\\d{2}": {
              "responseParameters": {},
              "responseTemplates": {},
              "statusCode": "400",
            },
            "5\\d{2}": {
              "responseParameters": {},
              "responseTemplates": {},
              "statusCode": "500",
            },
            "default": {
              "responseParameters": {},
              "responseTemplates": {},
              "statusCode": "200",
            },
          },
          "type": "AWS",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:s3:path/\${<TOKEN>}//test",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration and props 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478e6c2a82a2d1f238927ee9b08db5d3223": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478e6c2a82a2d1f238927ee9b08db5d3223",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "credentials": {
                "Fn::GetAtt": [
                  "ApiTestS3IntegrationsExecutionRole635C75E5",
                  "Arn",
                ],
              },
              "httpMethod": "DELETE",
              "requestParameters": {},
              "responses": {
                "400": {
                  "responseParameters": {},
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "400",
                },
                "403": {
                  "responseParameters": {},
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "403",
                },
                "404": {
                  "responseParameters": {},
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "404",
                },
                "500": {
                  "responseParameters": {},
                  "responseTemplates": {
                    "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
                  },
                  "statusCode": "500",
                },
                "default": {
                  "responseParameters": {},
                  "responseTemplates": {},
                  "statusCode": "204",
                },
              },
              "type": "AWS",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":s3:path/",
                    {
                      "Ref": "Bucket83908E77",
                    },
                    "//my-pets/{petId}/details.json",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRole635C75E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "//my-pets/*/details.json",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestS3IntegrationsExecutionRoleDefaultPolicyD81F6360",
        "Roles": [
          {
            "Ref": "ApiTestS3IntegrationsExecutionRole635C75E5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Bucket83908E77": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With S3 Integration and props 2`] = `
{
  "components": {
    "securitySchemes": {},
  },
  "info": {
    "title": "Test API",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/test": {
      "get": {
        "operationId": "testOperation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Successful response",
            "headers": {},
          },
        },
        "x-amazon-apigateway-integration": {
          "credentials": "\${<TOKEN>}",
          "httpMethod": "DELETE",
          "requestParameters": {},
          "responses": {
            "400": {
              "responseParameters": {},
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "400",
            },
            "403": {
              "responseParameters": {},
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "403",
            },
            "404": {
              "responseParameters": {},
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "404",
            },
            "500": {
              "responseParameters": {},
              "responseTemplates": {
                "application/json": "#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
",
              },
              "statusCode": "500",
            },
            "default": {
              "responseParameters": {},
              "responseTemplates": {},
              "statusCode": "204",
            },
          },
          "type": "AWS",
          "uri": "arn:\${<TOKEN>}:apigateway:\${<TOKEN>}:s3:path/\${<TOKEN>}//my-pets/{petId}/details.json",
        },
      },
    },
  },
  "x-amazon-apigateway-gateway-responses": {
    "BAD_REQUEST_BODY": {
      "responseTemplates": {
        "application/json": "{"message": "$context.error.validationErrorString"}",
      },
      "statusCode": 400,
    },
  },
  "x-amazon-apigateway-request-validator": "all",
  "x-amazon-apigateway-request-validators": {
    "all": {
      "validateRequestBody": true,
      "validateRequestParameters": true,
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests With Waf IP Set 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclIPSet412969EA": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Addresses": [
          "1.2.3.4/5",
        ],
        "IPAddressVersion": "IPV4",
        "Name": "Default--ApiTest-Acl-WebAcl-IPSet",
        "Scope": "REGIONAL",
      },
      "Type": "AWS::WAFv2::IPSet",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Action": {
              "Block": {},
            },
            "Name": "Default--ApiTest-Acl-WebAcl-IPSet",
            "Priority": 1,
            "Statement": {
              "NotStatement": {
                "Statement": {
                  "IPSetReferenceStatement": {
                    "Arn": {
                      "Fn::GetAtt": [
                        "ApiTestApiTestAclIPSet412969EA",
                        "Arn",
                      ],
                    },
                  },
                },
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-IPSet",
              "SampledRequestsEnabled": true,
            },
          },
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478ba688c73ecd411d6bc46f33941546de6": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478ba688c73ecd411d6bc46f33941546de6",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Type Safe Rest Api Construct Unit Tests Without Waf 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiTestAccessLogs92CFE051": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC478ba688c73ecd411d6bc46f33941546de6": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestAccount272B5CDD",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiTestAccessLogs92CFE051",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC478ba688c73ecd411d6bc46f33941546de6",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissiontestOperationECAC1A2D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaD247545B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/test",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
        },
        "integrations": {
          "testOperation": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LambdaD247545B",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "testOperation": {
            "method": "get",
            "path": "/test",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecHandler46C6FEB5": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "59cdf82cb9dc1030496858d8966ca7135d09db561b50a8e67385b9b83cd41354.zip",
        },
        "FunctionName": "Default-3E755E54PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecHandler46C6FEB5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecHandler46C6FEB5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecHandler46C6FEB5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-3E755E54PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-3E755E54PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-3E755E54PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/ec22714a0fde30e0834df19bc639f3cb3519abd3ccd6dcf6b761d105827ca227.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaD247545B": {
      "DependsOn": [
        "LambdaServiceRoleA8ED4D3B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "code",
        },
        "Handler": "handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRoleA8ED4D3B",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaServiceRoleA8ED4D3B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
