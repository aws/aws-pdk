###TSAPI_SPLIT_FILE###
{{#apiInfo ~}}
{{#apis ~}}
{{#operations ~}}
{{#operation ~}}
{{#if vendorExtensions.x-handler}}
{{#startsWith vendorExtensions.x-handler.language 'typescript'}}
###TSAPI_WRITE_FILE###
{
  "id": "{{nickname}}Test",
  "dir": ".",
  "name": "{{nickname}}",
  "ext": ".test.ts",
  "overwrite": false,
  "kebabCaseFileName": true,
  "generateConditionallyId": "{{nickname}}"
}
###/TSAPI_WRITE_FILE###import {
  InternalFailureErrorResponseContent,
  {{operationIdCamelCase}}ChainedRequestInput,
} from "{{#apiInfo}}{{#apis.0}}{{vendorExtensions.x-runtime-package-name}}{{/apis.0}}{{/apiInfo}}";
import {
  {{nickname}}
} from "../src/###TSAPI_FN###{ "function": "kebabCase", "args": ["{{nickname}}"] }###/TSAPI_FN###";

// Common request arguments
const requestArguments = {
  chain: undefined as never,
  event: {} as any,
  context: {} as any,
  interceptorContext: {
    logger: {
      info: jest.fn(),
    },
  },
} satisfies Omit<{{operationIdCamelCase}}ChainedRequestInput, 'input'>;

describe('{{operationIdCamelCase}}', () => {

  it('should return not implemented error', async () => {
    // TODO: Update the test as appropriate when you implement your handler
    const response = await {{nickname}}({
      ...requestArguments,
      input: {
        // TODO: remove the "as any" below and fill in test values for the requestParameters{{#if bodyParam}} and body{{/if}}
        requestParameters: {} as any,
        body: {} as {{#if bodyParam}}any{{else}}never{{/if}},
      },
    });

    expect(response.statusCode).toBe(500);
    expect((response.body as InternalFailureErrorResponseContent).message).toEqual('Not Implemented!');
  });

});

{{~/startsWith}}
{{~/if}}
{{~/operation}}
{{~/operations}}
{{~/apis}}
{{~/apiInfo}}