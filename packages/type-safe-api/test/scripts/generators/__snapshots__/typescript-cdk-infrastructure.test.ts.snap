// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Infrastructure Code Generation Script Unit Tests Generates Functions for handlers.yaml 1`] = `
"import { Construct } from "constructs";
import { Duration } from "aws-cdk-lib";
import { SnapStartFunction, SnapStartFunctionProps } from "@aws/pdk/type-safe-api";
import { Code, Function, Runtime, Tracing, FunctionProps } from "aws-cdk-lib/aws-lambda";
import * as path from "path";

/**
 * Options for the JavaOneFunction construct
 */
export interface JavaOneFunctionProps extends Omit<SnapStartFunctionProps, 'code' | 'handler' | 'runtime'> {}

/**
 * Lambda function construct which points to the java implementation of JavaOne
 */
export class JavaOneFunction extends SnapStartFunction {
  constructor(scope: Construct, id: string, props?: JavaOneFunctionProps) {
    super(scope, id, {
      runtime: Runtime.JAVA_17,
      handler: "test.test-java-handlers.handlers.JavaOneHandler",
      code: Code.fromAsset(path.resolve(__dirname, "..",
        "../java-handlers/dist/java/test/com.aws.pdk.test.handlers/1.0.0/com.aws.pdk.test.handlers-1.0.0.jar",
      )),
      tracing: Tracing.ACTIVE,
      timeout: Duration.seconds(30),
      ...props,
    });
  }
}

/**
 * Options for the JavaTwoFunction construct
 */
export interface JavaTwoFunctionProps extends Omit<SnapStartFunctionProps, 'code' | 'handler' | 'runtime'> {}

/**
 * Lambda function construct which points to the java implementation of JavaTwo
 */
export class JavaTwoFunction extends SnapStartFunction {
  constructor(scope: Construct, id: string, props?: JavaTwoFunctionProps) {
    super(scope, id, {
      runtime: Runtime.JAVA_17,
      handler: "test.test-java-handlers.handlers.JavaTwoHandler",
      code: Code.fromAsset(path.resolve(__dirname, "..",
        "../java-handlers/dist/java/test/com.aws.pdk.test.handlers/1.0.0/com.aws.pdk.test.handlers-1.0.0.jar",
      )),
      tracing: Tracing.ACTIVE,
      timeout: Duration.seconds(30),
      ...props,
    });
  }
}

/**
 * Options for the PythonOneFunction construct
 */
export interface PythonOneFunctionProps extends Omit<FunctionProps, 'code' | 'handler' | 'runtime'> {}

/**
 * Lambda function construct which points to the python implementation of PythonOne
 */
export class PythonOneFunction extends Function {
  constructor(scope: Construct, id: string, props?: PythonOneFunctionProps) {
    super(scope, id, {
      runtime: Runtime.PYTHON_3_11,
      handler: "test_python_handlers.python_one.handler",
      code: Code.fromAsset(path.resolve(__dirname, "..",
        "../python-handlers/dist/lambda",
      )),
      tracing: Tracing.ACTIVE,
      timeout: Duration.seconds(30),
      ...props,
    });
  }
}

/**
 * Options for the PythonTwoFunction construct
 */
export interface PythonTwoFunctionProps extends Omit<FunctionProps, 'code' | 'handler' | 'runtime'> {}

/**
 * Lambda function construct which points to the python implementation of PythonTwo
 */
export class PythonTwoFunction extends Function {
  constructor(scope: Construct, id: string, props?: PythonTwoFunctionProps) {
    super(scope, id, {
      runtime: Runtime.PYTHON_3_11,
      handler: "test_python_handlers.python_two.handler",
      code: Code.fromAsset(path.resolve(__dirname, "..",
        "../python-handlers/dist/lambda",
      )),
      tracing: Tracing.ACTIVE,
      timeout: Duration.seconds(30),
      ...props,
    });
  }
}

/**
 * Options for the TypescriptOneFunction construct
 */
export interface TypescriptOneFunctionProps extends Omit<FunctionProps, 'code' | 'handler' | 'runtime'> {}

/**
 * Lambda function construct which points to the typescript implementation of TypescriptOne
 */
export class TypescriptOneFunction extends Function {
  constructor(scope: Construct, id: string, props?: TypescriptOneFunctionProps) {
    super(scope, id, {
      runtime: Runtime.NODEJS_18_X,
      handler: "index.handler",
      code: Code.fromAsset(path.resolve(__dirname, "..",
        "../typescript-handlers/dist/lambda",
        "typescript-one",
      )),
      tracing: Tracing.ACTIVE,
      timeout: Duration.seconds(30),
      ...props,
    });
  }
}

/**
 * Options for the TypescriptTwoFunction construct
 */
export interface TypescriptTwoFunctionProps extends Omit<FunctionProps, 'code' | 'handler' | 'runtime'> {}

/**
 * Lambda function construct which points to the typescript implementation of TypescriptTwo
 */
export class TypescriptTwoFunction extends Function {
  constructor(scope: Construct, id: string, props?: TypescriptTwoFunctionProps) {
    super(scope, id, {
      runtime: Runtime.NODEJS_18_X,
      handler: "index.handler",
      code: Code.fromAsset(path.resolve(__dirname, "..",
        "../typescript-handlers/dist/lambda",
        "typescript-two",
      )),
      tracing: Tracing.ACTIVE,
      timeout: Duration.seconds(30),
      ...props,
    });
  }
}

"
`;

exports[`Typescript Infrastructure Code Generation Script Unit Tests Generates Functions for inline-body.yaml 1`] = `
"import { Construct } from "constructs";
import { Duration } from "aws-cdk-lib";
import { SnapStartFunction, SnapStartFunctionProps } from "@aws/pdk/type-safe-api";
import { Code, Function, Runtime, Tracing, FunctionProps } from "aws-cdk-lib/aws-lambda";
import * as path from "path";

/**
 * Options for the JavaTestFunction construct
 */
export interface JavaTestFunctionProps extends Omit<SnapStartFunctionProps, 'code' | 'handler' | 'runtime'> {}

/**
 * Lambda function construct which points to the java implementation of JavaTest
 */
export class JavaTestFunction extends SnapStartFunction {
  constructor(scope: Construct, id: string, props?: JavaTestFunctionProps) {
    super(scope, id, {
      runtime: Runtime.JAVA_17,
      handler: "test.test-java-handlers.handlers.JavaTestHandler",
      code: Code.fromAsset(path.resolve(__dirname, "..",
        "../java-handlers/dist/java/test/com.aws.pdk.test.handlers/1.0.0/com.aws.pdk.test.handlers-1.0.0.jar",
      )),
      tracing: Tracing.ACTIVE,
      timeout: Duration.seconds(30),
      ...props,
    });
  }
}

/**
 * Options for the PythonTestFunction construct
 */
export interface PythonTestFunctionProps extends Omit<FunctionProps, 'code' | 'handler' | 'runtime'> {}

/**
 * Lambda function construct which points to the python implementation of PythonTest
 */
export class PythonTestFunction extends Function {
  constructor(scope: Construct, id: string, props?: PythonTestFunctionProps) {
    super(scope, id, {
      runtime: Runtime.PYTHON_3_11,
      handler: "test_python_handlers.python_test.handler",
      code: Code.fromAsset(path.resolve(__dirname, "..",
        "../python-handlers/dist/lambda",
      )),
      tracing: Tracing.ACTIVE,
      timeout: Duration.seconds(30),
      ...props,
    });
  }
}

/**
 * Options for the TypescriptTestFunction construct
 */
export interface TypescriptTestFunctionProps extends Omit<FunctionProps, 'code' | 'handler' | 'runtime'> {}

/**
 * Lambda function construct which points to the typescript implementation of TypescriptTest
 */
export class TypescriptTestFunction extends Function {
  constructor(scope: Construct, id: string, props?: TypescriptTestFunctionProps) {
    super(scope, id, {
      runtime: Runtime.NODEJS_18_X,
      handler: "index.handler",
      code: Code.fromAsset(path.resolve(__dirname, "..",
        "../typescript-handlers/dist/lambda",
        "typescript-test",
      )),
      tracing: Tracing.ACTIVE,
      timeout: Duration.seconds(30),
      ...props,
    });
  }
}

"
`;

exports[`Typescript Infrastructure Code Generation Script Unit Tests Generates With Mocks Disabled 1`] = `
"import {
  ApiError,
  ApiErrorToJSON,
  MapResponse,
  MapResponseToJSON,
  MapResponseMapPropertyValue,
  MapResponseMapPropertyValueToJSON,
  TestRequest,
  TestRequestToJSON,
  TestResponse,
  TestResponseToJSON,
  TestResponseMessagesInner,
  TestResponseMessagesInnerToJSON,
} from "test-client";
import { Integrations, MockIntegration } from "@aws/pdk/type-safe-api";
import * as fs from "fs";
import * as path from "path";

/**
 * Type-safe mock integrations for API operations
 */
export class MockIntegrations {
  /**
   * Read a mock data file for the given operation
   */
  private static readMockDataFile(method: string, urlPath: string, statusCode: number): string {
    return fs.readFileSync(path.join(__dirname, "..", "mocks", \`\${method.toLowerCase()}\${urlPath.replace(/\\//g, "-")}-\${statusCode}.json\`), "utf-8");
  }

  // No mock integrations have been generated, since mock data generation is disabled.

}
"
`;

exports[`Typescript Infrastructure Code Generation Script Unit Tests Generates With single.yaml 1`] = `
"import { TypeSafeRestApi, TypeSafeRestApiProps, TypeSafeApiIntegration } from "@aws/pdk/type-safe-api";
import { Construct } from "constructs";
import { OperationLookup, OperationConfig } from "test-client";
import * as path from "path";

export type ApiIntegrations = OperationConfig<TypeSafeApiIntegration>;

export interface ApiProps extends Omit<TypeSafeRestApiProps, "specPath" | "operationLookup" | "integrations"> {
  readonly integrations: ApiIntegrations;
}

/**
 * Type-safe construct for the API Gateway resources defined by your model.
 * This construct is generated and should not be modified.
 */
export class Api extends TypeSafeRestApi {
  constructor(scope: Construct, id: string, props: ApiProps) {
    super(scope, id, {
      ...props,
      integrations: props.integrations as any,
      specPath: path.resolve(__dirname, "../assets/api.json"),
      operationLookup: OperationLookup as any,
    });
  }
}
"
`;

exports[`Typescript Infrastructure Code Generation Script Unit Tests Generates With single.yaml 2`] = `
"import {
  ApiError,
  ApiErrorToJSON,
  MapResponse,
  MapResponseToJSON,
  MapResponseMapPropertyValue,
  MapResponseMapPropertyValueToJSON,
  TestRequest,
  TestRequestToJSON,
  TestResponse,
  TestResponseToJSON,
  TestResponseMessagesInner,
  TestResponseMessagesInnerToJSON,
} from "test-client";
import { Integrations, MockIntegration } from "@aws/pdk/type-safe-api";
import * as fs from "fs";
import * as path from "path";

/**
 * Type-safe mock integrations for API operations
 */
export class MockIntegrations {
  /**
   * Read a mock data file for the given operation
   */
  private static readMockDataFile(method: string, urlPath: string, statusCode: number): string {
    return fs.readFileSync(path.join(__dirname, "..", "mocks", \`\${method.toLowerCase()}\${urlPath.replace(/\\//g, "-")}-\${statusCode}.json\`), "utf-8");
  }

  /**
   * Mock integration to return a 200 response from the anyRequestResponse operation
   */
  public static anyRequestResponse200(body: string): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body,
    });
  }

  /**
   * Mock integration to return a 204 response from the empty operation
   */
  public static empty204(): MockIntegration {
    return Integrations.mock({
      statusCode: 204,
    });
  }

  /**
   * Mock integration to return a 200 response from the mapResponse operation
   * Call this with no arguments to use a generated mock response
   */
  public static mapResponse200(body?: MapResponse): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body: body === undefined
        ? MockIntegrations.readMockDataFile("GET", "/map-response", 200)
        : JSON.stringify(MapResponseToJSON(body)),
    });
  }

  /**
   * Mock integration to return a 200 response from the mediaTypes operation
   */
  public static mediaTypes200(body: string): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body,
    });
  }

  /**
   * Mock integration to return a 200 response from the multipleContentTypes operation
   */
  public static multipleContentTypes200(body: string): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body,
    });
  }

  /**
   * Mock integration to return a 200 response from the operationOne operation
   * Call this with no arguments to use a generated mock response
   */
  public static operationOne200(body?: TestResponse): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body: body === undefined
        ? MockIntegrations.readMockDataFile("POST", "/path/{pathParam}", 200)
        : JSON.stringify(TestResponseToJSON(body)),
    });
  }

  /**
   * Mock integration to return a 400 response from the operationOne operation
   * Call this with no arguments to use a generated mock response
   */
  public static operationOne400(body?: ApiError): MockIntegration {
    return Integrations.mock({
      statusCode: 400,
      body: body === undefined
        ? MockIntegrations.readMockDataFile("POST", "/path/{pathParam}", 400)
        : JSON.stringify(ApiErrorToJSON(body)),
    });
  }

  /**
   * Mock integration to return a 200 response from the withoutOperationIdDelete operation
   * Call this with no arguments to use a generated mock response
   */
  public static withoutOperationIdDelete200(body?: TestResponse): MockIntegration {
    return Integrations.mock({
      statusCode: 200,
      body: body === undefined
        ? MockIntegrations.readMockDataFile("DELETE", "/without-operation-id", 200)
        : JSON.stringify(TestResponseToJSON(body)),
    });
  }


  /**
   * Mock all operations for which generated JSON data can be returned.
   * The first available response is used for each operation. In most cases this is the successful 200 response.
   */
  public static mockAll() {
    return {
      mapResponse: {
        integration: MockIntegrations.mapResponse200(),
      },
      operationOne: {
        integration: MockIntegrations.operationOne200(),
      },
      withoutOperationIdDelete: {
        integration: MockIntegrations.withoutOperationIdDelete200(),
      },
    };
  }

}
"
`;

exports[`Typescript Infrastructure Code Generation Script Unit Tests Generates With single.yaml 3`] = `
"export * from "./api";
export * from "./mock-integrations";
export * from "./functions";
"
`;
