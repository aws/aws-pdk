// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type Safe Api Model Project Unit Tests OpenAPI 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. We add the desired path and HTTP method for the operation, as well as its inputs and outputs, for example:

\`\`\`yaml
paths:
  /foo/{myUrlParam}:
    post:
      operationId: CreateFoo
      parameters:
        - name: myUrlParam
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFooRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFooResponse'
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    CreateFooRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
    CreateFooResponse:
      type: object
      properties:
        foo:
          $ref: '#/components/schemas/Foo'
      required:
        - foo
    Foo:
      type: object
      properties:
        myProperty:
          type: integer
      required:
        - myProperty
\`\`\`

Notice above we also used a reference to \`Foo\` in the \`CreateFooResponse\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sayHello.yaml
    |_ schemas/
        |_ index.yaml
        |_ helloResponse.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/hello:
  get:
    $ref: './sayHello.yaml'
\`\`\`

\`paths/sayHello.yaml\`:

\`\`\`yaml
operationId: sayHello
parameters:
 - in: query
   name: name
   schema:
     type: string
   required: true
responses:
  '200':
    description: Successful response
    content:
      'application/json':
        schema:
          $ref: '../schemas/helloResponse.yaml'
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
HelloResponse:
  $ref: './helloResponse.yaml'
\`\`\`

\`schemas/helloResponse.yaml\`:

\`\`\`yaml
type: object
properties:
  message:
    type: string
required:
  - message
\`\`\`
",
  "src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /hello:
    get:
      operationId: sayHello
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SayHelloResponseContent'
        500:
          description: An internal failure at the fault of the server
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/InternalFailureErrorResponseContent'
        400:
          description: An error at the fault of the client sending invalid input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        403:
          description: An error due to the client not being authorized to access the resource
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NotAuthorizedErrorResponseContent'
components:
  schemas:
    SayHelloResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    InternalFailureErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    NotAuthorizedErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
",
}
`;

exports[`Type Safe Api Model Project Unit Tests OpenAPI With Handlers 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.parse-openapi-spec --spec-path src/main/openapi/main.yaml --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# OpenAPI Model

This project defines the API operations and their inputs and outputs, using [OpenAPI v3](https://swagger.io/specification/v3/).

The entrypoint for the API is \`src/main/openapi/main.yaml\`. You can add more yaml files (and subfolders) in the \`src/main/openapi\` directory and these will be included in your API definition so long as they are referencable from \`main.yaml\`.

Resources:
 - [OpenAPI v3 Documentation](https://swagger.io/specification/v3/)
 - [Type Safe API Documentation](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we must edit the \`paths\` section of the OpenAPI document. We add the desired path and HTTP method for the operation, as well as its inputs and outputs, for example:

\`\`\`yaml
paths:
  /foo/{myUrlParam}:
    post:
      operationId: CreateFoo
      parameters:
        - name: myUrlParam
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFooRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFooResponse'
\`\`\`

Notice we used \`$ref\` to reference \`components\` in the OpenAPI specification. We define these next:

\`\`\`yaml
components:
  schemas:
    CreateFooRequest:
      type: object
      properties:
        someParameter:
          type: string
        anotherParameter:
          type: double
      required:
        - someParameter
    CreateFooResponse:
      type: object
      properties:
        foo:
          $ref: '#/components/schemas/Foo'
      required:
        - foo
    Foo:
      type: object
      properties:
        myProperty:
          type: integer
      required:
        - myProperty
\`\`\`

Notice above we also used a reference to \`Foo\` in the \`CreateFooResponse\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Breaking Up The Model

You may find that a single \`main.yaml\` file becomes unwieldy as the API grows. You can split the file up using references to local files within the \`src/main/openapi\` directory.

For example, you might choose to structure your spec as follows:

\`\`\`
|_ src/main/openapi/
    |_ main.yaml
    |_ paths/
        |_ index.yaml
        |_ sayHello.yaml
    |_ schemas/
        |_ index.yaml
        |_ helloResponse.yaml
\`\`\`

Where \`main.yaml\` looks as follows:

\`\`\`yaml
openapi: 3.0.3
info:
  version: 1.0.0
  title: Example API
paths:
  $ref: './paths/index.yaml'
components:
  schemas:
    $ref: './schemas/index.yaml'
\`\`\`

\`paths/index.yaml\`:

\`\`\`yaml
/hello:
  get:
    $ref: './sayHello.yaml'
\`\`\`

\`paths/sayHello.yaml\`:

\`\`\`yaml
operationId: sayHello
parameters:
 - in: query
   name: name
   schema:
     type: string
   required: true
responses:
  '200':
    description: Successful response
    content:
      'application/json':
        schema:
          $ref: '../schemas/helloResponse.yaml'
\`\`\`

\`schemas/index.yaml\`:

\`\`\`yaml
HelloResponse:
  $ref: './helloResponse.yaml'
\`\`\`

\`schemas/helloResponse.yaml\`:

\`\`\`yaml
type: object
properties:
  message:
    type: string
required:
  - message
\`\`\`
",
  "src/main/openapi/main.yaml": "openapi: 3.0.3
info:
  version: 1.0.0
  title: MyService
paths:
  /hello:
    get:
      operationId: sayHello
      x-handler:
        language: java
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SayHelloResponseContent'
        500:
          description: An internal failure at the fault of the server
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/InternalFailureErrorResponseContent'
        400:
          description: An error at the fault of the client sending invalid input
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadRequestErrorResponseContent'
        403:
          description: An error due to the client not being authorized to access the resource
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NotAuthorizedErrorResponseContent'
components:
  schemas:
    SayHelloResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    InternalFailureErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    BadRequestErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    NotAuthorizedErrorResponseContent:
      type: object
      properties:
        message:
          type: string
      required:
        - message
",
}
`;

exports[`Type Safe Api Model Project Unit Tests Smithy 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.parse-openapi-spec --spec-path build/smithyprojections/smithy-model/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-model'
",
  "smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Model Project Unit Tests Smithy With Build Options 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.parse-openapi-spec --spec-path build/smithyprojections/smithy-model-with-build-options/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy', 'yet/another', '../another-absolute']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-model-with-build-options'
",
  "smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "forbidGreedyLabels": true,
            "ignoreUnsupportedTraits": true,
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "foo/bar",
      "../some-other-directory",
      "generated/main/smithy",
      "yet/another",
      "../another-absolute",
    ],
    "version": "2.0",
  },
  "src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Model Project Unit Tests Smithy With Dependencies 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.parse-openapi-spec --spec-path build/smithyprojections/smithy-model-consumer/openapi/openapi/Consumer.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
    implementation files("../smithy-model-lib/build/libs/smithy-model-lib.jar")
}
",
  "generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "TraitNotPermitted"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                *
            """
            messageTemplate: """
                @@handler trait cannot be used unless handler project languages have been configured.
                You can add handler projects by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have not configured any handler projects, so you cannot use this trait.
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-model-consumer'
",
  "smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#Consumer",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service Consumer {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;

exports[`Type Safe Api Model Project Unit Tests Smithy With Handlers 1`] = `
{
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
gradle
gradlew
gradlew.bat
.gradle
!/settings.gradle
!/build.gradle
!/smithy-build.json
!/generated/main/smithy/aws-pdk/prelude.smithy
build
smithy-output
.api.json
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "build.gradle",
      "generated/main/smithy/aws-pdk/prelude.smithy",
      "settings.gradle",
      "smithy-build.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
        "steps": [
          {
            "spawn": "generate",
          },
        ],
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "generate": {
        "name": "generate",
        "steps": [
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.copy-gradle-wrapper",
          },
          {
            "exec": "./gradlew build",
          },
          {
            "exec": "npx --yes -p @aws/pdk@0.0.0 type-safe-api.parse-openapi-spec --spec-path build/smithyprojections/smithy-handlers/openapi/openapi/MyService.openapi.json --output-path .api.json",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# Smithy Model

This project defines the API operations and their inputs and outputs, using an interface definition language called [Smithy](https://smithy.io/2.0/).

The default entrypoint for the API is \`src/main/smithy/main.smithy\`. You can add more Smithy files (and subfolders) in the \`src/main/smithy\` directory, and these will be discovered as part of the project's build task.

Resources:
 - [Smithy Documentation](https://smithy.io/2.0/)
 - [Type Safe API Documentation](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api)

## Adding Operations

To add an operation, we can use the \`operation\` shape. It should be annotated with the \`@http\` trait, which defines the method and path for the operation. Each operation has \`input\`, \`output\` and \`errors\`. You can define the \`input\` and \`output\` inline using the \`:=\` syntax.

\`\`\`smithy
/// This is an example operation.
@http(method: "POST", uri: "/foo/{myUrlParam}")
operation CreateFoo {
    input := {
        /// This parameter comes from the url
        @httpLabel
        myUrlParam: String

        /// Since there's no @httpLabel or @httpQuery annotation,
        /// this parameter will be in the POST request body
        @reqired
        someParameter: String

        /// This parameter is also in the body, but is optional
        anotherParameter: Double
    }
    output := {
        @required
        foo: Foo
    }
    errors: [ApiError]
}
\`\`\`

In the above, we've referenced a shape called \`Foo\` in the output. Let's define that as a \`structure\`:

\`\`\`smithy
structure Foo {
    /// Some documentation about this property
    @required
    myProperty: Integer
}
\`\`\`

When we're happy with our new operation, we must add it to our \`service\`. By default, the \`service\` shape is in the \`src/main/smithy/main.smithy\` file.

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    operations: [
        SayHello
        CreateFoo // <- add the new operation here
    ]
}
\`\`\`

After adding the operation, please follow the remaining instructions in the [main README](../README.md).

## Resources

A common pattern is to use resources to model parts of your API. These are collections of operations which for managing an entity with an identifier. In a resource, you define the identifier as well as operations to manage the entity's lifecycle. For example:

\`\`\`smithy
resource PetResource {
    identifiers: {
        petId: String
    }
    read: GetPet
    list: ListPets
    update: UpdatePet
    create: CreatePet
    delete: DeletePet
}
\`\`\`

For the resource to be included in your API, you must attach it to the \`service\` by adding it to the service's \`resources\` property:

\`\`\`smithy
@restJson1
service MyApi {
    version: "1.0"
    resources: [
        PetResource
    ]
}
\`\`\`

For more details, see the [Smithy documentation](https://smithy.io/2.0/spec/service-types.html#resource).

## Customising the Smithy Build

The build task for this project will by default generate an Open API specification from the Smithy model, which is then used to generate the runtime, infrastructure, and documentation projects.

You can further customise the build via editing the \`TypeSafeApiProject\` \`model.options.smithyBuildOptions\` in the root \`.projenrc\` file. This includes adding projections, or customising the \`openapi\` projection used to generate the Open API specification.

For details about customising the build, please see the [Type Safe API README](https://github.com/aws/aws-pdk/tree/mainline/packages/type-safe-api), and refer to the [Smithy Build documentation](https://smithy.io/2.0/guides/building-models/build-config.html).
",
  "build.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
plugins {
    id "software.amazon.smithy" version "0.6.0"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/smithy', 'generated/main/smithy']
        }
    }
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies can be added by configuring smithyBuildOptions in your .projenrc file
dependencies {
    implementation "software.amazon.smithy:smithy-cli:1.28.0"
    implementation "software.amazon.smithy:smithy-model:1.28.0"
    implementation "software.amazon.smithy:smithy-openapi:1.28.0"
    implementation "software.amazon.smithy:smithy-aws-traits:1.28.0"
}
",
  "generated/main/smithy/aws-pdk/prelude.smithy": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

$version: "2"

metadata validators = [
    {
        id: "SupportedLanguage"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                :not([@trait|com.test#handler: @{language} = typescript, java, python])
            """
            messageTemplate: """
                @{trait|com.test#handler|language} is not supported by type-safe-api.
                Supported languages are "typescript", "java" and "python".
            """
        }
    }
    {
        id: "ConfiguredHandlerProject"
        name: "EmitEachSelector"
        configuration: {
            bindToTrait: com.test#handler
            selector: """
                [@trait|com.test#handler: @{language} = typescript, java, python]
                :not([@trait|com.test#handler: @{language} = python, typescript])
            """
            messageTemplate: """
                @@handler language @{trait|com.test#handler|language} cannot be referenced unless a handler project is configured for this language.
                Configured handler project languages are: python, typescript.
                You can add this language by configuring TypeSafeApiProject in your .projenrc
            """
        }
    }
]

namespace com.test

/// Add this trait to an operation to generate a lambda handler stub for the operation.
/// You have configured handler projects for python, typescript
@trait(selector: "operation")
structure handler {
    /// The language you will implement the lambda in.
    /// Valid values: typescript, java, python
    @required
    language: String
}

",
  "settings.gradle": "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
rootProject.name = 'smithy-handlers'
",
  "smithy-build.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "maven": {
      "dependencies": [
        "software.amazon.smithy:smithy-cli:1.28.0",
        "software.amazon.smithy:smithy-model:1.28.0",
        "software.amazon.smithy:smithy-openapi:1.28.0",
        "software.amazon.smithy:smithy-aws-traits:1.28.0",
      ],
      "repositories": [
        {
          "url": "https://repo.maven.apache.org/maven2/",
        },
        {
          "url": "file://~/.m2/repository",
        },
      ],
    },
    "projections": {
      "openapi": {
        "plugins": {
          "openapi": {
            "service": "com.test#MyService",
            "tags": true,
          },
        },
      },
    },
    "sources": [
      "src/main/smithy",
      "generated/main/smithy",
    ],
    "version": "2.0",
  },
  "src/main/smithy/main.smithy": "$version: "2"
namespace com.test

use aws.protocols#restJson1

/// A sample smithy api
@restJson1
service MyService {
    version: "1.0"
    operations: [SayHello]
    errors: [
      BadRequestError
      NotAuthorizedError
      InternalFailureError
    ]
}",
  "src/main/smithy/operations/say-hello.smithy": "$version: "2"
namespace com.test

@readonly
@http(method: "GET", uri: "/hello")
@handler(language: "python")
operation SayHello {
    input := {
        @httpQuery("name")
        @required
        name: String
    }
    output := {
        @required
        message: String
    }
    errors: [NotFoundError]
}
",
  "src/main/smithy/types/errors.smithy": "$version: "2"
namespace com.test

/// An error message
string ErrorMessage

/// An internal failure at the fault of the server
@error("server")
@httpError(500)
structure InternalFailureError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error at the fault of the client sending invalid input
@error("client")
@httpError(400)
structure BadRequestError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client attempting to access a missing resource
@error("client")
@httpError(404)
structure NotFoundError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}

/// An error due to the client not being authorized to access the resource
@error("client")
@httpError(403)
structure NotAuthorizedError {
    /// Message with details about the error
    @required
    message: ErrorMessage
}
",
}
`;
